{"ast":null,"code":"import { isArray, isMatrix, isString, typeOf } from '../../utils/is.js';\nimport { clone } from '../../utils/object.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'ImmutableDenseMatrix';\nvar dependencies = ['smaller', 'DenseMatrix'];\nexport var createImmutableDenseMatrixClass = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var smaller = _ref.smaller,\n      DenseMatrix = _ref.DenseMatrix;\n\n  function ImmutableDenseMatrix(data, datatype) {\n    if (!(this instanceof ImmutableDenseMatrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (datatype && !isString(datatype)) {\n      throw new Error('Invalid datatype: ' + datatype);\n    }\n\n    if (isMatrix(data) || isArray(data)) {\n      // use DenseMatrix implementation\n      var matrix = new DenseMatrix(data, datatype); // internal structures\n\n      this._data = matrix._data;\n      this._size = matrix._size;\n      this._datatype = matrix._datatype;\n      this._min = null;\n      this._max = null;\n    } else if (data && isArray(data.data) && isArray(data.size)) {\n      // initialize fields from JSON representation\n      this._data = data.data;\n      this._size = data.size;\n      this._datatype = data.datatype;\n      this._min = typeof data.min !== 'undefined' ? data.min : null;\n      this._max = typeof data.max !== 'undefined' ? data.max : null;\n    } else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + typeOf(data) + ')');\n    } else {\n      // nothing provided\n      this._data = [];\n      this._size = [0];\n      this._datatype = datatype;\n      this._min = null;\n      this._max = null;\n    }\n  }\n\n  ImmutableDenseMatrix.prototype = new DenseMatrix();\n  /**\n   * Attach type information\n   */\n\n  ImmutableDenseMatrix.prototype.type = 'ImmutableDenseMatrix';\n  ImmutableDenseMatrix.prototype.isImmutableDenseMatrix = true;\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @param {Index} index\n   * @param {Array | ImmutableDenseMatrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n\n  ImmutableDenseMatrix.prototype.subset = function (index) {\n    switch (arguments.length) {\n      case 1:\n        {\n          // use base implementation\n          var m = DenseMatrix.prototype.subset.call(this, index); // check result is a matrix\n\n          if (isMatrix(m)) {\n            // return immutable matrix\n            return new ImmutableDenseMatrix({\n              data: m._data,\n              size: m._size,\n              datatype: m._datatype\n            });\n          }\n\n          return m;\n        }\n      // intentional fall through\n\n      case 2:\n      case 3:\n        throw new Error('Cannot invoke set subset on an Immutable Matrix instance');\n\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n  /**\n   * Replace a single element in the matrix.\n   * @param {Number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be left undefined.\n   * @return {ImmutableDenseMatrix} self\n   */\n\n\n  ImmutableDenseMatrix.prototype.set = function () {\n    throw new Error('Cannot invoke set on an Immutable Matrix instance');\n  };\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @param {Number[]} size           The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n\n\n  ImmutableDenseMatrix.prototype.resize = function () {\n    throw new Error('Cannot invoke resize on an Immutable Matrix instance');\n  };\n  /**\n   * Disallows reshaping in favor of immutability.\n   *\n   * @throws {Error} Operation not allowed\n   */\n\n\n  ImmutableDenseMatrix.prototype.reshape = function () {\n    throw new Error('Cannot invoke reshape on an Immutable Matrix instance');\n  };\n  /**\n   * Create a clone of the matrix\n   * @return {ImmutableDenseMatrix} clone\n   */\n\n\n  ImmutableDenseMatrix.prototype.clone = function () {\n    return new ImmutableDenseMatrix({\n      data: clone(this._data),\n      size: clone(this._size),\n      datatype: this._datatype\n    });\n  };\n  /**\n   * Get a JSON representation of the matrix\n   * @returns {Object}\n   */\n\n\n  ImmutableDenseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'ImmutableDenseMatrix',\n      data: this._data,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n  /**\n   * Generate a matrix from a JSON object\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"ImmutableDenseMatrix\", data: [], size: []}`,\n   *                       where mathjs is optional\n   * @returns {ImmutableDenseMatrix}\n   */\n\n\n  ImmutableDenseMatrix.fromJSON = function (json) {\n    return new ImmutableDenseMatrix(json);\n  };\n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @param {Number} i       Matrix row index 1\n   * @param {Number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n\n\n  ImmutableDenseMatrix.prototype.swapRows = function () {\n    throw new Error('Cannot invoke swapRows on an Immutable Matrix instance');\n  };\n  /**\n   * Calculate the minimum value in the set\n   * @return {Number | undefined} min\n   */\n\n\n  ImmutableDenseMatrix.prototype.min = function () {\n    // check min has been calculated before\n    if (this._min === null) {\n      // minimum\n      var m = null; // compute min\n\n      this.forEach(function (v) {\n        if (m === null || smaller(v, m)) {\n          m = v;\n        }\n      });\n      this._min = m !== null ? m : undefined;\n    }\n\n    return this._min;\n  };\n  /**\n   * Calculate the maximum value in the set\n   * @return {Number | undefined} max\n   */\n\n\n  ImmutableDenseMatrix.prototype.max = function () {\n    // check max has been calculated before\n    if (this._max === null) {\n      // maximum\n      var m = null; // compute max\n\n      this.forEach(function (v) {\n        if (m === null || smaller(m, v)) {\n          m = v;\n        }\n      });\n      this._max = m !== null ? m : undefined;\n    }\n\n    return this._max;\n  };\n\n  return ImmutableDenseMatrix;\n}, {\n  isClass: true\n});","map":{"version":3,"names":["isArray","isMatrix","isString","typeOf","clone","factory","name","dependencies","createImmutableDenseMatrixClass","_ref","smaller","DenseMatrix","ImmutableDenseMatrix","data","datatype","SyntaxError","Error","matrix","_data","_size","_datatype","_min","_max","size","min","max","TypeError","prototype","type","isImmutableDenseMatrix","subset","index","arguments","length","m","call","set","resize","reshape","toJSON","mathjs","fromJSON","json","swapRows","forEach","v","undefined","isClass"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/type/matrix/ImmutableDenseMatrix.js"],"sourcesContent":["import { isArray, isMatrix, isString, typeOf } from '../../utils/is.js';\nimport { clone } from '../../utils/object.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'ImmutableDenseMatrix';\nvar dependencies = ['smaller', 'DenseMatrix'];\nexport var createImmutableDenseMatrixClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    smaller,\n    DenseMatrix\n  } = _ref;\n\n  function ImmutableDenseMatrix(data, datatype) {\n    if (!(this instanceof ImmutableDenseMatrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (datatype && !isString(datatype)) {\n      throw new Error('Invalid datatype: ' + datatype);\n    }\n\n    if (isMatrix(data) || isArray(data)) {\n      // use DenseMatrix implementation\n      var matrix = new DenseMatrix(data, datatype); // internal structures\n\n      this._data = matrix._data;\n      this._size = matrix._size;\n      this._datatype = matrix._datatype;\n      this._min = null;\n      this._max = null;\n    } else if (data && isArray(data.data) && isArray(data.size)) {\n      // initialize fields from JSON representation\n      this._data = data.data;\n      this._size = data.size;\n      this._datatype = data.datatype;\n      this._min = typeof data.min !== 'undefined' ? data.min : null;\n      this._max = typeof data.max !== 'undefined' ? data.max : null;\n    } else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + typeOf(data) + ')');\n    } else {\n      // nothing provided\n      this._data = [];\n      this._size = [0];\n      this._datatype = datatype;\n      this._min = null;\n      this._max = null;\n    }\n  }\n\n  ImmutableDenseMatrix.prototype = new DenseMatrix();\n  /**\n   * Attach type information\n   */\n\n  ImmutableDenseMatrix.prototype.type = 'ImmutableDenseMatrix';\n  ImmutableDenseMatrix.prototype.isImmutableDenseMatrix = true;\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @param {Index} index\n   * @param {Array | ImmutableDenseMatrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n\n  ImmutableDenseMatrix.prototype.subset = function (index) {\n    switch (arguments.length) {\n      case 1:\n        {\n          // use base implementation\n          var m = DenseMatrix.prototype.subset.call(this, index); // check result is a matrix\n\n          if (isMatrix(m)) {\n            // return immutable matrix\n            return new ImmutableDenseMatrix({\n              data: m._data,\n              size: m._size,\n              datatype: m._datatype\n            });\n          }\n\n          return m;\n        }\n      // intentional fall through\n\n      case 2:\n      case 3:\n        throw new Error('Cannot invoke set subset on an Immutable Matrix instance');\n\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n  /**\n   * Replace a single element in the matrix.\n   * @param {Number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be left undefined.\n   * @return {ImmutableDenseMatrix} self\n   */\n\n\n  ImmutableDenseMatrix.prototype.set = function () {\n    throw new Error('Cannot invoke set on an Immutable Matrix instance');\n  };\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @param {Number[]} size           The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n\n\n  ImmutableDenseMatrix.prototype.resize = function () {\n    throw new Error('Cannot invoke resize on an Immutable Matrix instance');\n  };\n  /**\n   * Disallows reshaping in favor of immutability.\n   *\n   * @throws {Error} Operation not allowed\n   */\n\n\n  ImmutableDenseMatrix.prototype.reshape = function () {\n    throw new Error('Cannot invoke reshape on an Immutable Matrix instance');\n  };\n  /**\n   * Create a clone of the matrix\n   * @return {ImmutableDenseMatrix} clone\n   */\n\n\n  ImmutableDenseMatrix.prototype.clone = function () {\n    return new ImmutableDenseMatrix({\n      data: clone(this._data),\n      size: clone(this._size),\n      datatype: this._datatype\n    });\n  };\n  /**\n   * Get a JSON representation of the matrix\n   * @returns {Object}\n   */\n\n\n  ImmutableDenseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'ImmutableDenseMatrix',\n      data: this._data,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n  /**\n   * Generate a matrix from a JSON object\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"ImmutableDenseMatrix\", data: [], size: []}`,\n   *                       where mathjs is optional\n   * @returns {ImmutableDenseMatrix}\n   */\n\n\n  ImmutableDenseMatrix.fromJSON = function (json) {\n    return new ImmutableDenseMatrix(json);\n  };\n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @param {Number} i       Matrix row index 1\n   * @param {Number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n\n\n  ImmutableDenseMatrix.prototype.swapRows = function () {\n    throw new Error('Cannot invoke swapRows on an Immutable Matrix instance');\n  };\n  /**\n   * Calculate the minimum value in the set\n   * @return {Number | undefined} min\n   */\n\n\n  ImmutableDenseMatrix.prototype.min = function () {\n    // check min has been calculated before\n    if (this._min === null) {\n      // minimum\n      var m = null; // compute min\n\n      this.forEach(function (v) {\n        if (m === null || smaller(v, m)) {\n          m = v;\n        }\n      });\n      this._min = m !== null ? m : undefined;\n    }\n\n    return this._min;\n  };\n  /**\n   * Calculate the maximum value in the set\n   * @return {Number | undefined} max\n   */\n\n\n  ImmutableDenseMatrix.prototype.max = function () {\n    // check max has been calculated before\n    if (this._max === null) {\n      // maximum\n      var m = null; // compute max\n\n      this.forEach(function (v) {\n        if (m === null || smaller(m, v)) {\n          m = v;\n        }\n      });\n      this._max = m !== null ? m : undefined;\n    }\n\n    return this._max;\n  };\n\n  return ImmutableDenseMatrix;\n}, {\n  isClass: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}