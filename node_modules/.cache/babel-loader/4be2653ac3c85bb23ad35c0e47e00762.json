{"ast":null,"code":"import { isMatrix } from '../../utils/is.js';\nimport { isInteger } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'partitionSelect';\nvar dependencies = ['typed', 'isNumeric', 'isNaN', 'compare'];\nexport var createPartitionSelect = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      isNumeric = _ref.isNumeric,\n      isNaN = _ref.isNaN,\n      compare = _ref.compare;\n  var asc = compare;\n\n  var desc = function desc(a, b) {\n    return -compare(a, b);\n  };\n  /**\n   * Partition-based selection of an array or 1D matrix.\n   * Will find the kth smallest value, and mutates the input array.\n   * Uses Quickselect.\n   *\n   * Syntax:\n   *\n   *    math.partitionSelect(x, k)\n   *    math.partitionSelect(x, k, compare)\n   *\n   * Examples:\n   *\n   *    math.partitionSelect([5, 10, 1], 2)           // returns 10\n   *    math.partitionSelect(['C', 'B', 'A', 'D'], 1) // returns 'B'\n   *\n   *    function sortByLength (a, b) {\n   *      return a.length - b.length\n   *    }\n   *    math.partitionSelect(['Langdon', 'Tom', 'Sara'], 2, sortByLength) // returns 'Langdon'\n   *\n   * See also:\n   *\n   *    sort\n   *\n   * @param {Matrix | Array} x    A one dimensional matrix or array to sort\n   * @param {Number} k            The kth smallest value to be retrieved zero-based index\n   * @param {Function | 'asc' | 'desc'} [compare='asc']\n   *        An optional comparator function. The function is called as\n   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,\n   *        and 0 when a == b.\n   * @return {*} Returns the kth lowest value.\n   */\n\n\n  return typed(name, {\n    'Array | Matrix, number': function ArrayMatrixNumber(x, k) {\n      return _partitionSelect(x, k, asc);\n    },\n    'Array | Matrix, number, string': function ArrayMatrixNumberString(x, k, compare) {\n      if (compare === 'asc') {\n        return _partitionSelect(x, k, asc);\n      } else if (compare === 'desc') {\n        return _partitionSelect(x, k, desc);\n      } else {\n        throw new Error('Compare string must be \"asc\" or \"desc\"');\n      }\n    },\n    'Array | Matrix, number, function': _partitionSelect\n  });\n\n  function _partitionSelect(x, k, compare) {\n    if (!isInteger(k) || k < 0) {\n      throw new Error('k must be a non-negative integer');\n    }\n\n    if (isMatrix(x)) {\n      var size = x.size();\n\n      if (size.length > 1) {\n        throw new Error('Only one dimensional matrices supported');\n      }\n\n      return quickSelect(x.valueOf(), k, compare);\n    }\n\n    if (Array.isArray(x)) {\n      return quickSelect(x, k, compare);\n    }\n  }\n  /**\n   * Quickselect algorithm.\n   * Code adapted from:\n   * https://blog.teamleadnet.com/2012/07/quick-select-algorithm-find-kth-element.html\n   *\n   * @param {Array} arr\n   * @param {Number} k\n   * @param {Function} compare\n   * @private\n   */\n\n\n  function quickSelect(arr, k, compare) {\n    if (k >= arr.length) {\n      throw new Error('k out of bounds');\n    } // check for NaN values since these can cause an infinite while loop\n\n\n    for (var i = 0; i < arr.length; i++) {\n      if (isNumeric(arr[i]) && isNaN(arr[i])) {\n        return arr[i]; // return NaN\n      }\n    }\n\n    var from = 0;\n    var to = arr.length - 1; // if from == to we reached the kth element\n\n    while (from < to) {\n      var r = from;\n      var w = to;\n      var pivot = arr[Math.floor(Math.random() * (to - from + 1)) + from]; // stop if the reader and writer meets\n\n      while (r < w) {\n        // arr[r] >= pivot\n        if (compare(arr[r], pivot) >= 0) {\n          // put the large values at the end\n          var tmp = arr[w];\n          arr[w] = arr[r];\n          arr[r] = tmp;\n          --w;\n        } else {\n          // the value is smaller than the pivot, skip\n          ++r;\n        }\n      } // if we stepped up (r++) we need to step one down (arr[r] > pivot)\n\n\n      if (compare(arr[r], pivot) > 0) {\n        --r;\n      } // the r pointer is on the end of the first k elements\n\n\n      if (k <= r) {\n        to = r;\n      } else {\n        from = r + 1;\n      }\n    }\n\n    return arr[k];\n  }\n});","map":{"version":3,"names":["isMatrix","isInteger","factory","name","dependencies","createPartitionSelect","_ref","typed","isNumeric","isNaN","compare","asc","desc","a","b","ArrayMatrixNumber","x","k","_partitionSelect","ArrayMatrixNumberString","Error","size","length","quickSelect","valueOf","Array","isArray","arr","i","from","to","r","w","pivot","Math","floor","random","tmp"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/function/matrix/partitionSelect.js"],"sourcesContent":["import { isMatrix } from '../../utils/is.js';\nimport { isInteger } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'partitionSelect';\nvar dependencies = ['typed', 'isNumeric', 'isNaN', 'compare'];\nexport var createPartitionSelect = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    isNumeric,\n    isNaN,\n    compare\n  } = _ref;\n  var asc = compare;\n\n  var desc = (a, b) => -compare(a, b);\n  /**\n   * Partition-based selection of an array or 1D matrix.\n   * Will find the kth smallest value, and mutates the input array.\n   * Uses Quickselect.\n   *\n   * Syntax:\n   *\n   *    math.partitionSelect(x, k)\n   *    math.partitionSelect(x, k, compare)\n   *\n   * Examples:\n   *\n   *    math.partitionSelect([5, 10, 1], 2)           // returns 10\n   *    math.partitionSelect(['C', 'B', 'A', 'D'], 1) // returns 'B'\n   *\n   *    function sortByLength (a, b) {\n   *      return a.length - b.length\n   *    }\n   *    math.partitionSelect(['Langdon', 'Tom', 'Sara'], 2, sortByLength) // returns 'Langdon'\n   *\n   * See also:\n   *\n   *    sort\n   *\n   * @param {Matrix | Array} x    A one dimensional matrix or array to sort\n   * @param {Number} k            The kth smallest value to be retrieved zero-based index\n   * @param {Function | 'asc' | 'desc'} [compare='asc']\n   *        An optional comparator function. The function is called as\n   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,\n   *        and 0 when a == b.\n   * @return {*} Returns the kth lowest value.\n   */\n\n\n  return typed(name, {\n    'Array | Matrix, number': function ArrayMatrixNumber(x, k) {\n      return _partitionSelect(x, k, asc);\n    },\n    'Array | Matrix, number, string': function ArrayMatrixNumberString(x, k, compare) {\n      if (compare === 'asc') {\n        return _partitionSelect(x, k, asc);\n      } else if (compare === 'desc') {\n        return _partitionSelect(x, k, desc);\n      } else {\n        throw new Error('Compare string must be \"asc\" or \"desc\"');\n      }\n    },\n    'Array | Matrix, number, function': _partitionSelect\n  });\n\n  function _partitionSelect(x, k, compare) {\n    if (!isInteger(k) || k < 0) {\n      throw new Error('k must be a non-negative integer');\n    }\n\n    if (isMatrix(x)) {\n      var size = x.size();\n\n      if (size.length > 1) {\n        throw new Error('Only one dimensional matrices supported');\n      }\n\n      return quickSelect(x.valueOf(), k, compare);\n    }\n\n    if (Array.isArray(x)) {\n      return quickSelect(x, k, compare);\n    }\n  }\n  /**\n   * Quickselect algorithm.\n   * Code adapted from:\n   * https://blog.teamleadnet.com/2012/07/quick-select-algorithm-find-kth-element.html\n   *\n   * @param {Array} arr\n   * @param {Number} k\n   * @param {Function} compare\n   * @private\n   */\n\n\n  function quickSelect(arr, k, compare) {\n    if (k >= arr.length) {\n      throw new Error('k out of bounds');\n    } // check for NaN values since these can cause an infinite while loop\n\n\n    for (var i = 0; i < arr.length; i++) {\n      if (isNumeric(arr[i]) && isNaN(arr[i])) {\n        return arr[i]; // return NaN\n      }\n    }\n\n    var from = 0;\n    var to = arr.length - 1; // if from == to we reached the kth element\n\n    while (from < to) {\n      var r = from;\n      var w = to;\n      var pivot = arr[Math.floor(Math.random() * (to - from + 1)) + from]; // stop if the reader and writer meets\n\n      while (r < w) {\n        // arr[r] >= pivot\n        if (compare(arr[r], pivot) >= 0) {\n          // put the large values at the end\n          var tmp = arr[w];\n          arr[w] = arr[r];\n          arr[r] = tmp;\n          --w;\n        } else {\n          // the value is smaller than the pivot, skip\n          ++r;\n        }\n      } // if we stepped up (r++) we need to step one down (arr[r] > pivot)\n\n\n      if (compare(arr[r], pivot) > 0) {\n        --r;\n      } // the r pointer is on the end of the first k elements\n\n\n      if (k <= r) {\n        to = r;\n      } else {\n        from = r + 1;\n      }\n    }\n\n    return arr[k];\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}