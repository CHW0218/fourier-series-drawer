{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { isNumber } from '../../utils/is.js';\nvar name = 'stirlingS2';\nvar dependencies = ['typed', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'factorial', 'combinations', 'isNegative', 'isInteger', 'number', '?bignumber', 'larger'];\nexport var createStirlingS2 = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      addScalar = _ref.addScalar,\n      subtract = _ref.subtract,\n      multiplyScalar = _ref.multiplyScalar,\n      divideScalar = _ref.divideScalar,\n      pow = _ref.pow,\n      factorial = _ref.factorial,\n      combinations = _ref.combinations,\n      isNegative = _ref.isNegative,\n      isInteger = _ref.isInteger,\n      number = _ref.number,\n      bignumber = _ref.bignumber,\n      larger = _ref.larger;\n  var smallCache = [];\n  var bigCache = [];\n  /**\n   * The Stirling numbers of the second kind, counts the number of ways to partition\n   * a set of n labelled objects into k nonempty unlabelled subsets.\n   * stirlingS2 only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   *  If n = k or k = 1 <= n, then s(n,k) = 1\n   *  If k = 0 < n, then s(n,k) = 0\n   *\n   * Note that if either n or k is supplied as a BigNumber, the result will be\n   * as well.\n   *\n   * Syntax:\n   *\n   *   math.stirlingS2(n, k)\n   *\n   * Examples:\n   *\n   *    math.stirlingS2(5, 3) //returns 25\n   *\n   * See also:\n   *\n   *    bellNumbers\n   *\n   * @param {Number | BigNumber} n    Total number of objects in the set\n   * @param {Number | BigNumber} k    Number of objects in the subset\n   * @return {Number | BigNumber}     S(n,k)\n   */\n\n  return typed(name, {\n    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {\n      if (!isInteger(n) || isNegative(n) || !isInteger(k) || isNegative(k)) {\n        throw new TypeError('Non-negative integer value expected in function stirlingS2');\n      } else if (larger(k, n)) {\n        throw new TypeError('k must be less than or equal to n in function stirlingS2');\n      }\n\n      var big = !(isNumber(n) && isNumber(k));\n      var cache = big ? bigCache : smallCache;\n      var make = big ? bignumber : number;\n      var nn = number(n);\n      var nk = number(k);\n      /* See if we already have the value: */\n\n      if (cache[nn] && cache[nn].length > nk) {\n        return cache[nn][nk];\n      }\n      /* Fill the cache */\n\n\n      for (var m = 0; m <= nn; ++m) {\n        if (!cache[m]) {\n          cache[m] = [m === 0 ? make(1) : make(0)];\n        }\n\n        if (m === 0) continue;\n        var row = cache[m];\n        var prev = cache[m - 1];\n\n        for (var i = row.length; i <= m && i <= nk; ++i) {\n          if (i === m) {\n            row[i] = 1;\n          } else {\n            row[i] = addScalar(multiplyScalar(make(i), prev[i]), prev[i - 1]);\n          }\n        }\n      }\n\n      return cache[nn][nk];\n    }\n  });\n});","map":{"version":3,"names":["factory","isNumber","name","dependencies","createStirlingS2","_ref","typed","addScalar","subtract","multiplyScalar","divideScalar","pow","factorial","combinations","isNegative","isInteger","number","bignumber","larger","smallCache","bigCache","numberBigNumberNumberBigNumber","n","k","TypeError","big","cache","make","nn","nk","length","m","row","prev","i"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/function/combinatorics/stirlingS2.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { isNumber } from '../../utils/is.js';\nvar name = 'stirlingS2';\nvar dependencies = ['typed', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'factorial', 'combinations', 'isNegative', 'isInteger', 'number', '?bignumber', 'larger'];\nexport var createStirlingS2 = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    addScalar,\n    subtract,\n    multiplyScalar,\n    divideScalar,\n    pow,\n    factorial,\n    combinations,\n    isNegative,\n    isInteger,\n    number,\n    bignumber,\n    larger\n  } = _ref;\n  var smallCache = [];\n  var bigCache = [];\n  /**\n   * The Stirling numbers of the second kind, counts the number of ways to partition\n   * a set of n labelled objects into k nonempty unlabelled subsets.\n   * stirlingS2 only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   *  If n = k or k = 1 <= n, then s(n,k) = 1\n   *  If k = 0 < n, then s(n,k) = 0\n   *\n   * Note that if either n or k is supplied as a BigNumber, the result will be\n   * as well.\n   *\n   * Syntax:\n   *\n   *   math.stirlingS2(n, k)\n   *\n   * Examples:\n   *\n   *    math.stirlingS2(5, 3) //returns 25\n   *\n   * See also:\n   *\n   *    bellNumbers\n   *\n   * @param {Number | BigNumber} n    Total number of objects in the set\n   * @param {Number | BigNumber} k    Number of objects in the subset\n   * @return {Number | BigNumber}     S(n,k)\n   */\n\n  return typed(name, {\n    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {\n      if (!isInteger(n) || isNegative(n) || !isInteger(k) || isNegative(k)) {\n        throw new TypeError('Non-negative integer value expected in function stirlingS2');\n      } else if (larger(k, n)) {\n        throw new TypeError('k must be less than or equal to n in function stirlingS2');\n      }\n\n      var big = !(isNumber(n) && isNumber(k));\n      var cache = big ? bigCache : smallCache;\n      var make = big ? bignumber : number;\n      var nn = number(n);\n      var nk = number(k);\n      /* See if we already have the value: */\n\n      if (cache[nn] && cache[nn].length > nk) {\n        return cache[nn][nk];\n      }\n      /* Fill the cache */\n\n\n      for (var m = 0; m <= nn; ++m) {\n        if (!cache[m]) {\n          cache[m] = [m === 0 ? make(1) : make(0)];\n        }\n\n        if (m === 0) continue;\n        var row = cache[m];\n        var prev = cache[m - 1];\n\n        for (var i = row.length; i <= m && i <= nk; ++i) {\n          if (i === m) {\n            row[i] = 1;\n          } else {\n            row[i] = addScalar(multiplyScalar(make(i), prev[i]), prev[i - 1]);\n          }\n        }\n      }\n\n      return cache[nn][nk];\n    }\n  });\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}