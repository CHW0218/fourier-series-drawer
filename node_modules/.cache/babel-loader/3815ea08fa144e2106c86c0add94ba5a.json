{"ast":null,"code":"import { isInteger } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { createSimplifyConstant } from './simplify/simplifyConstant.js';\nvar name = 'rationalize';\nvar dependencies = ['config', 'typed', 'equal', 'isZero', 'add', 'subtract', 'multiply', 'divide', 'pow', 'parse', 'simplifyCore', 'simplify', '?bignumber', '?fraction', 'mathWithTransform', 'matrix', 'AccessorNode', 'ArrayNode', 'ConstantNode', 'FunctionNode', 'IndexNode', 'ObjectNode', 'OperatorNode', 'SymbolNode', 'ParenthesisNode'];\nexport var createRationalize = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var config = _ref.config,\n      typed = _ref.typed,\n      equal = _ref.equal,\n      isZero = _ref.isZero,\n      add = _ref.add,\n      subtract = _ref.subtract,\n      multiply = _ref.multiply,\n      divide = _ref.divide,\n      pow = _ref.pow,\n      parse = _ref.parse,\n      simplifyCore = _ref.simplifyCore,\n      simplify = _ref.simplify,\n      fraction = _ref.fraction,\n      bignumber = _ref.bignumber,\n      mathWithTransform = _ref.mathWithTransform,\n      matrix = _ref.matrix,\n      AccessorNode = _ref.AccessorNode,\n      ArrayNode = _ref.ArrayNode,\n      ConstantNode = _ref.ConstantNode,\n      FunctionNode = _ref.FunctionNode,\n      IndexNode = _ref.IndexNode,\n      ObjectNode = _ref.ObjectNode,\n      OperatorNode = _ref.OperatorNode,\n      SymbolNode = _ref.SymbolNode,\n      ParenthesisNode = _ref.ParenthesisNode;\n  var simplifyConstant = createSimplifyConstant({\n    typed: typed,\n    config: config,\n    mathWithTransform: mathWithTransform,\n    matrix: matrix,\n    fraction: fraction,\n    bignumber: bignumber,\n    AccessorNode: AccessorNode,\n    ArrayNode: ArrayNode,\n    ConstantNode: ConstantNode,\n    FunctionNode: FunctionNode,\n    IndexNode: IndexNode,\n    ObjectNode: ObjectNode,\n    OperatorNode: OperatorNode,\n    SymbolNode: SymbolNode\n  });\n  /**\n   * Transform a rationalizable expression in a rational fraction.\n   * If rational fraction is one variable polynomial then converts\n   * the numerator and denominator in canonical form, with decreasing\n   * exponents, returning the coefficients of numerator.\n   *\n   * Syntax:\n   *\n   *     rationalize(expr)\n   *     rationalize(expr, detailed)\n   *     rationalize(expr, scope)\n   *     rationalize(expr, scope, detailed)\n   *\n   * Examples:\n   *\n   *     math.rationalize('sin(x)+y')\n   *                   //  Error: There is an unsolved function call\n   *     math.rationalize('2x/y - y/(x+1)')\n   *                   // (2*x^2-y^2+2*x)/(x*y+y)\n   *     math.rationalize('(2x+1)^6')\n   *                   // 64*x^6+192*x^5+240*x^4+160*x^3+60*x^2+12*x+1\n   *     math.rationalize('2x/( (2x-1) / (3x+2) ) - 5x/ ( (3x+4) / (2x^2-5) ) + 3')\n   *                   // -20*x^4+28*x^3+104*x^2+6*x-12)/(6*x^2+5*x-4)\n   *     math.rationalize('x/(1-x)/(x-2)/(x-3)/(x-4) + 2x/ ( (1-2x)/(2-3x) )/ ((3-4x)/(4-5x) )') =\n   *                   // (-30*x^7+344*x^6-1506*x^5+3200*x^4-3472*x^3+1846*x^2-381*x)/\n   *                   //     (-8*x^6+90*x^5-383*x^4+780*x^3-797*x^2+390*x-72)\n   *\n   *     math.rationalize('x+x+x+y',{y:1}) // 3*x+1\n   *     math.rationalize('x+x+x+y',{})    // 3*x+y\n   *\n   *     const ret = math.rationalize('x+x+x+y',{},true)\n   *                   // ret.expression=3*x+y, ret.variables = [\"x\",\"y\"]\n   *     const ret = math.rationalize('-2+5x^2',{},true)\n   *                   // ret.expression=5*x^2-2, ret.variables = [\"x\"], ret.coefficients=[-2,0,5]\n   *\n   * See also:\n   *\n   *     simplify\n   *\n   * @param  {Node|string} expr    The expression to check if is a polynomial expression\n   * @param  {Object|boolean}      optional scope of expression or true for already evaluated rational expression at input\n   * @param  {Boolean}  detailed   optional True if return an object, false if return expression node (default)\n   *\n   * @return {Object | Node}    The rational polynomial of `expr` or an object\n   *            `{expression, numerator, denominator, variables, coefficients}`, where\n   *              `expression` is a `Node` with the node simplified expression,\n   *              `numerator` is a `Node` with the simplified numerator of expression,\n   *              `denominator` is a `Node` or `boolean` with the simplified denominator or `false` (if there is no denominator),\n   *              `variables` is an array with variable names,\n   *              and `coefficients` is an array with coefficients of numerator sorted by increased exponent\n   *           {Expression Node}  node simplified expression\n   *\n   */\n\n  return typed(name, {\n    string: function string(expr) {\n      return this(parse(expr), {}, false);\n    },\n    'string, boolean': function stringBoolean(expr, detailed) {\n      return this(parse(expr), {}, detailed);\n    },\n    'string, Object': function stringObject(expr, scope) {\n      return this(parse(expr), scope, false);\n    },\n    'string, Object, boolean': function stringObjectBoolean(expr, scope, detailed) {\n      return this(parse(expr), scope, detailed);\n    },\n    Node: function Node(expr) {\n      return this(expr, {}, false);\n    },\n    'Node, boolean': function NodeBoolean(expr, detailed) {\n      return this(expr, {}, detailed);\n    },\n    'Node, Object': function NodeObject(expr, scope) {\n      return this(expr, scope, false);\n    },\n    'Node, Object, boolean': function NodeObjectBoolean(expr, scope, detailed) {\n      var setRules = rulesRationalize(); // Rules for change polynomial in near canonical form\n\n      var polyRet = polynomial(expr, scope, true, setRules.firstRules); // Check if expression is a rationalizable polynomial\n\n      var nVars = polyRet.variables.length;\n      var noExactFractions = {\n        exactFractions: false\n      };\n      var withExactFractions = {\n        exactFractions: true\n      };\n      expr = polyRet.expression;\n\n      if (nVars >= 1) {\n        // If expression in not a constant\n        expr = expandPower(expr); // First expand power of polynomials (cannot be made from rules!)\n\n        var sBefore; // Previous expression\n\n        var rules;\n        var eDistrDiv = true;\n        var redoInic = false; // Apply the initial rules, including succ div rules:\n\n        expr = simplify(expr, setRules.firstRules, {}, noExactFractions);\n        var s;\n\n        while (true) {\n          // Alternate applying successive division rules and distr.div.rules\n          // until there are no more changes:\n          rules = eDistrDiv ? setRules.distrDivRules : setRules.sucDivRules;\n          expr = simplify(expr, rules, {}, withExactFractions);\n          eDistrDiv = !eDistrDiv; // Swap between Distr.Div and Succ. Div. Rules\n\n          s = expr.toString();\n\n          if (s === sBefore) {\n            break; // No changes : end of the loop\n          }\n\n          redoInic = true;\n          sBefore = s;\n        }\n\n        if (redoInic) {\n          // Apply first rules again without succ div rules (if there are changes)\n          expr = simplify(expr, setRules.firstRulesAgain, {}, noExactFractions);\n        } // Apply final rules:\n\n\n        expr = simplify(expr, setRules.finalRules, {}, noExactFractions);\n      } // NVars >= 1\n\n\n      var coefficients = [];\n      var retRationalize = {};\n\n      if (expr.type === 'OperatorNode' && expr.isBinary() && expr.op === '/') {\n        // Separate numerator from denominator\n        if (nVars === 1) {\n          expr.args[0] = polyToCanonical(expr.args[0], coefficients);\n          expr.args[1] = polyToCanonical(expr.args[1]);\n        }\n\n        if (detailed) {\n          retRationalize.numerator = expr.args[0];\n          retRationalize.denominator = expr.args[1];\n        }\n      } else {\n        if (nVars === 1) {\n          expr = polyToCanonical(expr, coefficients);\n        }\n\n        if (detailed) {\n          retRationalize.numerator = expr;\n          retRationalize.denominator = null;\n        }\n      } // nVars\n\n\n      if (!detailed) return expr;\n      retRationalize.coefficients = coefficients;\n      retRationalize.variables = polyRet.variables;\n      retRationalize.expression = expr;\n      return retRationalize;\n    } // ^^^^^^^ end of rationalize ^^^^^^^^\n\n  }); // end of typed rationalize\n\n  /**\n   *  Function to simplify an expression using an optional scope and\n   *  return it if the expression is a polynomial expression, i.e.\n   *  an expression with one or more variables and the operators\n   *  +, -, *, and ^, where the exponent can only be a positive integer.\n   *\n   * Syntax:\n   *\n   *     polynomial(expr,scope,extended, rules)\n   *\n   * @param  {Node | string} expr     The expression to simplify and check if is polynomial expression\n   * @param  {object} scope           Optional scope for expression simplification\n   * @param  {boolean} extended       Optional. Default is false. When true allows divide operator.\n   * @param  {array}  rules           Optional. Default is no rule.\n   *\n   *\n   * @return {Object}\n   *            {Object} node:   node simplified expression\n   *            {Array}  variables:  variable names\n   */\n\n  function polynomial(expr, scope, extended, rules) {\n    var variables = [];\n    var node = simplify(expr, rules, scope, {\n      exactFractions: false\n    }); // Resolves any variables and functions with all defined parameters\n\n    extended = !!extended;\n    var oper = '+-*' + (extended ? '/' : '');\n    recPoly(node);\n    var retFunc = {};\n    retFunc.expression = node;\n    retFunc.variables = variables;\n    return retFunc; // -------------------------------------------------------------------------------------------------------\n\n    /**\n     *  Function to simplify an expression using an optional scope and\n     *  return it if the expression is a polynomial expression, i.e.\n     *  an expression with one or more variables and the operators\n     *  +, -, *, and ^, where the exponent can only be a positive integer.\n     *\n     * Syntax:\n     *\n     *     recPoly(node)\n     *\n     *\n     * @param  {Node} node               The current sub tree expression in recursion\n     *\n     * @return                           nothing, throw an exception if error\n     */\n\n    function recPoly(node) {\n      var tp = node.type; // node type\n\n      if (tp === 'FunctionNode') {\n        // No function call in polynomial expression\n        throw new Error('There is an unsolved function call');\n      } else if (tp === 'OperatorNode') {\n        if (node.op === '^') {\n          // TODO: handle negative exponents like in '1/x^(-2)'\n          if (node.args[1].type !== 'ConstantNode' || !isInteger(parseFloat(node.args[1].value))) {\n            throw new Error('There is a non-integer exponent');\n          } else {\n            recPoly(node.args[0]);\n          }\n        } else {\n          if (oper.indexOf(node.op) === -1) {\n            throw new Error('Operator ' + node.op + ' invalid in polynomial expression');\n          }\n\n          for (var i = 0; i < node.args.length; i++) {\n            recPoly(node.args[i]);\n          }\n        } // type of operator\n\n      } else if (tp === 'SymbolNode') {\n        var _name = node.name; // variable name\n\n        var pos = variables.indexOf(_name);\n\n        if (pos === -1) {\n          // new variable in expression\n          variables.push(_name);\n        }\n      } else if (tp === 'ParenthesisNode') {\n        recPoly(node.content);\n      } else if (tp !== 'ConstantNode') {\n        throw new Error('type ' + tp + ' is not allowed in polynomial expression');\n      }\n    } // end of recPoly\n\n  } // end of polynomial\n  // ---------------------------------------------------------------------------------------\n\n  /**\n   * Return a rule set to rationalize an polynomial expression in rationalize\n   *\n   * Syntax:\n   *\n   *     rulesRationalize()\n   *\n   * @return {array}        rule set to rationalize an polynomial expression\n   */\n\n\n  function rulesRationalize() {\n    var oldRules = [simplifyCore, // sCore\n    {\n      l: 'n+n',\n      r: '2*n'\n    }, {\n      l: 'n+-n',\n      r: '0'\n    }, simplifyConstant, // sConstant\n    {\n      l: 'n*(n1^-1)',\n      r: 'n/n1'\n    }, {\n      l: 'n*n1^-n2',\n      r: 'n/n1^n2'\n    }, {\n      l: 'n1^-1',\n      r: '1/n1'\n    }, {\n      l: 'n*(n1/n2)',\n      r: '(n*n1)/n2'\n    }, {\n      l: '1*n',\n      r: 'n'\n    }];\n    var rulesFirst = [{\n      l: '(-n1)/(-n2)',\n      r: 'n1/n2'\n    }, // Unary division\n    {\n      l: '(-n1)*(-n2)',\n      r: 'n1*n2'\n    }, // Unary multiplication\n    {\n      l: 'n1--n2',\n      r: 'n1+n2'\n    }, // '--' elimination\n    {\n      l: 'n1-n2',\n      r: 'n1+(-n2)'\n    }, // Subtraction turn into add with un�ry minus\n    {\n      l: '(n1+n2)*n3',\n      r: '(n1*n3 + n2*n3)'\n    }, // Distributive 1\n    {\n      l: 'n1*(n2+n3)',\n      r: '(n1*n2+n1*n3)'\n    }, // Distributive 2\n    {\n      l: 'c1*n + c2*n',\n      r: '(c1+c2)*n'\n    }, // Joining constants\n    {\n      l: 'c1*n + n',\n      r: '(c1+1)*n'\n    }, // Joining constants\n    {\n      l: 'c1*n - c2*n',\n      r: '(c1-c2)*n'\n    }, // Joining constants\n    {\n      l: 'c1*n - n',\n      r: '(c1-1)*n'\n    }, // Joining constants\n    {\n      l: 'v/c',\n      r: '(1/c)*v'\n    }, // variable/constant (new!)\n    {\n      l: 'v/-c',\n      r: '-(1/c)*v'\n    }, // variable/constant (new!)\n    {\n      l: '-v*-c',\n      r: 'c*v'\n    }, // Inversion constant and variable 1\n    {\n      l: '-v*c',\n      r: '-c*v'\n    }, // Inversion constant and variable 2\n    {\n      l: 'v*-c',\n      r: '-c*v'\n    }, // Inversion constant and variable 3\n    {\n      l: 'v*c',\n      r: 'c*v'\n    }, // Inversion constant and variable 4\n    {\n      l: '-(-n1*n2)',\n      r: '(n1*n2)'\n    }, // Unary propagation\n    {\n      l: '-(n1*n2)',\n      r: '(-n1*n2)'\n    }, // Unary propagation\n    {\n      l: '-(-n1+n2)',\n      r: '(n1-n2)'\n    }, // Unary propagation\n    {\n      l: '-(n1+n2)',\n      r: '(-n1-n2)'\n    }, // Unary propagation\n    {\n      l: '(n1^n2)^n3',\n      r: '(n1^(n2*n3))'\n    }, // Power to Power\n    {\n      l: '-(-n1/n2)',\n      r: '(n1/n2)'\n    }, // Division and Unary\n    {\n      l: '-(n1/n2)',\n      r: '(-n1/n2)'\n    }]; // Divisao and Unary\n\n    var rulesDistrDiv = [{\n      l: '(n1/n2 + n3/n4)',\n      r: '((n1*n4 + n3*n2)/(n2*n4))'\n    }, // Sum of fractions\n    {\n      l: '(n1/n2 + n3)',\n      r: '((n1 + n3*n2)/n2)'\n    }, // Sum fraction with number 1\n    {\n      l: '(n1 + n2/n3)',\n      r: '((n1*n3 + n2)/n3)'\n    }]; // Sum fraction with number 1\n\n    var rulesSucDiv = [{\n      l: '(n1/(n2/n3))',\n      r: '((n1*n3)/n2)'\n    }, // Division simplification\n    {\n      l: '(n1/n2/n3)',\n      r: '(n1/(n2*n3))'\n    }];\n    var setRules = {}; // rules set in 4 steps.\n    // All rules => infinite loop\n    // setRules.allRules =oldRules.concat(rulesFirst,rulesDistrDiv,rulesSucDiv)\n\n    setRules.firstRules = oldRules.concat(rulesFirst, rulesSucDiv); // First rule set\n\n    setRules.distrDivRules = rulesDistrDiv; // Just distr. div. rules\n\n    setRules.sucDivRules = rulesSucDiv; // Jus succ. div. rules\n\n    setRules.firstRulesAgain = oldRules.concat(rulesFirst); // Last rules set without succ. div.\n    // Division simplification\n    // Second rule set.\n    // There is no aggregate expression with parentesis, but the only variable can be scattered.\n\n    setRules.finalRules = [simplifyCore, // simplify.rules[0]\n    {\n      l: 'n*-n',\n      r: '-n^2'\n    }, // Joining multiply with power 1\n    {\n      l: 'n*n',\n      r: 'n^2'\n    }, // Joining multiply with power 2\n    simplifyConstant, // simplify.rules[14] old 3rd index in oldRules\n    {\n      l: 'n*-n^n1',\n      r: '-n^(n1+1)'\n    }, // Joining multiply with power 3\n    {\n      l: 'n*n^n1',\n      r: 'n^(n1+1)'\n    }, // Joining multiply with power 4\n    {\n      l: 'n^n1*-n^n2',\n      r: '-n^(n1+n2)'\n    }, // Joining multiply with power 5\n    {\n      l: 'n^n1*n^n2',\n      r: 'n^(n1+n2)'\n    }, // Joining multiply with power 6\n    {\n      l: 'n^n1*-n',\n      r: '-n^(n1+1)'\n    }, // Joining multiply with power 7\n    {\n      l: 'n^n1*n',\n      r: 'n^(n1+1)'\n    }, // Joining multiply with power 8\n    {\n      l: 'n^n1/-n',\n      r: '-n^(n1-1)'\n    }, // Joining multiply with power 8\n    {\n      l: 'n^n1/n',\n      r: 'n^(n1-1)'\n    }, // Joining division with power 1\n    {\n      l: 'n/-n^n1',\n      r: '-n^(1-n1)'\n    }, // Joining division with power 2\n    {\n      l: 'n/n^n1',\n      r: 'n^(1-n1)'\n    }, // Joining division with power 3\n    {\n      l: 'n^n1/-n^n2',\n      r: 'n^(n1-n2)'\n    }, // Joining division with power 4\n    {\n      l: 'n^n1/n^n2',\n      r: 'n^(n1-n2)'\n    }, // Joining division with power 5\n    {\n      l: 'n1+(-n2*n3)',\n      r: 'n1-n2*n3'\n    }, // Solving useless parenthesis 1\n    {\n      l: 'v*(-c)',\n      r: '-c*v'\n    }, // Solving useless unary 2\n    {\n      l: 'n1+-n2',\n      r: 'n1-n2'\n    }, // Solving +- together (new!)\n    {\n      l: 'v*c',\n      r: 'c*v'\n    }, // inversion constant with variable\n    {\n      l: '(n1^n2)^n3',\n      r: '(n1^(n2*n3))'\n    } // Power to Power\n    ];\n    return setRules;\n  } // End rulesRationalize\n  // ---------------------------------------------------------------------------------------\n\n  /**\n   *  Expand recursively a tree node for handling with expressions with exponents\n   *  (it's not for constants, symbols or functions with exponents)\n   *  PS: The other parameters are internal for recursion\n   *\n   * Syntax:\n   *\n   *     expandPower(node)\n   *\n   * @param  {Node} node         Current expression node\n   * @param  {node} parent       Parent current node inside the recursion\n   * @param  (int}               Parent number of chid inside the rercursion\n   *\n   * @return {node}        node expression with all powers expanded.\n   */\n\n\n  function expandPower(node, parent, indParent) {\n    var tp = node.type;\n    var internal = arguments.length > 1; // TRUE in internal calls\n\n    if (tp === 'OperatorNode' && node.isBinary()) {\n      var does = false;\n      var val;\n\n      if (node.op === '^') {\n        // First operator: Parenthesis or UnaryMinus\n        if ((node.args[0].type === 'ParenthesisNode' || node.args[0].type === 'OperatorNode') && node.args[1].type === 'ConstantNode') {\n          // Second operator: Constant\n          val = parseFloat(node.args[1].value);\n          does = val >= 2 && isInteger(val);\n        }\n      }\n\n      if (does) {\n        // Exponent >= 2\n        // Before:\n        //            operator A --> Subtree\n        // parent pow\n        //            constant\n        //\n        if (val > 2) {\n          // Exponent > 2,\n          // AFTER:  (exponent > 2)\n          //             operator A --> Subtree\n          // parent  *\n          //                 deep clone (operator A --> Subtree\n          //             pow\n          //                 constant - 1\n          //\n          var nEsqTopo = node.args[0];\n          var nDirTopo = new OperatorNode('^', 'pow', [node.args[0].cloneDeep(), new ConstantNode(val - 1)]);\n          node = new OperatorNode('*', 'multiply', [nEsqTopo, nDirTopo]);\n        } else {\n          // Expo = 2 - no power\n          // AFTER:  (exponent =  2)\n          //             operator A --> Subtree\n          // parent   oper\n          //            deep clone (operator A --> Subtree)\n          //\n          node = new OperatorNode('*', 'multiply', [node.args[0], node.args[0].cloneDeep()]);\n        }\n\n        if (internal) {\n          // Change parent references in internal recursive calls\n          if (indParent === 'content') {\n            parent.content = node;\n          } else {\n            parent.args[indParent] = node;\n          }\n        }\n      } // does\n\n    } // binary OperatorNode\n\n\n    if (tp === 'ParenthesisNode') {\n      // Recursion\n      expandPower(node.content, node, 'content');\n    } else if (tp !== 'ConstantNode' && tp !== 'SymbolNode') {\n      for (var i = 0; i < node.args.length; i++) {\n        expandPower(node.args[i], node, i);\n      }\n    }\n\n    if (!internal) {\n      // return the root node\n      return node;\n    }\n  } // End expandPower\n  // ---------------------------------------------------------------------------------------\n\n  /**\n   * Auxilary function for rationalize\n   * Convert near canonical polynomial in one variable in a canonical polynomial\n   * with one term for each exponent in decreasing order\n   *\n   * Syntax:\n   *\n   *     polyToCanonical(node [, coefficients])\n   *\n   * @param  {Node | string} expr       The near canonical polynomial expression to convert in a a canonical polynomial expression\n   *\n   *        The string or tree expression needs to be at below syntax, with free spaces:\n   *         (  (^(-)? | [+-]? )cte (*)? var (^expo)?  | cte )+\n   *       Where 'var' is one variable with any valid name\n   *             'cte' are real numeric constants with any value. It can be omitted if equal than 1\n   *             'expo' are integers greater than 0. It can be omitted if equal than 1.\n   *\n   * @param  {array}   coefficients             Optional returns coefficients sorted by increased exponent\n   *\n   *\n   * @return {node}        new node tree with one variable polynomial or string error.\n   */\n\n\n  function polyToCanonical(node, coefficients) {\n    if (coefficients === undefined) {\n      coefficients = [];\n    } // coefficients.\n\n\n    coefficients[0] = 0; // index is the exponent\n\n    var o = {};\n    o.cte = 1;\n    o.oper = '+'; // fire: mark with * or ^ when finds * or ^ down tree, reset to \"\" with + and -.\n    //       It is used to deduce the exponent: 1 for *, 0 for \"\".\n\n    o.fire = '';\n    var maxExpo = 0; // maximum exponent\n\n    var varname = ''; // variable name\n\n    recurPol(node, null, o);\n    maxExpo = coefficients.length - 1;\n    var first = true;\n    var no;\n\n    for (var i = maxExpo; i >= 0; i--) {\n      if (coefficients[i] === 0) continue;\n      var n1 = new ConstantNode(first ? coefficients[i] : Math.abs(coefficients[i]));\n      var op = coefficients[i] < 0 ? '-' : '+';\n\n      if (i > 0) {\n        // Is not a constant without variable\n        var n2 = new SymbolNode(varname);\n\n        if (i > 1) {\n          var n3 = new ConstantNode(i);\n          n2 = new OperatorNode('^', 'pow', [n2, n3]);\n        }\n\n        if (coefficients[i] === -1 && first) {\n          n1 = new OperatorNode('-', 'unaryMinus', [n2]);\n        } else if (Math.abs(coefficients[i]) === 1) {\n          n1 = n2;\n        } else {\n          n1 = new OperatorNode('*', 'multiply', [n1, n2]);\n        }\n      }\n\n      if (first) {\n        no = n1;\n      } else if (op === '+') {\n        no = new OperatorNode('+', 'add', [no, n1]);\n      } else {\n        no = new OperatorNode('-', 'subtract', [no, n1]);\n      }\n\n      first = false;\n    } // for\n\n\n    if (first) {\n      return new ConstantNode(0);\n    } else {\n      return no;\n    }\n    /**\n     * Recursive auxilary function inside polyToCanonical for\n     * converting expression in canonical form\n     *\n     * Syntax:\n     *\n     *     recurPol(node, noPai, obj)\n     *\n     * @param  {Node} node        The current subpolynomial expression\n     * @param  {Node | Null}  noPai   The current parent node\n     * @param  {object}    obj        Object with many internal flags\n     *\n     * @return {}                    No return. If error, throws an exception\n     */\n\n\n    function recurPol(node, noPai, o) {\n      var tp = node.type;\n\n      if (tp === 'FunctionNode') {\n        // ***** FunctionName *****\n        // No function call in polynomial expression\n        throw new Error('There is an unsolved function call');\n      } else if (tp === 'OperatorNode') {\n        // ***** OperatorName *****\n        if ('+-*^'.indexOf(node.op) === -1) throw new Error('Operator ' + node.op + ' invalid');\n\n        if (noPai !== null) {\n          // -(unary),^  : children of *,+,-\n          if ((node.fn === 'unaryMinus' || node.fn === 'pow') && noPai.fn !== 'add' && noPai.fn !== 'subtract' && noPai.fn !== 'multiply') {\n            throw new Error('Invalid ' + node.op + ' placing');\n          } // -,+,* : children of +,-\n\n\n          if ((node.fn === 'subtract' || node.fn === 'add' || node.fn === 'multiply') && noPai.fn !== 'add' && noPai.fn !== 'subtract') {\n            throw new Error('Invalid ' + node.op + ' placing');\n          } // -,+ : first child\n\n\n          if ((node.fn === 'subtract' || node.fn === 'add' || node.fn === 'unaryMinus') && o.noFil !== 0) {\n            throw new Error('Invalid ' + node.op + ' placing');\n          }\n        } // Has parent\n        // Firers: ^,*       Old:   ^,&,-(unary): firers\n\n\n        if (node.op === '^' || node.op === '*') {\n          o.fire = node.op;\n        }\n\n        for (var _i = 0; _i < node.args.length; _i++) {\n          // +,-: reset fire\n          if (node.fn === 'unaryMinus') o.oper = '-';\n\n          if (node.op === '+' || node.fn === 'subtract') {\n            o.fire = '';\n            o.cte = 1; // default if there is no constant\n\n            o.oper = _i === 0 ? '+' : node.op;\n          }\n\n          o.noFil = _i; // number of son\n\n          recurPol(node.args[_i], node, o);\n        } // for in children\n\n      } else if (tp === 'SymbolNode') {\n        // ***** SymbolName *****\n        if (node.name !== varname && varname !== '') {\n          throw new Error('There is more than one variable');\n        }\n\n        varname = node.name;\n\n        if (noPai === null) {\n          coefficients[1] = 1;\n          return;\n        } // ^: Symbol is First child\n\n\n        if (noPai.op === '^' && o.noFil !== 0) {\n          throw new Error('In power the variable should be the first parameter');\n        } // *: Symbol is Second child\n\n\n        if (noPai.op === '*' && o.noFil !== 1) {\n          throw new Error('In multiply the variable should be the second parameter');\n        } // Symbol: firers '',* => it means there is no exponent above, so it's 1 (cte * var)\n\n\n        if (o.fire === '' || o.fire === '*') {\n          if (maxExpo < 1) coefficients[1] = 0;\n          coefficients[1] += o.cte * (o.oper === '+' ? 1 : -1);\n          maxExpo = Math.max(1, maxExpo);\n        }\n      } else if (tp === 'ConstantNode') {\n        var valor = parseFloat(node.value);\n\n        if (noPai === null) {\n          coefficients[0] = valor;\n          return;\n        }\n\n        if (noPai.op === '^') {\n          // cte: second  child of power\n          if (o.noFil !== 1) throw new Error('Constant cannot be powered');\n\n          if (!isInteger(valor) || valor <= 0) {\n            throw new Error('Non-integer exponent is not allowed');\n          }\n\n          for (var _i2 = maxExpo + 1; _i2 < valor; _i2++) {\n            coefficients[_i2] = 0;\n          }\n\n          if (valor > maxExpo) coefficients[valor] = 0;\n          coefficients[valor] += o.cte * (o.oper === '+' ? 1 : -1);\n          maxExpo = Math.max(valor, maxExpo);\n          return;\n        }\n\n        o.cte = valor; // Cte: firer '' => There is no exponent and no multiplication, so the exponent is 0.\n\n        if (o.fire === '') {\n          coefficients[0] += o.cte * (o.oper === '+' ? 1 : -1);\n        }\n      } else {\n        throw new Error('Type ' + tp + ' is not allowed');\n      }\n    } // End of recurPol\n\n  } // End of polyToCanonical\n\n});","map":{"version":3,"names":["isInteger","factory","createSimplifyConstant","name","dependencies","createRationalize","_ref","config","typed","equal","isZero","add","subtract","multiply","divide","pow","parse","simplifyCore","simplify","fraction","bignumber","mathWithTransform","matrix","AccessorNode","ArrayNode","ConstantNode","FunctionNode","IndexNode","ObjectNode","OperatorNode","SymbolNode","ParenthesisNode","simplifyConstant","string","expr","stringBoolean","detailed","stringObject","scope","stringObjectBoolean","Node","NodeBoolean","NodeObject","NodeObjectBoolean","setRules","rulesRationalize","polyRet","polynomial","firstRules","nVars","variables","length","noExactFractions","exactFractions","withExactFractions","expression","expandPower","sBefore","rules","eDistrDiv","redoInic","s","distrDivRules","sucDivRules","toString","firstRulesAgain","finalRules","coefficients","retRationalize","type","isBinary","op","args","polyToCanonical","numerator","denominator","extended","node","oper","recPoly","retFunc","tp","Error","parseFloat","value","indexOf","i","_name","pos","push","content","oldRules","l","r","rulesFirst","rulesDistrDiv","rulesSucDiv","concat","parent","indParent","internal","arguments","does","val","nEsqTopo","nDirTopo","cloneDeep","undefined","o","cte","fire","maxExpo","varname","recurPol","first","no","n1","Math","abs","n2","n3","noPai","fn","noFil","_i","max","valor","_i2"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/function/algebra/rationalize.js"],"sourcesContent":["import { isInteger } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { createSimplifyConstant } from './simplify/simplifyConstant.js';\nvar name = 'rationalize';\nvar dependencies = ['config', 'typed', 'equal', 'isZero', 'add', 'subtract', 'multiply', 'divide', 'pow', 'parse', 'simplifyCore', 'simplify', '?bignumber', '?fraction', 'mathWithTransform', 'matrix', 'AccessorNode', 'ArrayNode', 'ConstantNode', 'FunctionNode', 'IndexNode', 'ObjectNode', 'OperatorNode', 'SymbolNode', 'ParenthesisNode'];\nexport var createRationalize = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    config,\n    typed,\n    equal,\n    isZero,\n    add,\n    subtract,\n    multiply,\n    divide,\n    pow,\n    parse,\n    simplifyCore,\n    simplify,\n    fraction,\n    bignumber,\n    mathWithTransform,\n    matrix,\n    AccessorNode,\n    ArrayNode,\n    ConstantNode,\n    FunctionNode,\n    IndexNode,\n    ObjectNode,\n    OperatorNode,\n    SymbolNode,\n    ParenthesisNode\n  } = _ref;\n  var simplifyConstant = createSimplifyConstant({\n    typed,\n    config,\n    mathWithTransform,\n    matrix,\n    fraction,\n    bignumber,\n    AccessorNode,\n    ArrayNode,\n    ConstantNode,\n    FunctionNode,\n    IndexNode,\n    ObjectNode,\n    OperatorNode,\n    SymbolNode\n  });\n  /**\n   * Transform a rationalizable expression in a rational fraction.\n   * If rational fraction is one variable polynomial then converts\n   * the numerator and denominator in canonical form, with decreasing\n   * exponents, returning the coefficients of numerator.\n   *\n   * Syntax:\n   *\n   *     rationalize(expr)\n   *     rationalize(expr, detailed)\n   *     rationalize(expr, scope)\n   *     rationalize(expr, scope, detailed)\n   *\n   * Examples:\n   *\n   *     math.rationalize('sin(x)+y')\n   *                   //  Error: There is an unsolved function call\n   *     math.rationalize('2x/y - y/(x+1)')\n   *                   // (2*x^2-y^2+2*x)/(x*y+y)\n   *     math.rationalize('(2x+1)^6')\n   *                   // 64*x^6+192*x^5+240*x^4+160*x^3+60*x^2+12*x+1\n   *     math.rationalize('2x/( (2x-1) / (3x+2) ) - 5x/ ( (3x+4) / (2x^2-5) ) + 3')\n   *                   // -20*x^4+28*x^3+104*x^2+6*x-12)/(6*x^2+5*x-4)\n   *     math.rationalize('x/(1-x)/(x-2)/(x-3)/(x-4) + 2x/ ( (1-2x)/(2-3x) )/ ((3-4x)/(4-5x) )') =\n   *                   // (-30*x^7+344*x^6-1506*x^5+3200*x^4-3472*x^3+1846*x^2-381*x)/\n   *                   //     (-8*x^6+90*x^5-383*x^4+780*x^3-797*x^2+390*x-72)\n   *\n   *     math.rationalize('x+x+x+y',{y:1}) // 3*x+1\n   *     math.rationalize('x+x+x+y',{})    // 3*x+y\n   *\n   *     const ret = math.rationalize('x+x+x+y',{},true)\n   *                   // ret.expression=3*x+y, ret.variables = [\"x\",\"y\"]\n   *     const ret = math.rationalize('-2+5x^2',{},true)\n   *                   // ret.expression=5*x^2-2, ret.variables = [\"x\"], ret.coefficients=[-2,0,5]\n   *\n   * See also:\n   *\n   *     simplify\n   *\n   * @param  {Node|string} expr    The expression to check if is a polynomial expression\n   * @param  {Object|boolean}      optional scope of expression or true for already evaluated rational expression at input\n   * @param  {Boolean}  detailed   optional True if return an object, false if return expression node (default)\n   *\n   * @return {Object | Node}    The rational polynomial of `expr` or an object\n   *            `{expression, numerator, denominator, variables, coefficients}`, where\n   *              `expression` is a `Node` with the node simplified expression,\n   *              `numerator` is a `Node` with the simplified numerator of expression,\n   *              `denominator` is a `Node` or `boolean` with the simplified denominator or `false` (if there is no denominator),\n   *              `variables` is an array with variable names,\n   *              and `coefficients` is an array with coefficients of numerator sorted by increased exponent\n   *           {Expression Node}  node simplified expression\n   *\n   */\n\n  return typed(name, {\n    string: function string(expr) {\n      return this(parse(expr), {}, false);\n    },\n    'string, boolean': function stringBoolean(expr, detailed) {\n      return this(parse(expr), {}, detailed);\n    },\n    'string, Object': function stringObject(expr, scope) {\n      return this(parse(expr), scope, false);\n    },\n    'string, Object, boolean': function stringObjectBoolean(expr, scope, detailed) {\n      return this(parse(expr), scope, detailed);\n    },\n    Node: function Node(expr) {\n      return this(expr, {}, false);\n    },\n    'Node, boolean': function NodeBoolean(expr, detailed) {\n      return this(expr, {}, detailed);\n    },\n    'Node, Object': function NodeObject(expr, scope) {\n      return this(expr, scope, false);\n    },\n    'Node, Object, boolean': function NodeObjectBoolean(expr, scope, detailed) {\n      var setRules = rulesRationalize(); // Rules for change polynomial in near canonical form\n\n      var polyRet = polynomial(expr, scope, true, setRules.firstRules); // Check if expression is a rationalizable polynomial\n\n      var nVars = polyRet.variables.length;\n      var noExactFractions = {\n        exactFractions: false\n      };\n      var withExactFractions = {\n        exactFractions: true\n      };\n      expr = polyRet.expression;\n\n      if (nVars >= 1) {\n        // If expression in not a constant\n        expr = expandPower(expr); // First expand power of polynomials (cannot be made from rules!)\n\n        var sBefore; // Previous expression\n\n        var rules;\n        var eDistrDiv = true;\n        var redoInic = false; // Apply the initial rules, including succ div rules:\n\n        expr = simplify(expr, setRules.firstRules, {}, noExactFractions);\n        var s;\n\n        while (true) {\n          // Alternate applying successive division rules and distr.div.rules\n          // until there are no more changes:\n          rules = eDistrDiv ? setRules.distrDivRules : setRules.sucDivRules;\n          expr = simplify(expr, rules, {}, withExactFractions);\n          eDistrDiv = !eDistrDiv; // Swap between Distr.Div and Succ. Div. Rules\n\n          s = expr.toString();\n\n          if (s === sBefore) {\n            break; // No changes : end of the loop\n          }\n\n          redoInic = true;\n          sBefore = s;\n        }\n\n        if (redoInic) {\n          // Apply first rules again without succ div rules (if there are changes)\n          expr = simplify(expr, setRules.firstRulesAgain, {}, noExactFractions);\n        } // Apply final rules:\n\n\n        expr = simplify(expr, setRules.finalRules, {}, noExactFractions);\n      } // NVars >= 1\n\n\n      var coefficients = [];\n      var retRationalize = {};\n\n      if (expr.type === 'OperatorNode' && expr.isBinary() && expr.op === '/') {\n        // Separate numerator from denominator\n        if (nVars === 1) {\n          expr.args[0] = polyToCanonical(expr.args[0], coefficients);\n          expr.args[1] = polyToCanonical(expr.args[1]);\n        }\n\n        if (detailed) {\n          retRationalize.numerator = expr.args[0];\n          retRationalize.denominator = expr.args[1];\n        }\n      } else {\n        if (nVars === 1) {\n          expr = polyToCanonical(expr, coefficients);\n        }\n\n        if (detailed) {\n          retRationalize.numerator = expr;\n          retRationalize.denominator = null;\n        }\n      } // nVars\n\n\n      if (!detailed) return expr;\n      retRationalize.coefficients = coefficients;\n      retRationalize.variables = polyRet.variables;\n      retRationalize.expression = expr;\n      return retRationalize;\n    } // ^^^^^^^ end of rationalize ^^^^^^^^\n\n  }); // end of typed rationalize\n\n  /**\n   *  Function to simplify an expression using an optional scope and\n   *  return it if the expression is a polynomial expression, i.e.\n   *  an expression with one or more variables and the operators\n   *  +, -, *, and ^, where the exponent can only be a positive integer.\n   *\n   * Syntax:\n   *\n   *     polynomial(expr,scope,extended, rules)\n   *\n   * @param  {Node | string} expr     The expression to simplify and check if is polynomial expression\n   * @param  {object} scope           Optional scope for expression simplification\n   * @param  {boolean} extended       Optional. Default is false. When true allows divide operator.\n   * @param  {array}  rules           Optional. Default is no rule.\n   *\n   *\n   * @return {Object}\n   *            {Object} node:   node simplified expression\n   *            {Array}  variables:  variable names\n   */\n\n  function polynomial(expr, scope, extended, rules) {\n    var variables = [];\n    var node = simplify(expr, rules, scope, {\n      exactFractions: false\n    }); // Resolves any variables and functions with all defined parameters\n\n    extended = !!extended;\n    var oper = '+-*' + (extended ? '/' : '');\n    recPoly(node);\n    var retFunc = {};\n    retFunc.expression = node;\n    retFunc.variables = variables;\n    return retFunc; // -------------------------------------------------------------------------------------------------------\n\n    /**\n     *  Function to simplify an expression using an optional scope and\n     *  return it if the expression is a polynomial expression, i.e.\n     *  an expression with one or more variables and the operators\n     *  +, -, *, and ^, where the exponent can only be a positive integer.\n     *\n     * Syntax:\n     *\n     *     recPoly(node)\n     *\n     *\n     * @param  {Node} node               The current sub tree expression in recursion\n     *\n     * @return                           nothing, throw an exception if error\n     */\n\n    function recPoly(node) {\n      var tp = node.type; // node type\n\n      if (tp === 'FunctionNode') {\n        // No function call in polynomial expression\n        throw new Error('There is an unsolved function call');\n      } else if (tp === 'OperatorNode') {\n        if (node.op === '^') {\n          // TODO: handle negative exponents like in '1/x^(-2)'\n          if (node.args[1].type !== 'ConstantNode' || !isInteger(parseFloat(node.args[1].value))) {\n            throw new Error('There is a non-integer exponent');\n          } else {\n            recPoly(node.args[0]);\n          }\n        } else {\n          if (oper.indexOf(node.op) === -1) {\n            throw new Error('Operator ' + node.op + ' invalid in polynomial expression');\n          }\n\n          for (var i = 0; i < node.args.length; i++) {\n            recPoly(node.args[i]);\n          }\n        } // type of operator\n\n      } else if (tp === 'SymbolNode') {\n        var _name = node.name; // variable name\n\n        var pos = variables.indexOf(_name);\n\n        if (pos === -1) {\n          // new variable in expression\n          variables.push(_name);\n        }\n      } else if (tp === 'ParenthesisNode') {\n        recPoly(node.content);\n      } else if (tp !== 'ConstantNode') {\n        throw new Error('type ' + tp + ' is not allowed in polynomial expression');\n      }\n    } // end of recPoly\n\n  } // end of polynomial\n  // ---------------------------------------------------------------------------------------\n\n  /**\n   * Return a rule set to rationalize an polynomial expression in rationalize\n   *\n   * Syntax:\n   *\n   *     rulesRationalize()\n   *\n   * @return {array}        rule set to rationalize an polynomial expression\n   */\n\n\n  function rulesRationalize() {\n    var oldRules = [simplifyCore, // sCore\n    {\n      l: 'n+n',\n      r: '2*n'\n    }, {\n      l: 'n+-n',\n      r: '0'\n    }, simplifyConstant, // sConstant\n    {\n      l: 'n*(n1^-1)',\n      r: 'n/n1'\n    }, {\n      l: 'n*n1^-n2',\n      r: 'n/n1^n2'\n    }, {\n      l: 'n1^-1',\n      r: '1/n1'\n    }, {\n      l: 'n*(n1/n2)',\n      r: '(n*n1)/n2'\n    }, {\n      l: '1*n',\n      r: 'n'\n    }];\n    var rulesFirst = [{\n      l: '(-n1)/(-n2)',\n      r: 'n1/n2'\n    }, // Unary division\n    {\n      l: '(-n1)*(-n2)',\n      r: 'n1*n2'\n    }, // Unary multiplication\n    {\n      l: 'n1--n2',\n      r: 'n1+n2'\n    }, // '--' elimination\n    {\n      l: 'n1-n2',\n      r: 'n1+(-n2)'\n    }, // Subtraction turn into add with un�ry minus\n    {\n      l: '(n1+n2)*n3',\n      r: '(n1*n3 + n2*n3)'\n    }, // Distributive 1\n    {\n      l: 'n1*(n2+n3)',\n      r: '(n1*n2+n1*n3)'\n    }, // Distributive 2\n    {\n      l: 'c1*n + c2*n',\n      r: '(c1+c2)*n'\n    }, // Joining constants\n    {\n      l: 'c1*n + n',\n      r: '(c1+1)*n'\n    }, // Joining constants\n    {\n      l: 'c1*n - c2*n',\n      r: '(c1-c2)*n'\n    }, // Joining constants\n    {\n      l: 'c1*n - n',\n      r: '(c1-1)*n'\n    }, // Joining constants\n    {\n      l: 'v/c',\n      r: '(1/c)*v'\n    }, // variable/constant (new!)\n    {\n      l: 'v/-c',\n      r: '-(1/c)*v'\n    }, // variable/constant (new!)\n    {\n      l: '-v*-c',\n      r: 'c*v'\n    }, // Inversion constant and variable 1\n    {\n      l: '-v*c',\n      r: '-c*v'\n    }, // Inversion constant and variable 2\n    {\n      l: 'v*-c',\n      r: '-c*v'\n    }, // Inversion constant and variable 3\n    {\n      l: 'v*c',\n      r: 'c*v'\n    }, // Inversion constant and variable 4\n    {\n      l: '-(-n1*n2)',\n      r: '(n1*n2)'\n    }, // Unary propagation\n    {\n      l: '-(n1*n2)',\n      r: '(-n1*n2)'\n    }, // Unary propagation\n    {\n      l: '-(-n1+n2)',\n      r: '(n1-n2)'\n    }, // Unary propagation\n    {\n      l: '-(n1+n2)',\n      r: '(-n1-n2)'\n    }, // Unary propagation\n    {\n      l: '(n1^n2)^n3',\n      r: '(n1^(n2*n3))'\n    }, // Power to Power\n    {\n      l: '-(-n1/n2)',\n      r: '(n1/n2)'\n    }, // Division and Unary\n    {\n      l: '-(n1/n2)',\n      r: '(-n1/n2)'\n    }]; // Divisao and Unary\n\n    var rulesDistrDiv = [{\n      l: '(n1/n2 + n3/n4)',\n      r: '((n1*n4 + n3*n2)/(n2*n4))'\n    }, // Sum of fractions\n    {\n      l: '(n1/n2 + n3)',\n      r: '((n1 + n3*n2)/n2)'\n    }, // Sum fraction with number 1\n    {\n      l: '(n1 + n2/n3)',\n      r: '((n1*n3 + n2)/n3)'\n    }]; // Sum fraction with number 1\n\n    var rulesSucDiv = [{\n      l: '(n1/(n2/n3))',\n      r: '((n1*n3)/n2)'\n    }, // Division simplification\n    {\n      l: '(n1/n2/n3)',\n      r: '(n1/(n2*n3))'\n    }];\n    var setRules = {}; // rules set in 4 steps.\n    // All rules => infinite loop\n    // setRules.allRules =oldRules.concat(rulesFirst,rulesDistrDiv,rulesSucDiv)\n\n    setRules.firstRules = oldRules.concat(rulesFirst, rulesSucDiv); // First rule set\n\n    setRules.distrDivRules = rulesDistrDiv; // Just distr. div. rules\n\n    setRules.sucDivRules = rulesSucDiv; // Jus succ. div. rules\n\n    setRules.firstRulesAgain = oldRules.concat(rulesFirst); // Last rules set without succ. div.\n    // Division simplification\n    // Second rule set.\n    // There is no aggregate expression with parentesis, but the only variable can be scattered.\n\n    setRules.finalRules = [simplifyCore, // simplify.rules[0]\n    {\n      l: 'n*-n',\n      r: '-n^2'\n    }, // Joining multiply with power 1\n    {\n      l: 'n*n',\n      r: 'n^2'\n    }, // Joining multiply with power 2\n    simplifyConstant, // simplify.rules[14] old 3rd index in oldRules\n    {\n      l: 'n*-n^n1',\n      r: '-n^(n1+1)'\n    }, // Joining multiply with power 3\n    {\n      l: 'n*n^n1',\n      r: 'n^(n1+1)'\n    }, // Joining multiply with power 4\n    {\n      l: 'n^n1*-n^n2',\n      r: '-n^(n1+n2)'\n    }, // Joining multiply with power 5\n    {\n      l: 'n^n1*n^n2',\n      r: 'n^(n1+n2)'\n    }, // Joining multiply with power 6\n    {\n      l: 'n^n1*-n',\n      r: '-n^(n1+1)'\n    }, // Joining multiply with power 7\n    {\n      l: 'n^n1*n',\n      r: 'n^(n1+1)'\n    }, // Joining multiply with power 8\n    {\n      l: 'n^n1/-n',\n      r: '-n^(n1-1)'\n    }, // Joining multiply with power 8\n    {\n      l: 'n^n1/n',\n      r: 'n^(n1-1)'\n    }, // Joining division with power 1\n    {\n      l: 'n/-n^n1',\n      r: '-n^(1-n1)'\n    }, // Joining division with power 2\n    {\n      l: 'n/n^n1',\n      r: 'n^(1-n1)'\n    }, // Joining division with power 3\n    {\n      l: 'n^n1/-n^n2',\n      r: 'n^(n1-n2)'\n    }, // Joining division with power 4\n    {\n      l: 'n^n1/n^n2',\n      r: 'n^(n1-n2)'\n    }, // Joining division with power 5\n    {\n      l: 'n1+(-n2*n3)',\n      r: 'n1-n2*n3'\n    }, // Solving useless parenthesis 1\n    {\n      l: 'v*(-c)',\n      r: '-c*v'\n    }, // Solving useless unary 2\n    {\n      l: 'n1+-n2',\n      r: 'n1-n2'\n    }, // Solving +- together (new!)\n    {\n      l: 'v*c',\n      r: 'c*v'\n    }, // inversion constant with variable\n    {\n      l: '(n1^n2)^n3',\n      r: '(n1^(n2*n3))'\n    } // Power to Power\n    ];\n    return setRules;\n  } // End rulesRationalize\n  // ---------------------------------------------------------------------------------------\n\n  /**\n   *  Expand recursively a tree node for handling with expressions with exponents\n   *  (it's not for constants, symbols or functions with exponents)\n   *  PS: The other parameters are internal for recursion\n   *\n   * Syntax:\n   *\n   *     expandPower(node)\n   *\n   * @param  {Node} node         Current expression node\n   * @param  {node} parent       Parent current node inside the recursion\n   * @param  (int}               Parent number of chid inside the rercursion\n   *\n   * @return {node}        node expression with all powers expanded.\n   */\n\n\n  function expandPower(node, parent, indParent) {\n    var tp = node.type;\n    var internal = arguments.length > 1; // TRUE in internal calls\n\n    if (tp === 'OperatorNode' && node.isBinary()) {\n      var does = false;\n      var val;\n\n      if (node.op === '^') {\n        // First operator: Parenthesis or UnaryMinus\n        if ((node.args[0].type === 'ParenthesisNode' || node.args[0].type === 'OperatorNode') && node.args[1].type === 'ConstantNode') {\n          // Second operator: Constant\n          val = parseFloat(node.args[1].value);\n          does = val >= 2 && isInteger(val);\n        }\n      }\n\n      if (does) {\n        // Exponent >= 2\n        // Before:\n        //            operator A --> Subtree\n        // parent pow\n        //            constant\n        //\n        if (val > 2) {\n          // Exponent > 2,\n          // AFTER:  (exponent > 2)\n          //             operator A --> Subtree\n          // parent  *\n          //                 deep clone (operator A --> Subtree\n          //             pow\n          //                 constant - 1\n          //\n          var nEsqTopo = node.args[0];\n          var nDirTopo = new OperatorNode('^', 'pow', [node.args[0].cloneDeep(), new ConstantNode(val - 1)]);\n          node = new OperatorNode('*', 'multiply', [nEsqTopo, nDirTopo]);\n        } else {\n          // Expo = 2 - no power\n          // AFTER:  (exponent =  2)\n          //             operator A --> Subtree\n          // parent   oper\n          //            deep clone (operator A --> Subtree)\n          //\n          node = new OperatorNode('*', 'multiply', [node.args[0], node.args[0].cloneDeep()]);\n        }\n\n        if (internal) {\n          // Change parent references in internal recursive calls\n          if (indParent === 'content') {\n            parent.content = node;\n          } else {\n            parent.args[indParent] = node;\n          }\n        }\n      } // does\n\n    } // binary OperatorNode\n\n\n    if (tp === 'ParenthesisNode') {\n      // Recursion\n      expandPower(node.content, node, 'content');\n    } else if (tp !== 'ConstantNode' && tp !== 'SymbolNode') {\n      for (var i = 0; i < node.args.length; i++) {\n        expandPower(node.args[i], node, i);\n      }\n    }\n\n    if (!internal) {\n      // return the root node\n      return node;\n    }\n  } // End expandPower\n  // ---------------------------------------------------------------------------------------\n\n  /**\n   * Auxilary function for rationalize\n   * Convert near canonical polynomial in one variable in a canonical polynomial\n   * with one term for each exponent in decreasing order\n   *\n   * Syntax:\n   *\n   *     polyToCanonical(node [, coefficients])\n   *\n   * @param  {Node | string} expr       The near canonical polynomial expression to convert in a a canonical polynomial expression\n   *\n   *        The string or tree expression needs to be at below syntax, with free spaces:\n   *         (  (^(-)? | [+-]? )cte (*)? var (^expo)?  | cte )+\n   *       Where 'var' is one variable with any valid name\n   *             'cte' are real numeric constants with any value. It can be omitted if equal than 1\n   *             'expo' are integers greater than 0. It can be omitted if equal than 1.\n   *\n   * @param  {array}   coefficients             Optional returns coefficients sorted by increased exponent\n   *\n   *\n   * @return {node}        new node tree with one variable polynomial or string error.\n   */\n\n\n  function polyToCanonical(node, coefficients) {\n    if (coefficients === undefined) {\n      coefficients = [];\n    } // coefficients.\n\n\n    coefficients[0] = 0; // index is the exponent\n\n    var o = {};\n    o.cte = 1;\n    o.oper = '+'; // fire: mark with * or ^ when finds * or ^ down tree, reset to \"\" with + and -.\n    //       It is used to deduce the exponent: 1 for *, 0 for \"\".\n\n    o.fire = '';\n    var maxExpo = 0; // maximum exponent\n\n    var varname = ''; // variable name\n\n    recurPol(node, null, o);\n    maxExpo = coefficients.length - 1;\n    var first = true;\n    var no;\n\n    for (var i = maxExpo; i >= 0; i--) {\n      if (coefficients[i] === 0) continue;\n      var n1 = new ConstantNode(first ? coefficients[i] : Math.abs(coefficients[i]));\n      var op = coefficients[i] < 0 ? '-' : '+';\n\n      if (i > 0) {\n        // Is not a constant without variable\n        var n2 = new SymbolNode(varname);\n\n        if (i > 1) {\n          var n3 = new ConstantNode(i);\n          n2 = new OperatorNode('^', 'pow', [n2, n3]);\n        }\n\n        if (coefficients[i] === -1 && first) {\n          n1 = new OperatorNode('-', 'unaryMinus', [n2]);\n        } else if (Math.abs(coefficients[i]) === 1) {\n          n1 = n2;\n        } else {\n          n1 = new OperatorNode('*', 'multiply', [n1, n2]);\n        }\n      }\n\n      if (first) {\n        no = n1;\n      } else if (op === '+') {\n        no = new OperatorNode('+', 'add', [no, n1]);\n      } else {\n        no = new OperatorNode('-', 'subtract', [no, n1]);\n      }\n\n      first = false;\n    } // for\n\n\n    if (first) {\n      return new ConstantNode(0);\n    } else {\n      return no;\n    }\n    /**\n     * Recursive auxilary function inside polyToCanonical for\n     * converting expression in canonical form\n     *\n     * Syntax:\n     *\n     *     recurPol(node, noPai, obj)\n     *\n     * @param  {Node} node        The current subpolynomial expression\n     * @param  {Node | Null}  noPai   The current parent node\n     * @param  {object}    obj        Object with many internal flags\n     *\n     * @return {}                    No return. If error, throws an exception\n     */\n\n\n    function recurPol(node, noPai, o) {\n      var tp = node.type;\n\n      if (tp === 'FunctionNode') {\n        // ***** FunctionName *****\n        // No function call in polynomial expression\n        throw new Error('There is an unsolved function call');\n      } else if (tp === 'OperatorNode') {\n        // ***** OperatorName *****\n        if ('+-*^'.indexOf(node.op) === -1) throw new Error('Operator ' + node.op + ' invalid');\n\n        if (noPai !== null) {\n          // -(unary),^  : children of *,+,-\n          if ((node.fn === 'unaryMinus' || node.fn === 'pow') && noPai.fn !== 'add' && noPai.fn !== 'subtract' && noPai.fn !== 'multiply') {\n            throw new Error('Invalid ' + node.op + ' placing');\n          } // -,+,* : children of +,-\n\n\n          if ((node.fn === 'subtract' || node.fn === 'add' || node.fn === 'multiply') && noPai.fn !== 'add' && noPai.fn !== 'subtract') {\n            throw new Error('Invalid ' + node.op + ' placing');\n          } // -,+ : first child\n\n\n          if ((node.fn === 'subtract' || node.fn === 'add' || node.fn === 'unaryMinus') && o.noFil !== 0) {\n            throw new Error('Invalid ' + node.op + ' placing');\n          }\n        } // Has parent\n        // Firers: ^,*       Old:   ^,&,-(unary): firers\n\n\n        if (node.op === '^' || node.op === '*') {\n          o.fire = node.op;\n        }\n\n        for (var _i = 0; _i < node.args.length; _i++) {\n          // +,-: reset fire\n          if (node.fn === 'unaryMinus') o.oper = '-';\n\n          if (node.op === '+' || node.fn === 'subtract') {\n            o.fire = '';\n            o.cte = 1; // default if there is no constant\n\n            o.oper = _i === 0 ? '+' : node.op;\n          }\n\n          o.noFil = _i; // number of son\n\n          recurPol(node.args[_i], node, o);\n        } // for in children\n\n      } else if (tp === 'SymbolNode') {\n        // ***** SymbolName *****\n        if (node.name !== varname && varname !== '') {\n          throw new Error('There is more than one variable');\n        }\n\n        varname = node.name;\n\n        if (noPai === null) {\n          coefficients[1] = 1;\n          return;\n        } // ^: Symbol is First child\n\n\n        if (noPai.op === '^' && o.noFil !== 0) {\n          throw new Error('In power the variable should be the first parameter');\n        } // *: Symbol is Second child\n\n\n        if (noPai.op === '*' && o.noFil !== 1) {\n          throw new Error('In multiply the variable should be the second parameter');\n        } // Symbol: firers '',* => it means there is no exponent above, so it's 1 (cte * var)\n\n\n        if (o.fire === '' || o.fire === '*') {\n          if (maxExpo < 1) coefficients[1] = 0;\n          coefficients[1] += o.cte * (o.oper === '+' ? 1 : -1);\n          maxExpo = Math.max(1, maxExpo);\n        }\n      } else if (tp === 'ConstantNode') {\n        var valor = parseFloat(node.value);\n\n        if (noPai === null) {\n          coefficients[0] = valor;\n          return;\n        }\n\n        if (noPai.op === '^') {\n          // cte: second  child of power\n          if (o.noFil !== 1) throw new Error('Constant cannot be powered');\n\n          if (!isInteger(valor) || valor <= 0) {\n            throw new Error('Non-integer exponent is not allowed');\n          }\n\n          for (var _i2 = maxExpo + 1; _i2 < valor; _i2++) {\n            coefficients[_i2] = 0;\n          }\n\n          if (valor > maxExpo) coefficients[valor] = 0;\n          coefficients[valor] += o.cte * (o.oper === '+' ? 1 : -1);\n          maxExpo = Math.max(valor, maxExpo);\n          return;\n        }\n\n        o.cte = valor; // Cte: firer '' => There is no exponent and no multiplication, so the exponent is 0.\n\n        if (o.fire === '') {\n          coefficients[0] += o.cte * (o.oper === '+' ? 1 : -1);\n        }\n      } else {\n        throw new Error('Type ' + tp + ' is not allowed');\n      }\n    } // End of recurPol\n\n  } // End of polyToCanonical\n\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}