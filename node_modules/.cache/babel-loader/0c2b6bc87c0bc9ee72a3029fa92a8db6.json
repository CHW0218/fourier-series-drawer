{"ast":null,"code":"// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.\n//\n// This fast non-cryptographic random number generator is designed for\n// use in Monte-Carlo algorithms. It combines a long-period xorshift\n// generator with a Weyl generator, and it passes all common batteries\n// of stasticial tests for randomness while consuming only a few nanoseconds\n// for each prng generated.  For background on the generator, see Brent's\n// paper: \"Some long-period random number generators using shifts and xors.\"\n// http://arxiv.org/pdf/1004.3115v1.pdf\n//\n// Usage:\n//\n// var xor4096 = require('xor4096');\n// random = xor4096(1);                        // Seed with int32 or string.\n// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.\n// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.\n//\n// For nonzero numeric keys, this impelementation provides a sequence\n// identical to that by Brent's xorgens 3 implementaion in C.  This\n// implementation also provides for initalizing the generator with\n// string seeds, or for saving and restoring the state of the generator.\n//\n// On Chrome, this prng benchmarks about 2.1 times slower than\n// Javascript's built-in Math.random().\n(function (global, module, define) {\n  function XorGen(seed) {\n    var me = this; // Set up generator function.\n\n    me.next = function () {\n      var w = me.w,\n          X = me.X,\n          i = me.i,\n          t,\n          v; // Update Weyl generator.\n\n      me.w = w = w + 0x61c88647 | 0; // Update xor generator.\n\n      v = X[i + 34 & 127];\n      t = X[i = i + 1 & 127];\n      v ^= v << 13;\n      t ^= t << 17;\n      v ^= v >>> 15;\n      t ^= t >>> 12; // Update Xor generator array state.\n\n      v = X[i] = v ^ t;\n      me.i = i; // Result is the combination.\n\n      return v + (w ^ w >>> 16) | 0;\n    };\n\n    function init(me, seed) {\n      var t,\n          v,\n          i,\n          j,\n          w,\n          X = [],\n          limit = 128;\n\n      if (seed === (seed | 0)) {\n        // Numeric seeds initialize v, which is used to generates X.\n        v = seed;\n        seed = null;\n      } else {\n        // String seeds are mixed into v and X one character at a time.\n        seed = seed + '\\0';\n        v = 0;\n        limit = Math.max(limit, seed.length);\n      } // Initialize circular array and weyl value.\n\n\n      for (i = 0, j = -32; j < limit; ++j) {\n        // Put the unicode characters into the array, and shuffle them.\n        if (seed) v ^= seed.charCodeAt((j + 32) % seed.length); // After 32 shuffles, take v as the starting w value.\n\n        if (j === 0) w = v;\n        v ^= v << 10;\n        v ^= v >>> 15;\n        v ^= v << 4;\n        v ^= v >>> 13;\n\n        if (j >= 0) {\n          w = w + 0x61c88647 | 0; // Weyl.\n\n          t = X[j & 127] ^= v + w; // Combine xor and weyl to init array.\n\n          i = 0 == t ? i + 1 : 0; // Count zeroes.\n        }\n      } // We have detected all zeroes; make the key nonzero.\n\n\n      if (i >= 128) {\n        X[(seed && seed.length || 0) & 127] = -1;\n      } // Run the generator 512 times to further mix the state before using it.\n      // Factoring this as a function slows the main generator, so it is just\n      // unrolled here.  The weyl generator is not advanced while warming up.\n\n\n      i = 127;\n\n      for (j = 4 * 128; j > 0; --j) {\n        v = X[i + 34 & 127];\n        t = X[i = i + 1 & 127];\n        v ^= v << 13;\n        t ^= t << 17;\n        v ^= v >>> 15;\n        t ^= t >>> 12;\n        X[i] = v ^ t;\n      } // Storing state as object members is faster than using closure variables.\n\n\n      me.w = w;\n      me.X = X;\n      me.i = i;\n    }\n\n    init(me, seed);\n  }\n\n  function copy(f, t) {\n    t.i = f.i;\n    t.w = f.w;\n    t.X = f.X.slice();\n    return t;\n  }\n\n  ;\n\n  function impl(seed, opts) {\n    if (seed == null) seed = +new Date();\n\n    var xg = new XorGen(seed),\n        state = opts && opts.state,\n        prng = function prng() {\n      return (xg.next() >>> 0) / 0x100000000;\n    };\n\n    prng.double = function () {\n      do {\n        var top = xg.next() >>> 11,\n            bot = (xg.next() >>> 0) / 0x100000000,\n            result = (top + bot) / (1 << 21);\n      } while (result === 0);\n\n      return result;\n    };\n\n    prng.int32 = xg.next;\n    prng.quick = prng;\n\n    if (state) {\n      if (state.X) copy(state, xg);\n\n      prng.state = function () {\n        return copy(xg, {});\n      };\n    }\n\n    return prng;\n  }\n\n  if (module && module.exports) {\n    module.exports = impl;\n  } else if (define && define.amd) {\n    define(function () {\n      return impl;\n    });\n  } else {\n    this.xor4096 = impl;\n  }\n})(this, // window object or global\ntypeof module == 'object' && module, // present in node.js\ntypeof define == 'function' && define // present with an AMD loader\n);","map":{"version":3,"names":["global","module","define","XorGen","seed","me","next","w","X","i","t","v","init","j","limit","Math","max","length","charCodeAt","copy","f","slice","impl","opts","Date","xg","state","prng","double","top","bot","result","int32","quick","exports","amd","xor4096"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/seedrandom/lib/xor4096.js"],"sourcesContent":["// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.\n//\n// This fast non-cryptographic random number generator is designed for\n// use in Monte-Carlo algorithms. It combines a long-period xorshift\n// generator with a Weyl generator, and it passes all common batteries\n// of stasticial tests for randomness while consuming only a few nanoseconds\n// for each prng generated.  For background on the generator, see Brent's\n// paper: \"Some long-period random number generators using shifts and xors.\"\n// http://arxiv.org/pdf/1004.3115v1.pdf\n//\n// Usage:\n//\n// var xor4096 = require('xor4096');\n// random = xor4096(1);                        // Seed with int32 or string.\n// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.\n// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.\n//\n// For nonzero numeric keys, this impelementation provides a sequence\n// identical to that by Brent's xorgens 3 implementaion in C.  This\n// implementation also provides for initalizing the generator with\n// string seeds, or for saving and restoring the state of the generator.\n//\n// On Chrome, this prng benchmarks about 2.1 times slower than\n// Javascript's built-in Math.random().\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    var w = me.w,\n        X = me.X, i = me.i, t, v;\n    // Update Weyl generator.\n    me.w = w = (w + 0x61c88647) | 0;\n    // Update xor generator.\n    v = X[(i + 34) & 127];\n    t = X[i = ((i + 1) & 127)];\n    v ^= v << 13;\n    t ^= t << 17;\n    v ^= v >>> 15;\n    t ^= t >>> 12;\n    // Update Xor generator array state.\n    v = X[i] = v ^ t;\n    me.i = i;\n    // Result is the combination.\n    return (v + (w ^ (w >>> 16))) | 0;\n  };\n\n  function init(me, seed) {\n    var t, v, i, j, w, X = [], limit = 128;\n    if (seed === (seed | 0)) {\n      // Numeric seeds initialize v, which is used to generates X.\n      v = seed;\n      seed = null;\n    } else {\n      // String seeds are mixed into v and X one character at a time.\n      seed = seed + '\\0';\n      v = 0;\n      limit = Math.max(limit, seed.length);\n    }\n    // Initialize circular array and weyl value.\n    for (i = 0, j = -32; j < limit; ++j) {\n      // Put the unicode characters into the array, and shuffle them.\n      if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);\n      // After 32 shuffles, take v as the starting w value.\n      if (j === 0) w = v;\n      v ^= v << 10;\n      v ^= v >>> 15;\n      v ^= v << 4;\n      v ^= v >>> 13;\n      if (j >= 0) {\n        w = (w + 0x61c88647) | 0;     // Weyl.\n        t = (X[j & 127] ^= (v + w));  // Combine xor and weyl to init array.\n        i = (0 == t) ? i + 1 : 0;     // Count zeroes.\n      }\n    }\n    // We have detected all zeroes; make the key nonzero.\n    if (i >= 128) {\n      X[(seed && seed.length || 0) & 127] = -1;\n    }\n    // Run the generator 512 times to further mix the state before using it.\n    // Factoring this as a function slows the main generator, so it is just\n    // unrolled here.  The weyl generator is not advanced while warming up.\n    i = 127;\n    for (j = 4 * 128; j > 0; --j) {\n      v = X[(i + 34) & 127];\n      t = X[i = ((i + 1) & 127)];\n      v ^= v << 13;\n      t ^= t << 17;\n      v ^= v >>> 15;\n      t ^= t >>> 12;\n      X[i] = v ^ t;\n    }\n    // Storing state as object members is faster than using closure variables.\n    me.w = w;\n    me.X = X;\n    me.i = i;\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.i = f.i;\n  t.w = f.w;\n  t.X = f.X.slice();\n  return t;\n};\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.X) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor4096 = impl;\n}\n\n})(\n  this,                                     // window object or global\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}