{"ast":null,"code":"import _toConsumableArray from \"/Users/ayao/vscode/fourier-series-drawer/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { factory } from '../../../utils/factory.js';\nimport { createSolveValidation } from './utils/solveValidation.js';\nvar name = 'usolveAll';\nvar dependencies = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtract', 'equalScalar', 'DenseMatrix'];\nexport var createUsolveAll = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      divideScalar = _ref.divideScalar,\n      multiplyScalar = _ref.multiplyScalar,\n      subtract = _ref.subtract,\n      equalScalar = _ref.equalScalar,\n      DenseMatrix = _ref.DenseMatrix;\n  var solveValidation = createSolveValidation({\n    DenseMatrix: DenseMatrix\n  });\n  /**\n   * Finds all solutions of a linear equation system by backward substitution. Matrix must be an upper triangular matrix.\n   *\n   * `U * x = b`\n   *\n   * Syntax:\n   *\n   *    math.usolveAll(U, b)\n   *\n   * Examples:\n   *\n   *    const a = [[-2, 3], [2, 1]]\n   *    const b = [11, 9]\n   *    const x = usolveAll(a, b)  // [ [[8], [9]] ]\n   *\n   * See also:\n   *\n   *    usolve, lup, slu, usolve, lusolve\n   *\n   * @param {Matrix, Array} U       A N x N matrix or array (U)\n   * @param {Matrix, Array} b       A column vector with the b values\n   *\n   * @return {DenseMatrix[] | Array[]}  An array of affine-independent column vectors (x) that solve the linear system\n   */\n\n  return typed(name, {\n    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {\n      return _sparseBackwardSubstitution(m, b);\n    },\n    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {\n      return _denseBackwardSubstitution(m, b);\n    },\n    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {\n      var m = matrix(a);\n\n      var R = _denseBackwardSubstitution(m, b);\n\n      return R.map(function (r) {\n        return r.valueOf();\n      });\n    }\n  });\n\n  function _denseBackwardSubstitution(m, b_) {\n    // the algorithm is derived from\n    // https://www.overleaf.com/read/csvgqdxggyjv\n    // array of right-hand sides\n    var B = [solveValidation(m, b_, true)._data.map(function (e) {\n      return e[0];\n    })];\n    var M = m._data;\n    var rows = m._size[0];\n    var columns = m._size[1]; // loop columns backwards\n\n    for (var i = columns - 1; i >= 0; i--) {\n      var L = B.length; // loop right-hand sides\n\n      for (var k = 0; k < L; k++) {\n        var b = B[k];\n\n        if (!equalScalar(M[i][i], 0)) {\n          // non-singular row\n          b[i] = divideScalar(b[i], M[i][i]);\n\n          for (var j = i - 1; j >= 0; j--) {\n            // b[j] -= b[i] * M[j,i]\n            b[j] = subtract(b[j], multiplyScalar(b[i], M[j][i]));\n          }\n        } else if (!equalScalar(b[i], 0)) {\n          // singular row, nonzero RHS\n          if (k === 0) {\n            // There is no valid solution\n            return [];\n          } else {\n            // This RHS is invalid but other solutions may still exist\n            B.splice(k, 1);\n            k -= 1;\n            L -= 1;\n          }\n        } else if (k === 0) {\n          // singular row, RHS is zero\n          var bNew = _toConsumableArray(b);\n\n          bNew[i] = 1;\n\n          for (var _j = i - 1; _j >= 0; _j--) {\n            bNew[_j] = subtract(bNew[_j], M[_j][i]);\n          }\n\n          B.push(bNew);\n        }\n      }\n    }\n\n    return B.map(function (x) {\n      return new DenseMatrix({\n        data: x.map(function (e) {\n          return [e];\n        }),\n        size: [rows, 1]\n      });\n    });\n  }\n\n  function _sparseBackwardSubstitution(m, b_) {\n    // array of right-hand sides\n    var B = [solveValidation(m, b_, true)._data.map(function (e) {\n      return e[0];\n    })];\n    var rows = m._size[0];\n    var columns = m._size[1];\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr; // loop columns backwards\n\n    for (var i = columns - 1; i >= 0; i--) {\n      var L = B.length; // loop right-hand sides\n\n      for (var k = 0; k < L; k++) {\n        var b = B[k]; // values & indices (column i)\n\n        var iValues = [];\n        var iIndices = []; // first & last indeces in column\n\n        var firstIndex = ptr[i];\n        var lastIndex = ptr[i + 1]; // find the value at [i, i]\n\n        var Mii = 0;\n\n        for (var j = lastIndex - 1; j >= firstIndex; j--) {\n          var J = index[j]; // check row\n\n          if (J === i) {\n            Mii = values[j];\n          } else if (J < i) {\n            // store upper triangular\n            iValues.push(values[j]);\n            iIndices.push(J);\n          }\n        }\n\n        if (!equalScalar(Mii, 0)) {\n          // non-singular row\n          b[i] = divideScalar(b[i], Mii); // loop upper triangular\n\n          for (var _j2 = 0, _lastIndex = iIndices.length; _j2 < _lastIndex; _j2++) {\n            var _J = iIndices[_j2];\n            b[_J] = subtract(b[_J], multiplyScalar(b[i], iValues[_j2]));\n          }\n        } else if (!equalScalar(b[i], 0)) {\n          // singular row, nonzero RHS\n          if (k === 0) {\n            // There is no valid solution\n            return [];\n          } else {\n            // This RHS is invalid but other solutions may still exist\n            B.splice(k, 1);\n            k -= 1;\n            L -= 1;\n          }\n        } else if (k === 0) {\n          // singular row, RHS is zero\n          var bNew = _toConsumableArray(b);\n\n          bNew[i] = 1; // loop upper triangular\n\n          for (var _j3 = 0, _lastIndex2 = iIndices.length; _j3 < _lastIndex2; _j3++) {\n            var _J2 = iIndices[_j3];\n            bNew[_J2] = subtract(bNew[_J2], iValues[_j3]);\n          }\n\n          B.push(bNew);\n        }\n      }\n    }\n\n    return B.map(function (x) {\n      return new DenseMatrix({\n        data: x.map(function (e) {\n          return [e];\n        }),\n        size: [rows, 1]\n      });\n    });\n  }\n});","map":{"version":3,"names":["factory","createSolveValidation","name","dependencies","createUsolveAll","_ref","typed","matrix","divideScalar","multiplyScalar","subtract","equalScalar","DenseMatrix","solveValidation","SparseMatrixArrayMatrix","m","b","_sparseBackwardSubstitution","DenseMatrixArrayMatrix","_denseBackwardSubstitution","ArrayArrayMatrix","a","R","map","r","valueOf","b_","B","_data","e","M","rows","_size","columns","i","L","length","k","j","splice","bNew","_j","push","x","data","size","values","_values","index","_index","ptr","_ptr","iValues","iIndices","firstIndex","lastIndex","Mii","J","_j2","_lastIndex","_J","_j3","_lastIndex2","_J2"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/function/algebra/solver/usolveAll.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\nimport { createSolveValidation } from './utils/solveValidation.js';\nvar name = 'usolveAll';\nvar dependencies = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtract', 'equalScalar', 'DenseMatrix'];\nexport var createUsolveAll = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    divideScalar,\n    multiplyScalar,\n    subtract,\n    equalScalar,\n    DenseMatrix\n  } = _ref;\n  var solveValidation = createSolveValidation({\n    DenseMatrix\n  });\n  /**\n   * Finds all solutions of a linear equation system by backward substitution. Matrix must be an upper triangular matrix.\n   *\n   * `U * x = b`\n   *\n   * Syntax:\n   *\n   *    math.usolveAll(U, b)\n   *\n   * Examples:\n   *\n   *    const a = [[-2, 3], [2, 1]]\n   *    const b = [11, 9]\n   *    const x = usolveAll(a, b)  // [ [[8], [9]] ]\n   *\n   * See also:\n   *\n   *    usolve, lup, slu, usolve, lusolve\n   *\n   * @param {Matrix, Array} U       A N x N matrix or array (U)\n   * @param {Matrix, Array} b       A column vector with the b values\n   *\n   * @return {DenseMatrix[] | Array[]}  An array of affine-independent column vectors (x) that solve the linear system\n   */\n\n  return typed(name, {\n    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {\n      return _sparseBackwardSubstitution(m, b);\n    },\n    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {\n      return _denseBackwardSubstitution(m, b);\n    },\n    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {\n      var m = matrix(a);\n\n      var R = _denseBackwardSubstitution(m, b);\n\n      return R.map(r => r.valueOf());\n    }\n  });\n\n  function _denseBackwardSubstitution(m, b_) {\n    // the algorithm is derived from\n    // https://www.overleaf.com/read/csvgqdxggyjv\n    // array of right-hand sides\n    var B = [solveValidation(m, b_, true)._data.map(e => e[0])];\n    var M = m._data;\n    var rows = m._size[0];\n    var columns = m._size[1]; // loop columns backwards\n\n    for (var i = columns - 1; i >= 0; i--) {\n      var L = B.length; // loop right-hand sides\n\n      for (var k = 0; k < L; k++) {\n        var b = B[k];\n\n        if (!equalScalar(M[i][i], 0)) {\n          // non-singular row\n          b[i] = divideScalar(b[i], M[i][i]);\n\n          for (var j = i - 1; j >= 0; j--) {\n            // b[j] -= b[i] * M[j,i]\n            b[j] = subtract(b[j], multiplyScalar(b[i], M[j][i]));\n          }\n        } else if (!equalScalar(b[i], 0)) {\n          // singular row, nonzero RHS\n          if (k === 0) {\n            // There is no valid solution\n            return [];\n          } else {\n            // This RHS is invalid but other solutions may still exist\n            B.splice(k, 1);\n            k -= 1;\n            L -= 1;\n          }\n        } else if (k === 0) {\n          // singular row, RHS is zero\n          var bNew = [...b];\n          bNew[i] = 1;\n\n          for (var _j = i - 1; _j >= 0; _j--) {\n            bNew[_j] = subtract(bNew[_j], M[_j][i]);\n          }\n\n          B.push(bNew);\n        }\n      }\n    }\n\n    return B.map(x => new DenseMatrix({\n      data: x.map(e => [e]),\n      size: [rows, 1]\n    }));\n  }\n\n  function _sparseBackwardSubstitution(m, b_) {\n    // array of right-hand sides\n    var B = [solveValidation(m, b_, true)._data.map(e => e[0])];\n    var rows = m._size[0];\n    var columns = m._size[1];\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr; // loop columns backwards\n\n    for (var i = columns - 1; i >= 0; i--) {\n      var L = B.length; // loop right-hand sides\n\n      for (var k = 0; k < L; k++) {\n        var b = B[k]; // values & indices (column i)\n\n        var iValues = [];\n        var iIndices = []; // first & last indeces in column\n\n        var firstIndex = ptr[i];\n        var lastIndex = ptr[i + 1]; // find the value at [i, i]\n\n        var Mii = 0;\n\n        for (var j = lastIndex - 1; j >= firstIndex; j--) {\n          var J = index[j]; // check row\n\n          if (J === i) {\n            Mii = values[j];\n          } else if (J < i) {\n            // store upper triangular\n            iValues.push(values[j]);\n            iIndices.push(J);\n          }\n        }\n\n        if (!equalScalar(Mii, 0)) {\n          // non-singular row\n          b[i] = divideScalar(b[i], Mii); // loop upper triangular\n\n          for (var _j2 = 0, _lastIndex = iIndices.length; _j2 < _lastIndex; _j2++) {\n            var _J = iIndices[_j2];\n            b[_J] = subtract(b[_J], multiplyScalar(b[i], iValues[_j2]));\n          }\n        } else if (!equalScalar(b[i], 0)) {\n          // singular row, nonzero RHS\n          if (k === 0) {\n            // There is no valid solution\n            return [];\n          } else {\n            // This RHS is invalid but other solutions may still exist\n            B.splice(k, 1);\n            k -= 1;\n            L -= 1;\n          }\n        } else if (k === 0) {\n          // singular row, RHS is zero\n          var bNew = [...b];\n          bNew[i] = 1; // loop upper triangular\n\n          for (var _j3 = 0, _lastIndex2 = iIndices.length; _j3 < _lastIndex2; _j3++) {\n            var _J2 = iIndices[_j3];\n            bNew[_J2] = subtract(bNew[_J2], iValues[_j3]);\n          }\n\n          B.push(bNew);\n        }\n      }\n    }\n\n    return B.map(x => new DenseMatrix({\n      data: x.map(e => [e]),\n      size: [rows, 1]\n    }));\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}