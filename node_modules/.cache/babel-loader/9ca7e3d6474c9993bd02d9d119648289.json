{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/ayao/vscode/fourier-series-drawer/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { factory } from '../../utils/factory.js';\nvar name = 'matrixFromColumns';\nvar dependencies = ['typed', 'matrix', 'flatten', 'size'];\nexport var createMatrixFromColumns = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      flatten = _ref.flatten,\n      size = _ref.size;\n  /**\n   * Create a dense matrix from vectors as individual columns.\n   * If you pass row vectors, they will be transposed (but not conjugated!)\n   *\n   * Syntax:\n   *\n   *    math.matrixFromColumns(...arr)\n   *    math.matrixFromColumns(col1, col2)\n   *    math.matrixFromColumns(col1, col2, col3)\n   *\n   * Examples:\n   *\n   *    math.matrixFromColumns([1, 2, 3], [[4],[5],[6]])\n   *    math.matrixFromColumns(...vectors)\n   *\n   * See also:\n   *\n   *    matrix, matrixFromRows, matrixFromFunction, zeros\n   *\n   * @param {... Array | Matrix} cols Multiple columns\n   * @return { number[][] | Matrix } if at least one of the arguments is an array, an array will be returned\n   */\n\n  return typed(name, {\n    '...Array': function Array(arr) {\n      return _createArray(arr);\n    },\n    '...Matrix': function Matrix(arr) {\n      return matrix(_createArray(arr.map(function (m) {\n        return m.toArray();\n      })));\n    } // TODO implement this properly for SparseMatrix\n\n  });\n\n  function _createArray(arr) {\n    if (arr.length === 0) throw new TypeError('At least one column is needed to construct a matrix.');\n    var N = checkVectorTypeAndReturnLength(arr[0]); // create an array with empty rows\n\n    var result = [];\n\n    for (var i = 0; i < N; i++) {\n      result[i] = [];\n    } // loop columns\n\n\n    var _iterator = _createForOfIteratorHelper(arr),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var col = _step.value;\n        var colLength = checkVectorTypeAndReturnLength(col);\n\n        if (colLength !== N) {\n          throw new TypeError('The vectors had different length: ' + (N | 0) + ' ≠ ' + (colLength | 0));\n        }\n\n        var f = flatten(col); // push a value to each row\n\n        for (var _i = 0; _i < N; _i++) {\n          result[_i].push(f[_i]);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return result;\n  }\n\n  function checkVectorTypeAndReturnLength(vec) {\n    var s = size(vec);\n\n    if (s.length === 1) {\n      // 1D vector\n      return s[0];\n    } else if (s.length === 2) {\n      // 2D vector\n      if (s[0] === 1) {\n        // row vector\n        return s[1];\n      } else if (s[1] === 1) {\n        // col vector\n        return s[0];\n      } else {\n        throw new TypeError('At least one of the arguments is not a vector.');\n      }\n    } else {\n      throw new TypeError('Only one- or two-dimensional vectors are supported.');\n    }\n  }\n});","map":{"version":3,"names":["factory","name","dependencies","createMatrixFromColumns","_ref","typed","matrix","flatten","size","Array","arr","_createArray","Matrix","map","m","toArray","length","TypeError","N","checkVectorTypeAndReturnLength","result","i","col","colLength","f","_i","push","vec","s"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/function/matrix/matrixFromColumns.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'matrixFromColumns';\nvar dependencies = ['typed', 'matrix', 'flatten', 'size'];\nexport var createMatrixFromColumns = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    flatten,\n    size\n  } = _ref;\n\n  /**\n   * Create a dense matrix from vectors as individual columns.\n   * If you pass row vectors, they will be transposed (but not conjugated!)\n   *\n   * Syntax:\n   *\n   *    math.matrixFromColumns(...arr)\n   *    math.matrixFromColumns(col1, col2)\n   *    math.matrixFromColumns(col1, col2, col3)\n   *\n   * Examples:\n   *\n   *    math.matrixFromColumns([1, 2, 3], [[4],[5],[6]])\n   *    math.matrixFromColumns(...vectors)\n   *\n   * See also:\n   *\n   *    matrix, matrixFromRows, matrixFromFunction, zeros\n   *\n   * @param {... Array | Matrix} cols Multiple columns\n   * @return { number[][] | Matrix } if at least one of the arguments is an array, an array will be returned\n   */\n  return typed(name, {\n    '...Array': function Array(arr) {\n      return _createArray(arr);\n    },\n    '...Matrix': function Matrix(arr) {\n      return matrix(_createArray(arr.map(m => m.toArray())));\n    } // TODO implement this properly for SparseMatrix\n\n  });\n\n  function _createArray(arr) {\n    if (arr.length === 0) throw new TypeError('At least one column is needed to construct a matrix.');\n    var N = checkVectorTypeAndReturnLength(arr[0]); // create an array with empty rows\n\n    var result = [];\n\n    for (var i = 0; i < N; i++) {\n      result[i] = [];\n    } // loop columns\n\n\n    for (var col of arr) {\n      var colLength = checkVectorTypeAndReturnLength(col);\n\n      if (colLength !== N) {\n        throw new TypeError('The vectors had different length: ' + (N | 0) + ' ≠ ' + (colLength | 0));\n      }\n\n      var f = flatten(col); // push a value to each row\n\n      for (var _i = 0; _i < N; _i++) {\n        result[_i].push(f[_i]);\n      }\n    }\n\n    return result;\n  }\n\n  function checkVectorTypeAndReturnLength(vec) {\n    var s = size(vec);\n\n    if (s.length === 1) {\n      // 1D vector\n      return s[0];\n    } else if (s.length === 2) {\n      // 2D vector\n      if (s[0] === 1) {\n        // row vector\n        return s[1];\n      } else if (s[1] === 1) {\n        // col vector\n        return s[0];\n      } else {\n        throw new TypeError('At least one of the arguments is not a vector.');\n      }\n    } else {\n      throw new TypeError('Only one- or two-dimensional vectors are supported.');\n    }\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}