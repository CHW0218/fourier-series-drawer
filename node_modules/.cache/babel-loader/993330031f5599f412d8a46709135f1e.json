{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { isMatrix } from '../../utils/is.js';\nimport { createRng } from './util/seededRNG.js';\nimport { randomMatrix } from './util/randomMatrix.js';\nvar name = 'random';\nvar dependencies = ['typed', 'config', '?on'];\nexport var createRandom = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      on = _ref.on; // seeded pseudo random number generator\n\n  var rng = createRng(config.randomSeed);\n\n  if (on) {\n    on('config', function (curr, prev) {\n      if (curr.randomSeed !== prev.randomSeed) {\n        rng = createRng(curr.randomSeed);\n      }\n    });\n  }\n  /**\n   * Return a random number larger or equal to `min` and smaller than `max`\n   * using a uniform distribution.\n   *\n   * Syntax:\n   *\n   *     math.random()                // generate a random number between 0 and 1\n   *     math.random(max)             // generate a random number between 0 and max\n   *     math.random(min, max)        // generate a random number between min and max\n   *     math.random(size)            // generate a matrix with random numbers between 0 and 1\n   *     math.random(size, max)       // generate a matrix with random numbers between 0 and max\n   *     math.random(size, min, max)  // generate a matrix with random numbers between min and max\n   *\n   * Examples:\n   *\n   *     math.random()       // returns a random number between 0 and 1\n   *     math.random(100)    // returns a random number between 0 and 100\n   *     math.random(30, 40) // returns a random number between 30 and 40\n   *     math.random([2, 3]) // returns a 2x3 matrix with random numbers between 0 and 1\n   *\n   * See also:\n   *\n   *     randomInt, pickRandom\n   *\n   * @param {Array | Matrix} [size] If provided, an array or matrix with given\n   *                                size and filled with random values is returned\n   * @param {number} [min]  Minimum boundary for the random value, included\n   * @param {number} [max]  Maximum boundary for the random value, excluded\n   * @return {number | Array | Matrix} A random number\n   */\n\n\n  return typed(name, {\n    '': function _() {\n      return _random(0, 1);\n    },\n    number: function number(max) {\n      return _random(0, max);\n    },\n    'number, number': function numberNumber(min, max) {\n      return _random(min, max);\n    },\n    'Array | Matrix': function ArrayMatrix(size) {\n      return _randomMatrix(size, 0, 1);\n    },\n    'Array | Matrix, number': function ArrayMatrixNumber(size, max) {\n      return _randomMatrix(size, 0, max);\n    },\n    'Array | Matrix, number, number': function ArrayMatrixNumberNumber(size, min, max) {\n      return _randomMatrix(size, min, max);\n    }\n  });\n\n  function _randomMatrix(size, min, max) {\n    var res = randomMatrix(size.valueOf(), function () {\n      return _random(min, max);\n    });\n    return isMatrix(size) ? size.create(res) : res;\n  }\n\n  function _random(min, max) {\n    return min + rng() * (max - min);\n  }\n}); // number only implementation of random, no matrix support\n// TODO: there is quite some duplicate code in both createRandom and createRandomNumber, can we improve that?\n\nexport var createRandomNumber = /* #__PURE__ */factory(name, ['typed', 'config', '?on'], function (_ref2) {\n  var typed = _ref2.typed,\n      config = _ref2.config,\n      on = _ref2.on,\n      matrix = _ref2.matrix; // seeded pseudo random number generator1\n\n  var rng = createRng(config.randomSeed);\n\n  if (on) {\n    on('config', function (curr, prev) {\n      if (curr.randomSeed !== prev.randomSeed) {\n        rng = createRng(curr.randomSeed);\n      }\n    });\n  }\n\n  return typed(name, {\n    '': function _() {\n      return _random(0, 1);\n    },\n    number: function number(max) {\n      return _random(0, max);\n    },\n    'number, number': function numberNumber(min, max) {\n      return _random(min, max);\n    }\n  });\n\n  function _random(min, max) {\n    return min + rng() * (max - min);\n  }\n});","map":{"version":3,"names":["factory","isMatrix","createRng","randomMatrix","name","dependencies","createRandom","_ref","typed","config","on","rng","randomSeed","curr","prev","_random","number","max","min","size","_randomMatrix","res","valueOf","create","createRandomNumber","_ref2","matrix"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/function/probability/random.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { isMatrix } from '../../utils/is.js';\nimport { createRng } from './util/seededRNG.js';\nimport { randomMatrix } from './util/randomMatrix.js';\nvar name = 'random';\nvar dependencies = ['typed', 'config', '?on'];\nexport var createRandom = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    on\n  } = _ref;\n  // seeded pseudo random number generator\n  var rng = createRng(config.randomSeed);\n\n  if (on) {\n    on('config', function (curr, prev) {\n      if (curr.randomSeed !== prev.randomSeed) {\n        rng = createRng(curr.randomSeed);\n      }\n    });\n  }\n  /**\n   * Return a random number larger or equal to `min` and smaller than `max`\n   * using a uniform distribution.\n   *\n   * Syntax:\n   *\n   *     math.random()                // generate a random number between 0 and 1\n   *     math.random(max)             // generate a random number between 0 and max\n   *     math.random(min, max)        // generate a random number between min and max\n   *     math.random(size)            // generate a matrix with random numbers between 0 and 1\n   *     math.random(size, max)       // generate a matrix with random numbers between 0 and max\n   *     math.random(size, min, max)  // generate a matrix with random numbers between min and max\n   *\n   * Examples:\n   *\n   *     math.random()       // returns a random number between 0 and 1\n   *     math.random(100)    // returns a random number between 0 and 100\n   *     math.random(30, 40) // returns a random number between 30 and 40\n   *     math.random([2, 3]) // returns a 2x3 matrix with random numbers between 0 and 1\n   *\n   * See also:\n   *\n   *     randomInt, pickRandom\n   *\n   * @param {Array | Matrix} [size] If provided, an array or matrix with given\n   *                                size and filled with random values is returned\n   * @param {number} [min]  Minimum boundary for the random value, included\n   * @param {number} [max]  Maximum boundary for the random value, excluded\n   * @return {number | Array | Matrix} A random number\n   */\n\n\n  return typed(name, {\n    '': () => _random(0, 1),\n    number: max => _random(0, max),\n    'number, number': (min, max) => _random(min, max),\n    'Array | Matrix': size => _randomMatrix(size, 0, 1),\n    'Array | Matrix, number': (size, max) => _randomMatrix(size, 0, max),\n    'Array | Matrix, number, number': (size, min, max) => _randomMatrix(size, min, max)\n  });\n\n  function _randomMatrix(size, min, max) {\n    var res = randomMatrix(size.valueOf(), () => _random(min, max));\n    return isMatrix(size) ? size.create(res) : res;\n  }\n\n  function _random(min, max) {\n    return min + rng() * (max - min);\n  }\n}); // number only implementation of random, no matrix support\n// TODO: there is quite some duplicate code in both createRandom and createRandomNumber, can we improve that?\n\nexport var createRandomNumber = /* #__PURE__ */factory(name, ['typed', 'config', '?on'], _ref2 => {\n  var {\n    typed,\n    config,\n    on,\n    matrix\n  } = _ref2;\n  // seeded pseudo random number generator1\n  var rng = createRng(config.randomSeed);\n\n  if (on) {\n    on('config', function (curr, prev) {\n      if (curr.randomSeed !== prev.randomSeed) {\n        rng = createRng(curr.randomSeed);\n      }\n    });\n  }\n\n  return typed(name, {\n    '': () => _random(0, 1),\n    number: max => _random(0, max),\n    'number, number': (min, max) => _random(min, max)\n  });\n\n  function _random(min, max) {\n    return min + rng() * (max - min);\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}