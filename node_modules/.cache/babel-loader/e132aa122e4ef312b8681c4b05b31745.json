{"ast":null,"code":"import { isBigNumber } from '../../utils/is.js';\nimport { resize } from '../../utils/array.js';\nimport { isInteger } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'identity';\nvar dependencies = ['typed', 'config', 'matrix', 'BigNumber', 'DenseMatrix', 'SparseMatrix'];\nexport var createIdentity = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      matrix = _ref.matrix,\n      BigNumber = _ref.BigNumber,\n      DenseMatrix = _ref.DenseMatrix,\n      SparseMatrix = _ref.SparseMatrix;\n  /**\n   * Create a 2-dimensional identity matrix with size m x n or n x n.\n   * The matrix has ones on the diagonal and zeros elsewhere.\n   *\n   * Syntax:\n   *\n   *    math.identity(n)\n   *    math.identity(n, format)\n   *    math.identity(m, n)\n   *    math.identity(m, n, format)\n   *    math.identity([m, n])\n   *    math.identity([m, n], format)\n   *\n   * Examples:\n   *\n   *    math.identity(3)                    // returns [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n   *    math.identity(3, 2)                 // returns [[1, 0], [0, 1], [0, 0]]\n   *\n   *    const A = [[1, 2, 3], [4, 5, 6]]\n   *    math.identity(math.size(A))         // returns [[1, 0, 0], [0, 1, 0]]\n   *\n   * See also:\n   *\n   *    diag, ones, zeros, size, range\n   *\n   * @param {...number | Matrix | Array} size   The size for the matrix\n   * @param {string} [format]                   The Matrix storage format\n   *\n   * @return {Matrix | Array | number} A matrix with ones on the diagonal.\n   */\n\n  return typed(name, {\n    '': function _() {\n      return config.matrix === 'Matrix' ? matrix([]) : [];\n    },\n    string: function string(format) {\n      return matrix(format);\n    },\n    'number | BigNumber': function numberBigNumber(rows) {\n      return _identity(rows, rows, config.matrix === 'Matrix' ? 'dense' : undefined);\n    },\n    'number | BigNumber, string': function numberBigNumberString(rows, format) {\n      return _identity(rows, rows, format);\n    },\n    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(rows, cols) {\n      return _identity(rows, cols, config.matrix === 'Matrix' ? 'dense' : undefined);\n    },\n    'number | BigNumber, number | BigNumber, string': function numberBigNumberNumberBigNumberString(rows, cols, format) {\n      return _identity(rows, cols, format);\n    },\n    Array: function Array(size) {\n      return _identityVector(size);\n    },\n    'Array, string': function ArrayString(size, format) {\n      return _identityVector(size, format);\n    },\n    Matrix: function Matrix(size) {\n      return _identityVector(size.valueOf(), size.storage());\n    },\n    'Matrix, string': function MatrixString(size, format) {\n      return _identityVector(size.valueOf(), format);\n    }\n  });\n\n  function _identityVector(size, format) {\n    switch (size.length) {\n      case 0:\n        return format ? matrix(format) : [];\n\n      case 1:\n        return _identity(size[0], size[0], format);\n\n      case 2:\n        return _identity(size[0], size[1], format);\n\n      default:\n        throw new Error('Vector containing two values expected');\n    }\n  }\n  /**\n   * Create an identity matrix\n   * @param {number | BigNumber} rows\n   * @param {number | BigNumber} cols\n   * @param {string} [format]\n   * @returns {Matrix}\n   * @private\n   */\n\n\n  function _identity(rows, cols, format) {\n    // BigNumber constructor with the right precision\n    var Big = isBigNumber(rows) || isBigNumber(cols) ? BigNumber : null;\n    if (isBigNumber(rows)) rows = rows.toNumber();\n    if (isBigNumber(cols)) cols = cols.toNumber();\n\n    if (!isInteger(rows) || rows < 1) {\n      throw new Error('Parameters in function identity must be positive integers');\n    }\n\n    if (!isInteger(cols) || cols < 1) {\n      throw new Error('Parameters in function identity must be positive integers');\n    }\n\n    var one = Big ? new BigNumber(1) : 1;\n    var defaultValue = Big ? new Big(0) : 0;\n    var size = [rows, cols]; // check we need to return a matrix\n\n    if (format) {\n      // create diagonal matrix (use optimized implementation for storage format)\n      if (format === 'sparse') {\n        return SparseMatrix.diagonal(size, one, 0, defaultValue);\n      }\n\n      if (format === 'dense') {\n        return DenseMatrix.diagonal(size, one, 0, defaultValue);\n      }\n\n      throw new TypeError(\"Unknown matrix type \\\"\".concat(format, \"\\\"\"));\n    } // create and resize array\n\n\n    var res = resize([], size, defaultValue); // fill in ones on the diagonal\n\n    var minimum = rows < cols ? rows : cols; // fill diagonal\n\n    for (var d = 0; d < minimum; d++) {\n      res[d][d] = one;\n    }\n\n    return res;\n  }\n});","map":{"version":3,"names":["isBigNumber","resize","isInteger","factory","name","dependencies","createIdentity","_ref","typed","config","matrix","BigNumber","DenseMatrix","SparseMatrix","_","string","format","numberBigNumber","rows","_identity","undefined","numberBigNumberString","numberBigNumberNumberBigNumber","cols","numberBigNumberNumberBigNumberString","Array","size","_identityVector","ArrayString","Matrix","valueOf","storage","MatrixString","length","Error","Big","toNumber","one","defaultValue","diagonal","TypeError","concat","res","minimum","d"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/function/matrix/identity.js"],"sourcesContent":["import { isBigNumber } from '../../utils/is.js';\nimport { resize } from '../../utils/array.js';\nimport { isInteger } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'identity';\nvar dependencies = ['typed', 'config', 'matrix', 'BigNumber', 'DenseMatrix', 'SparseMatrix'];\nexport var createIdentity = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    BigNumber,\n    DenseMatrix,\n    SparseMatrix\n  } = _ref;\n\n  /**\n   * Create a 2-dimensional identity matrix with size m x n or n x n.\n   * The matrix has ones on the diagonal and zeros elsewhere.\n   *\n   * Syntax:\n   *\n   *    math.identity(n)\n   *    math.identity(n, format)\n   *    math.identity(m, n)\n   *    math.identity(m, n, format)\n   *    math.identity([m, n])\n   *    math.identity([m, n], format)\n   *\n   * Examples:\n   *\n   *    math.identity(3)                    // returns [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n   *    math.identity(3, 2)                 // returns [[1, 0], [0, 1], [0, 0]]\n   *\n   *    const A = [[1, 2, 3], [4, 5, 6]]\n   *    math.identity(math.size(A))         // returns [[1, 0, 0], [0, 1, 0]]\n   *\n   * See also:\n   *\n   *    diag, ones, zeros, size, range\n   *\n   * @param {...number | Matrix | Array} size   The size for the matrix\n   * @param {string} [format]                   The Matrix storage format\n   *\n   * @return {Matrix | Array | number} A matrix with ones on the diagonal.\n   */\n  return typed(name, {\n    '': function _() {\n      return config.matrix === 'Matrix' ? matrix([]) : [];\n    },\n    string: function string(format) {\n      return matrix(format);\n    },\n    'number | BigNumber': function numberBigNumber(rows) {\n      return _identity(rows, rows, config.matrix === 'Matrix' ? 'dense' : undefined);\n    },\n    'number | BigNumber, string': function numberBigNumberString(rows, format) {\n      return _identity(rows, rows, format);\n    },\n    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(rows, cols) {\n      return _identity(rows, cols, config.matrix === 'Matrix' ? 'dense' : undefined);\n    },\n    'number | BigNumber, number | BigNumber, string': function numberBigNumberNumberBigNumberString(rows, cols, format) {\n      return _identity(rows, cols, format);\n    },\n    Array: function Array(size) {\n      return _identityVector(size);\n    },\n    'Array, string': function ArrayString(size, format) {\n      return _identityVector(size, format);\n    },\n    Matrix: function Matrix(size) {\n      return _identityVector(size.valueOf(), size.storage());\n    },\n    'Matrix, string': function MatrixString(size, format) {\n      return _identityVector(size.valueOf(), format);\n    }\n  });\n\n  function _identityVector(size, format) {\n    switch (size.length) {\n      case 0:\n        return format ? matrix(format) : [];\n\n      case 1:\n        return _identity(size[0], size[0], format);\n\n      case 2:\n        return _identity(size[0], size[1], format);\n\n      default:\n        throw new Error('Vector containing two values expected');\n    }\n  }\n  /**\n   * Create an identity matrix\n   * @param {number | BigNumber} rows\n   * @param {number | BigNumber} cols\n   * @param {string} [format]\n   * @returns {Matrix}\n   * @private\n   */\n\n\n  function _identity(rows, cols, format) {\n    // BigNumber constructor with the right precision\n    var Big = isBigNumber(rows) || isBigNumber(cols) ? BigNumber : null;\n    if (isBigNumber(rows)) rows = rows.toNumber();\n    if (isBigNumber(cols)) cols = cols.toNumber();\n\n    if (!isInteger(rows) || rows < 1) {\n      throw new Error('Parameters in function identity must be positive integers');\n    }\n\n    if (!isInteger(cols) || cols < 1) {\n      throw new Error('Parameters in function identity must be positive integers');\n    }\n\n    var one = Big ? new BigNumber(1) : 1;\n    var defaultValue = Big ? new Big(0) : 0;\n    var size = [rows, cols]; // check we need to return a matrix\n\n    if (format) {\n      // create diagonal matrix (use optimized implementation for storage format)\n      if (format === 'sparse') {\n        return SparseMatrix.diagonal(size, one, 0, defaultValue);\n      }\n\n      if (format === 'dense') {\n        return DenseMatrix.diagonal(size, one, 0, defaultValue);\n      }\n\n      throw new TypeError(\"Unknown matrix type \\\"\".concat(format, \"\\\"\"));\n    } // create and resize array\n\n\n    var res = resize([], size, defaultValue); // fill in ones on the diagonal\n\n    var minimum = rows < cols ? rows : cols; // fill diagonal\n\n    for (var d = 0; d < minimum; d++) {\n      res[d][d] = one;\n    }\n\n    return res;\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}