{"ast":null,"code":"import { maxArgumentCount } from '../../utils/function.js';\nimport { forEach as forEachArray } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'forEach';\nvar dependencies = ['typed'];\nexport var createForEach = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  /**\n   * Iterate over all elements of a matrix/array, and executes the given callback function.\n   *\n   * Syntax:\n   *\n   *    math.forEach(x, callback)\n   *\n   * Examples:\n   *\n   *    math.forEach([1, 2, 3], function(value) {\n   *      console.log(value)\n   *    })\n   *    // outputs 1, 2, 3\n   *\n   * See also:\n   *\n   *    filter, map, sort\n   *\n   * @param {Matrix | Array} x    The matrix to iterate on.\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix/array being traversed.\n   */\n\n  return typed(name, {\n    'Array, function': _forEach,\n    'Matrix, function': function MatrixFunction(x, callback) {\n      return x.forEach(callback);\n    }\n  });\n});\n/**\n * forEach for a multi dimensional array\n * @param {Array} array\n * @param {Function} callback\n * @private\n */\n\nfunction _forEach(array, callback) {\n  // figure out what number of arguments the callback function expects\n  var args = maxArgumentCount(callback);\n\n  var recurse = function recurse(value, index) {\n    if (Array.isArray(value)) {\n      forEachArray(value, function (child, i) {\n        // we create a copy of the index array and append the new index value\n        recurse(child, index.concat(i));\n      });\n    } else {\n      // invoke the callback function with the right number of arguments\n      if (args === 1) {\n        callback(value);\n      } else if (args === 2) {\n        callback(value, index);\n      } else {\n        // 3 or -1\n        callback(value, index, array);\n      }\n    }\n  };\n\n  recurse(array, []);\n}","map":{"version":3,"names":["maxArgumentCount","forEach","forEachArray","factory","name","dependencies","createForEach","_ref","typed","_forEach","MatrixFunction","x","callback","array","args","recurse","value","index","Array","isArray","child","i","concat"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/function/matrix/forEach.js"],"sourcesContent":["import { maxArgumentCount } from '../../utils/function.js';\nimport { forEach as forEachArray } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'forEach';\nvar dependencies = ['typed'];\nexport var createForEach = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n\n  /**\n   * Iterate over all elements of a matrix/array, and executes the given callback function.\n   *\n   * Syntax:\n   *\n   *    math.forEach(x, callback)\n   *\n   * Examples:\n   *\n   *    math.forEach([1, 2, 3], function(value) {\n   *      console.log(value)\n   *    })\n   *    // outputs 1, 2, 3\n   *\n   * See also:\n   *\n   *    filter, map, sort\n   *\n   * @param {Matrix | Array} x    The matrix to iterate on.\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix/array being traversed.\n   */\n  return typed(name, {\n    'Array, function': _forEach,\n    'Matrix, function': function MatrixFunction(x, callback) {\n      return x.forEach(callback);\n    }\n  });\n});\n/**\n * forEach for a multi dimensional array\n * @param {Array} array\n * @param {Function} callback\n * @private\n */\n\nfunction _forEach(array, callback) {\n  // figure out what number of arguments the callback function expects\n  var args = maxArgumentCount(callback);\n\n  var recurse = function recurse(value, index) {\n    if (Array.isArray(value)) {\n      forEachArray(value, function (child, i) {\n        // we create a copy of the index array and append the new index value\n        recurse(child, index.concat(i));\n      });\n    } else {\n      // invoke the callback function with the right number of arguments\n      if (args === 1) {\n        callback(value);\n      } else if (args === 2) {\n        callback(value, index);\n      } else {\n        // 3 or -1\n        callback(value, index, array);\n      }\n    }\n  };\n\n  recurse(array, []);\n}"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,yBAAjC;AACA,SAASC,OAAO,IAAIC,YAApB,QAAwC,sBAAxC;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,SAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,aAAa,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EAC5E,IACEC,KADF,GAEID,IAFJ,CACEC,KADF;EAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOA,KAAK,CAACJ,IAAD,EAAO;IACjB,mBAAmBK,QADF;IAEjB,oBAAoB,SAASC,cAAT,CAAwBC,CAAxB,EAA2BC,QAA3B,EAAqC;MACvD,OAAOD,CAAC,CAACV,OAAF,CAAUW,QAAV,CAAP;IACD;EAJgB,CAAP,CAAZ;AAMD,CAlCgD,CAA1C;AAmCP;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASH,QAAT,CAAkBI,KAAlB,EAAyBD,QAAzB,EAAmC;EACjC;EACA,IAAIE,IAAI,GAAGd,gBAAgB,CAACY,QAAD,CAA3B;;EAEA,IAAIG,OAAO,GAAG,SAASA,OAAT,CAAiBC,KAAjB,EAAwBC,KAAxB,EAA+B;IAC3C,IAAIC,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAJ,EAA0B;MACxBd,YAAY,CAACc,KAAD,EAAQ,UAAUI,KAAV,EAAiBC,CAAjB,EAAoB;QACtC;QACAN,OAAO,CAACK,KAAD,EAAQH,KAAK,CAACK,MAAN,CAAaD,CAAb,CAAR,CAAP;MACD,CAHW,CAAZ;IAID,CALD,MAKO;MACL;MACA,IAAIP,IAAI,KAAK,CAAb,EAAgB;QACdF,QAAQ,CAACI,KAAD,CAAR;MACD,CAFD,MAEO,IAAIF,IAAI,KAAK,CAAb,EAAgB;QACrBF,QAAQ,CAACI,KAAD,EAAQC,KAAR,CAAR;MACD,CAFM,MAEA;QACL;QACAL,QAAQ,CAACI,KAAD,EAAQC,KAAR,EAAeJ,KAAf,CAAR;MACD;IACF;EACF,CAjBD;;EAmBAE,OAAO,CAACF,KAAD,EAAQ,EAAR,CAAP;AACD"},"metadata":{},"sourceType":"module"}