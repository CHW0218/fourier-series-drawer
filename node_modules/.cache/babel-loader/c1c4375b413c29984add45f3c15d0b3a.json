{"ast":null,"code":"/**\n * Bitwise and for Bignumbers\n *\n * Special Cases:\n *   N &  n =  N\n *   n &  0 =  0\n *   n & -1 =  n\n *   n &  n =  n\n *   I &  I =  I\n *  -I & -I = -I\n *   I & -I =  0\n *   I &  n =  n\n *   I & -n =  I\n *  -I &  n =  0\n *  -I & -n = -I\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` & `y`, is fully precise\n * @private\n */\nexport function bitAndBigNumber(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function bitAnd');\n  }\n\n  var BigNumber = x.constructor;\n\n  if (x.isNaN() || y.isNaN()) {\n    return new BigNumber(NaN);\n  }\n\n  if (x.isZero() || y.eq(-1) || x.eq(y)) {\n    return x;\n  }\n\n  if (y.isZero() || x.eq(-1)) {\n    return y;\n  }\n\n  if (!x.isFinite() || !y.isFinite()) {\n    if (!x.isFinite() && !y.isFinite()) {\n      if (x.isNegative() === y.isNegative()) {\n        return x;\n      }\n\n      return new BigNumber(0);\n    }\n\n    if (!x.isFinite()) {\n      if (y.isNegative()) {\n        return x;\n      }\n\n      if (x.isNegative()) {\n        return new BigNumber(0);\n      }\n\n      return y;\n    }\n\n    if (!y.isFinite()) {\n      if (x.isNegative()) {\n        return y;\n      }\n\n      if (y.isNegative()) {\n        return new BigNumber(0);\n      }\n\n      return x;\n    }\n  }\n\n  return bitwise(x, y, function (a, b) {\n    return a & b;\n  });\n}\n/**\n * Bitwise not\n * @param {BigNumber} x\n * @return {BigNumber} Result of ~`x`, fully precise\n *\n */\n\nexport function bitNotBigNumber(x) {\n  if (x.isFinite() && !x.isInteger()) {\n    throw new Error('Integer expected in function bitNot');\n  }\n\n  var BigNumber = x.constructor;\n  var prevPrec = BigNumber.precision;\n  BigNumber.config({\n    precision: 1E9\n  });\n  var result = x.plus(new BigNumber(1));\n  result.s = -result.s || null;\n  BigNumber.config({\n    precision: prevPrec\n  });\n  return result;\n}\n/**\n * Bitwise OR for BigNumbers\n *\n * Special Cases:\n *   N |  n =  N\n *   n |  0 =  n\n *   n | -1 = -1\n *   n |  n =  n\n *   I |  I =  I\n *  -I | -I = -I\n *   I | -n = -1\n *   I | -I = -1\n *   I |  n =  I\n *  -I |  n = -I\n *  -I | -n = -n\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` | `y`, fully precise\n */\n\nexport function bitOrBigNumber(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function bitOr');\n  }\n\n  var BigNumber = x.constructor;\n\n  if (x.isNaN() || y.isNaN()) {\n    return new BigNumber(NaN);\n  }\n\n  var negOne = new BigNumber(-1);\n\n  if (x.isZero() || y.eq(negOne) || x.eq(y)) {\n    return y;\n  }\n\n  if (y.isZero() || x.eq(negOne)) {\n    return x;\n  }\n\n  if (!x.isFinite() || !y.isFinite()) {\n    if (!x.isFinite() && !x.isNegative() && y.isNegative() || x.isNegative() && !y.isNegative() && !y.isFinite()) {\n      return negOne;\n    }\n\n    if (x.isNegative() && y.isNegative()) {\n      return x.isFinite() ? x : y;\n    }\n\n    return x.isFinite() ? y : x;\n  }\n\n  return bitwise(x, y, function (a, b) {\n    return a | b;\n  });\n}\n/**\n * Applies bitwise function to numbers\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @param {function (a, b)} func\n * @return {BigNumber}\n */\n\nexport function bitwise(x, y, func) {\n  var BigNumber = x.constructor;\n  var xBits, yBits;\n  var xSign = +(x.s < 0);\n  var ySign = +(y.s < 0);\n\n  if (xSign) {\n    xBits = decCoefficientToBinaryString(bitNotBigNumber(x));\n\n    for (var i = 0; i < xBits.length; ++i) {\n      xBits[i] ^= 1;\n    }\n  } else {\n    xBits = decCoefficientToBinaryString(x);\n  }\n\n  if (ySign) {\n    yBits = decCoefficientToBinaryString(bitNotBigNumber(y));\n\n    for (var _i = 0; _i < yBits.length; ++_i) {\n      yBits[_i] ^= 1;\n    }\n  } else {\n    yBits = decCoefficientToBinaryString(y);\n  }\n\n  var minBits, maxBits, minSign;\n\n  if (xBits.length <= yBits.length) {\n    minBits = xBits;\n    maxBits = yBits;\n    minSign = xSign;\n  } else {\n    minBits = yBits;\n    maxBits = xBits;\n    minSign = ySign;\n  }\n\n  var shortLen = minBits.length;\n  var longLen = maxBits.length;\n  var expFuncVal = func(xSign, ySign) ^ 1;\n  var outVal = new BigNumber(expFuncVal ^ 1);\n  var twoPower = new BigNumber(1);\n  var two = new BigNumber(2);\n  var prevPrec = BigNumber.precision;\n  BigNumber.config({\n    precision: 1E9\n  });\n\n  while (shortLen > 0) {\n    if (func(minBits[--shortLen], maxBits[--longLen]) === expFuncVal) {\n      outVal = outVal.plus(twoPower);\n    }\n\n    twoPower = twoPower.times(two);\n  }\n\n  while (longLen > 0) {\n    if (func(minSign, maxBits[--longLen]) === expFuncVal) {\n      outVal = outVal.plus(twoPower);\n    }\n\n    twoPower = twoPower.times(two);\n  }\n\n  BigNumber.config({\n    precision: prevPrec\n  });\n\n  if (expFuncVal === 0) {\n    outVal.s = -outVal.s;\n  }\n\n  return outVal;\n}\n/* Extracted from decimal.js, and edited to specialize. */\n\nfunction decCoefficientToBinaryString(x) {\n  // Convert to string\n  var a = x.d; // array with digits\n\n  var r = a[0] + '';\n\n  for (var i = 1; i < a.length; ++i) {\n    var s = a[i] + '';\n\n    for (var z = 7 - s.length; z--;) {\n      s = '0' + s;\n    }\n\n    r += s;\n  }\n\n  var j = r.length;\n\n  while (r.charAt(j) === '0') {\n    j--;\n  }\n\n  var xe = x.e;\n  var str = r.slice(0, j + 1 || 1);\n  var strL = str.length;\n\n  if (xe > 0) {\n    if (++xe > strL) {\n      // Append zeros.\n      xe -= strL;\n\n      while (xe--) {\n        str += '0';\n      }\n    } else if (xe < strL) {\n      str = str.slice(0, xe) + '.' + str.slice(xe);\n    }\n  } // Convert from base 10 (decimal) to base 2\n\n\n  var arr = [0];\n\n  for (var _i2 = 0; _i2 < str.length;) {\n    var arrL = arr.length;\n\n    while (arrL--) {\n      arr[arrL] *= 10;\n    }\n\n    arr[0] += parseInt(str.charAt(_i2++)); // convert to int\n\n    for (var _j = 0; _j < arr.length; ++_j) {\n      if (arr[_j] > 1) {\n        if (arr[_j + 1] === null || arr[_j + 1] === undefined) {\n          arr[_j + 1] = 0;\n        }\n\n        arr[_j + 1] += arr[_j] >> 1;\n        arr[_j] &= 1;\n      }\n    }\n  }\n\n  return arr.reverse();\n}\n/**\n * Bitwise XOR for BigNumbers\n *\n * Special Cases:\n *   N ^  n =  N\n *   n ^  0 =  n\n *   n ^  n =  0\n *   n ^ -1 = ~n\n *   I ^  n =  I\n *   I ^ -n = -I\n *   I ^ -I = -1\n *  -I ^  n = -I\n *  -I ^ -n =  I\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` ^ `y`, fully precise\n *\n */\n\n\nexport function bitXor(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function bitXor');\n  }\n\n  var BigNumber = x.constructor;\n\n  if (x.isNaN() || y.isNaN()) {\n    return new BigNumber(NaN);\n  }\n\n  if (x.isZero()) {\n    return y;\n  }\n\n  if (y.isZero()) {\n    return x;\n  }\n\n  if (x.eq(y)) {\n    return new BigNumber(0);\n  }\n\n  var negOne = new BigNumber(-1);\n\n  if (x.eq(negOne)) {\n    return bitNotBigNumber(y);\n  }\n\n  if (y.eq(negOne)) {\n    return bitNotBigNumber(x);\n  }\n\n  if (!x.isFinite() || !y.isFinite()) {\n    if (!x.isFinite() && !y.isFinite()) {\n      return negOne;\n    }\n\n    return new BigNumber(x.isNegative() === y.isNegative() ? Infinity : -Infinity);\n  }\n\n  return bitwise(x, y, function (a, b) {\n    return a ^ b;\n  });\n}\n/**\n * Bitwise left shift\n *\n * Special Cases:\n *  n << -n = N\n *  n <<  N = N\n *  N <<  n = N\n *  n <<  0 = n\n *  0 <<  n = 0\n *  I <<  I = N\n *  I <<  n = I\n *  n <<  I = I\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` << `y`\n *\n */\n\nexport function leftShiftBigNumber(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function leftShift');\n  }\n\n  var BigNumber = x.constructor;\n\n  if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {\n    return new BigNumber(NaN);\n  }\n\n  if (x.isZero() || y.isZero()) {\n    return x;\n  }\n\n  if (!x.isFinite() && !y.isFinite()) {\n    return new BigNumber(NaN);\n  } // Math.pow(2, y) is fully precise for y < 55, and fast\n\n\n  if (y.lt(55)) {\n    return x.times(Math.pow(2, y.toNumber()) + '');\n  }\n\n  return x.times(new BigNumber(2).pow(y));\n}\n/*\n * Special Cases:\n *   n >> -n =  N\n *   n >>  N =  N\n *   N >>  n =  N\n *   I >>  I =  N\n *   n >>  0 =  n\n *   I >>  n =  I\n *  -I >>  n = -I\n *  -I >>  I = -I\n *   n >>  I =  I\n *  -n >>  I = -1\n *   0 >>  n =  0\n *\n * @param {BigNumber} value\n * @param {BigNumber} value\n * @return {BigNumber} Result of `x` >> `y`\n *\n */\n\nexport function rightArithShiftBigNumber(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function rightArithShift');\n  }\n\n  var BigNumber = x.constructor;\n\n  if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {\n    return new BigNumber(NaN);\n  }\n\n  if (x.isZero() || y.isZero()) {\n    return x;\n  }\n\n  if (!y.isFinite()) {\n    if (x.isNegative()) {\n      return new BigNumber(-1);\n    }\n\n    if (!x.isFinite()) {\n      return new BigNumber(NaN);\n    }\n\n    return new BigNumber(0);\n  } // Math.pow(2, y) is fully precise for y < 55, and fast\n\n\n  if (y.lt(55)) {\n    return x.div(Math.pow(2, y.toNumber()) + '').floor();\n  }\n\n  return x.div(new BigNumber(2).pow(y)).floor();\n}","map":{"version":3,"names":["bitAndBigNumber","x","y","isFinite","isInteger","Error","BigNumber","constructor","isNaN","NaN","isZero","eq","isNegative","bitwise","a","b","bitNotBigNumber","prevPrec","precision","config","result","plus","s","bitOrBigNumber","negOne","func","xBits","yBits","xSign","ySign","decCoefficientToBinaryString","i","length","_i","minBits","maxBits","minSign","shortLen","longLen","expFuncVal","outVal","twoPower","two","times","d","r","z","j","charAt","xe","e","str","slice","strL","arr","_i2","arrL","parseInt","_j","undefined","reverse","bitXor","Infinity","leftShiftBigNumber","lt","Math","pow","toNumber","rightArithShiftBigNumber","div","floor"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/utils/bignumber/bitwise.js"],"sourcesContent":["/**\n * Bitwise and for Bignumbers\n *\n * Special Cases:\n *   N &  n =  N\n *   n &  0 =  0\n *   n & -1 =  n\n *   n &  n =  n\n *   I &  I =  I\n *  -I & -I = -I\n *   I & -I =  0\n *   I &  n =  n\n *   I & -n =  I\n *  -I &  n =  0\n *  -I & -n = -I\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` & `y`, is fully precise\n * @private\n */\nexport function bitAndBigNumber(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function bitAnd');\n  }\n\n  var BigNumber = x.constructor;\n\n  if (x.isNaN() || y.isNaN()) {\n    return new BigNumber(NaN);\n  }\n\n  if (x.isZero() || y.eq(-1) || x.eq(y)) {\n    return x;\n  }\n\n  if (y.isZero() || x.eq(-1)) {\n    return y;\n  }\n\n  if (!x.isFinite() || !y.isFinite()) {\n    if (!x.isFinite() && !y.isFinite()) {\n      if (x.isNegative() === y.isNegative()) {\n        return x;\n      }\n\n      return new BigNumber(0);\n    }\n\n    if (!x.isFinite()) {\n      if (y.isNegative()) {\n        return x;\n      }\n\n      if (x.isNegative()) {\n        return new BigNumber(0);\n      }\n\n      return y;\n    }\n\n    if (!y.isFinite()) {\n      if (x.isNegative()) {\n        return y;\n      }\n\n      if (y.isNegative()) {\n        return new BigNumber(0);\n      }\n\n      return x;\n    }\n  }\n\n  return bitwise(x, y, function (a, b) {\n    return a & b;\n  });\n}\n/**\n * Bitwise not\n * @param {BigNumber} x\n * @return {BigNumber} Result of ~`x`, fully precise\n *\n */\n\nexport function bitNotBigNumber(x) {\n  if (x.isFinite() && !x.isInteger()) {\n    throw new Error('Integer expected in function bitNot');\n  }\n\n  var BigNumber = x.constructor;\n  var prevPrec = BigNumber.precision;\n  BigNumber.config({\n    precision: 1E9\n  });\n  var result = x.plus(new BigNumber(1));\n  result.s = -result.s || null;\n  BigNumber.config({\n    precision: prevPrec\n  });\n  return result;\n}\n/**\n * Bitwise OR for BigNumbers\n *\n * Special Cases:\n *   N |  n =  N\n *   n |  0 =  n\n *   n | -1 = -1\n *   n |  n =  n\n *   I |  I =  I\n *  -I | -I = -I\n *   I | -n = -1\n *   I | -I = -1\n *   I |  n =  I\n *  -I |  n = -I\n *  -I | -n = -n\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` | `y`, fully precise\n */\n\nexport function bitOrBigNumber(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function bitOr');\n  }\n\n  var BigNumber = x.constructor;\n\n  if (x.isNaN() || y.isNaN()) {\n    return new BigNumber(NaN);\n  }\n\n  var negOne = new BigNumber(-1);\n\n  if (x.isZero() || y.eq(negOne) || x.eq(y)) {\n    return y;\n  }\n\n  if (y.isZero() || x.eq(negOne)) {\n    return x;\n  }\n\n  if (!x.isFinite() || !y.isFinite()) {\n    if (!x.isFinite() && !x.isNegative() && y.isNegative() || x.isNegative() && !y.isNegative() && !y.isFinite()) {\n      return negOne;\n    }\n\n    if (x.isNegative() && y.isNegative()) {\n      return x.isFinite() ? x : y;\n    }\n\n    return x.isFinite() ? y : x;\n  }\n\n  return bitwise(x, y, function (a, b) {\n    return a | b;\n  });\n}\n/**\n * Applies bitwise function to numbers\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @param {function (a, b)} func\n * @return {BigNumber}\n */\n\nexport function bitwise(x, y, func) {\n  var BigNumber = x.constructor;\n  var xBits, yBits;\n  var xSign = +(x.s < 0);\n  var ySign = +(y.s < 0);\n\n  if (xSign) {\n    xBits = decCoefficientToBinaryString(bitNotBigNumber(x));\n\n    for (var i = 0; i < xBits.length; ++i) {\n      xBits[i] ^= 1;\n    }\n  } else {\n    xBits = decCoefficientToBinaryString(x);\n  }\n\n  if (ySign) {\n    yBits = decCoefficientToBinaryString(bitNotBigNumber(y));\n\n    for (var _i = 0; _i < yBits.length; ++_i) {\n      yBits[_i] ^= 1;\n    }\n  } else {\n    yBits = decCoefficientToBinaryString(y);\n  }\n\n  var minBits, maxBits, minSign;\n\n  if (xBits.length <= yBits.length) {\n    minBits = xBits;\n    maxBits = yBits;\n    minSign = xSign;\n  } else {\n    minBits = yBits;\n    maxBits = xBits;\n    minSign = ySign;\n  }\n\n  var shortLen = minBits.length;\n  var longLen = maxBits.length;\n  var expFuncVal = func(xSign, ySign) ^ 1;\n  var outVal = new BigNumber(expFuncVal ^ 1);\n  var twoPower = new BigNumber(1);\n  var two = new BigNumber(2);\n  var prevPrec = BigNumber.precision;\n  BigNumber.config({\n    precision: 1E9\n  });\n\n  while (shortLen > 0) {\n    if (func(minBits[--shortLen], maxBits[--longLen]) === expFuncVal) {\n      outVal = outVal.plus(twoPower);\n    }\n\n    twoPower = twoPower.times(two);\n  }\n\n  while (longLen > 0) {\n    if (func(minSign, maxBits[--longLen]) === expFuncVal) {\n      outVal = outVal.plus(twoPower);\n    }\n\n    twoPower = twoPower.times(two);\n  }\n\n  BigNumber.config({\n    precision: prevPrec\n  });\n\n  if (expFuncVal === 0) {\n    outVal.s = -outVal.s;\n  }\n\n  return outVal;\n}\n/* Extracted from decimal.js, and edited to specialize. */\n\nfunction decCoefficientToBinaryString(x) {\n  // Convert to string\n  var a = x.d; // array with digits\n\n  var r = a[0] + '';\n\n  for (var i = 1; i < a.length; ++i) {\n    var s = a[i] + '';\n\n    for (var z = 7 - s.length; z--;) {\n      s = '0' + s;\n    }\n\n    r += s;\n  }\n\n  var j = r.length;\n\n  while (r.charAt(j) === '0') {\n    j--;\n  }\n\n  var xe = x.e;\n  var str = r.slice(0, j + 1 || 1);\n  var strL = str.length;\n\n  if (xe > 0) {\n    if (++xe > strL) {\n      // Append zeros.\n      xe -= strL;\n\n      while (xe--) {\n        str += '0';\n      }\n    } else if (xe < strL) {\n      str = str.slice(0, xe) + '.' + str.slice(xe);\n    }\n  } // Convert from base 10 (decimal) to base 2\n\n\n  var arr = [0];\n\n  for (var _i2 = 0; _i2 < str.length;) {\n    var arrL = arr.length;\n\n    while (arrL--) {\n      arr[arrL] *= 10;\n    }\n\n    arr[0] += parseInt(str.charAt(_i2++)); // convert to int\n\n    for (var _j = 0; _j < arr.length; ++_j) {\n      if (arr[_j] > 1) {\n        if (arr[_j + 1] === null || arr[_j + 1] === undefined) {\n          arr[_j + 1] = 0;\n        }\n\n        arr[_j + 1] += arr[_j] >> 1;\n        arr[_j] &= 1;\n      }\n    }\n  }\n\n  return arr.reverse();\n}\n/**\n * Bitwise XOR for BigNumbers\n *\n * Special Cases:\n *   N ^  n =  N\n *   n ^  0 =  n\n *   n ^  n =  0\n *   n ^ -1 = ~n\n *   I ^  n =  I\n *   I ^ -n = -I\n *   I ^ -I = -1\n *  -I ^  n = -I\n *  -I ^ -n =  I\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` ^ `y`, fully precise\n *\n */\n\n\nexport function bitXor(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function bitXor');\n  }\n\n  var BigNumber = x.constructor;\n\n  if (x.isNaN() || y.isNaN()) {\n    return new BigNumber(NaN);\n  }\n\n  if (x.isZero()) {\n    return y;\n  }\n\n  if (y.isZero()) {\n    return x;\n  }\n\n  if (x.eq(y)) {\n    return new BigNumber(0);\n  }\n\n  var negOne = new BigNumber(-1);\n\n  if (x.eq(negOne)) {\n    return bitNotBigNumber(y);\n  }\n\n  if (y.eq(negOne)) {\n    return bitNotBigNumber(x);\n  }\n\n  if (!x.isFinite() || !y.isFinite()) {\n    if (!x.isFinite() && !y.isFinite()) {\n      return negOne;\n    }\n\n    return new BigNumber(x.isNegative() === y.isNegative() ? Infinity : -Infinity);\n  }\n\n  return bitwise(x, y, function (a, b) {\n    return a ^ b;\n  });\n}\n/**\n * Bitwise left shift\n *\n * Special Cases:\n *  n << -n = N\n *  n <<  N = N\n *  N <<  n = N\n *  n <<  0 = n\n *  0 <<  n = 0\n *  I <<  I = N\n *  I <<  n = I\n *  n <<  I = I\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` << `y`\n *\n */\n\nexport function leftShiftBigNumber(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function leftShift');\n  }\n\n  var BigNumber = x.constructor;\n\n  if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {\n    return new BigNumber(NaN);\n  }\n\n  if (x.isZero() || y.isZero()) {\n    return x;\n  }\n\n  if (!x.isFinite() && !y.isFinite()) {\n    return new BigNumber(NaN);\n  } // Math.pow(2, y) is fully precise for y < 55, and fast\n\n\n  if (y.lt(55)) {\n    return x.times(Math.pow(2, y.toNumber()) + '');\n  }\n\n  return x.times(new BigNumber(2).pow(y));\n}\n/*\n * Special Cases:\n *   n >> -n =  N\n *   n >>  N =  N\n *   N >>  n =  N\n *   I >>  I =  N\n *   n >>  0 =  n\n *   I >>  n =  I\n *  -I >>  n = -I\n *  -I >>  I = -I\n *   n >>  I =  I\n *  -n >>  I = -1\n *   0 >>  n =  0\n *\n * @param {BigNumber} value\n * @param {BigNumber} value\n * @return {BigNumber} Result of `x` >> `y`\n *\n */\n\nexport function rightArithShiftBigNumber(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function rightArithShift');\n  }\n\n  var BigNumber = x.constructor;\n\n  if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {\n    return new BigNumber(NaN);\n  }\n\n  if (x.isZero() || y.isZero()) {\n    return x;\n  }\n\n  if (!y.isFinite()) {\n    if (x.isNegative()) {\n      return new BigNumber(-1);\n    }\n\n    if (!x.isFinite()) {\n      return new BigNumber(NaN);\n    }\n\n    return new BigNumber(0);\n  } // Math.pow(2, y) is fully precise for y < 55, and fast\n\n\n  if (y.lt(55)) {\n    return x.div(Math.pow(2, y.toNumber()) + '').floor();\n  }\n\n  return x.div(new BigNumber(2).pow(y)).floor();\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}