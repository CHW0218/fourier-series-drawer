{"ast":null,"code":"import { isHelp } from '../utils/is.js';\nimport { clone } from '../utils/object.js';\nimport { format } from '../utils/string.js';\nimport { factory } from '../utils/factory.js';\nvar name = 'Help';\nvar dependencies = ['parse'];\nexport var createHelpClass = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var parse = _ref.parse;\n  /**\n   * Documentation object\n   * @param {Object} doc  Object containing properties:\n   *                      {string} name\n   *                      {string} category\n   *                      {string} description\n   *                      {string[]} syntax\n   *                      {string[]} examples\n   *                      {string[]} seealso\n   * @constructor\n   */\n\n  function Help(doc) {\n    if (!(this instanceof Help)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (!doc) throw new Error('Argument \"doc\" missing');\n    this.doc = doc;\n  }\n  /**\n   * Attach type information\n   */\n\n\n  Help.prototype.type = 'Help';\n  Help.prototype.isHelp = true;\n  /**\n   * Generate a string representation of the Help object\n   * @return {string} Returns a string\n   * @private\n   */\n\n  Help.prototype.toString = function () {\n    var doc = this.doc || {};\n    var desc = '\\n';\n\n    if (doc.name) {\n      desc += 'Name: ' + doc.name + '\\n\\n';\n    }\n\n    if (doc.category) {\n      desc += 'Category: ' + doc.category + '\\n\\n';\n    }\n\n    if (doc.description) {\n      desc += 'Description:\\n    ' + doc.description + '\\n\\n';\n    }\n\n    if (doc.syntax) {\n      desc += 'Syntax:\\n    ' + doc.syntax.join('\\n    ') + '\\n\\n';\n    }\n\n    if (doc.examples) {\n      desc += 'Examples:\\n';\n      var scope = {};\n\n      for (var i = 0; i < doc.examples.length; i++) {\n        var expr = doc.examples[i];\n        desc += '    ' + expr + '\\n';\n        var res = void 0;\n\n        try {\n          // note: res can be undefined when `expr` is an empty string\n          res = parse(expr).compile().evaluate(scope);\n        } catch (e) {\n          res = e;\n        }\n\n        if (res !== undefined && !isHelp(res)) {\n          desc += '        ' + format(res, {\n            precision: 14\n          }) + '\\n';\n        }\n      }\n\n      desc += '\\n';\n    }\n\n    if (doc.mayThrow && doc.mayThrow.length) {\n      desc += 'Throws: ' + doc.mayThrow.join(', ') + '\\n\\n';\n    }\n\n    if (doc.seealso && doc.seealso.length) {\n      desc += 'See also: ' + doc.seealso.join(', ') + '\\n';\n    }\n\n    return desc;\n  };\n  /**\n   * Export the help object to JSON\n   */\n\n\n  Help.prototype.toJSON = function () {\n    var obj = clone(this.doc);\n    obj.mathjs = 'Help';\n    return obj;\n  };\n  /**\n   * Instantiate a Help object from a JSON object\n   * @param {Object} json\n   * @returns {Help} Returns a new Help object\n   */\n\n\n  Help.fromJSON = function (json) {\n    var doc = {};\n    Object.keys(json).filter(function (prop) {\n      return prop !== 'mathjs';\n    }).forEach(function (prop) {\n      doc[prop] = json[prop];\n    });\n    return new Help(doc);\n  };\n  /**\n   * Returns a string representation of the Help object\n   */\n\n\n  Help.prototype.valueOf = Help.prototype.toString;\n  return Help;\n}, {\n  isClass: true\n});","map":{"version":3,"names":["isHelp","clone","format","factory","name","dependencies","createHelpClass","_ref","parse","Help","doc","SyntaxError","Error","prototype","type","toString","desc","category","description","syntax","join","examples","scope","i","length","expr","res","compile","evaluate","e","undefined","precision","mayThrow","seealso","toJSON","obj","mathjs","fromJSON","json","Object","keys","filter","prop","forEach","valueOf","isClass"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/expression/Help.js"],"sourcesContent":["import { isHelp } from '../utils/is.js';\nimport { clone } from '../utils/object.js';\nimport { format } from '../utils/string.js';\nimport { factory } from '../utils/factory.js';\nvar name = 'Help';\nvar dependencies = ['parse'];\nexport var createHelpClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    parse\n  } = _ref;\n\n  /**\n   * Documentation object\n   * @param {Object} doc  Object containing properties:\n   *                      {string} name\n   *                      {string} category\n   *                      {string} description\n   *                      {string[]} syntax\n   *                      {string[]} examples\n   *                      {string[]} seealso\n   * @constructor\n   */\n  function Help(doc) {\n    if (!(this instanceof Help)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (!doc) throw new Error('Argument \"doc\" missing');\n    this.doc = doc;\n  }\n  /**\n   * Attach type information\n   */\n\n\n  Help.prototype.type = 'Help';\n  Help.prototype.isHelp = true;\n  /**\n   * Generate a string representation of the Help object\n   * @return {string} Returns a string\n   * @private\n   */\n\n  Help.prototype.toString = function () {\n    var doc = this.doc || {};\n    var desc = '\\n';\n\n    if (doc.name) {\n      desc += 'Name: ' + doc.name + '\\n\\n';\n    }\n\n    if (doc.category) {\n      desc += 'Category: ' + doc.category + '\\n\\n';\n    }\n\n    if (doc.description) {\n      desc += 'Description:\\n    ' + doc.description + '\\n\\n';\n    }\n\n    if (doc.syntax) {\n      desc += 'Syntax:\\n    ' + doc.syntax.join('\\n    ') + '\\n\\n';\n    }\n\n    if (doc.examples) {\n      desc += 'Examples:\\n';\n      var scope = {};\n\n      for (var i = 0; i < doc.examples.length; i++) {\n        var expr = doc.examples[i];\n        desc += '    ' + expr + '\\n';\n        var res = void 0;\n\n        try {\n          // note: res can be undefined when `expr` is an empty string\n          res = parse(expr).compile().evaluate(scope);\n        } catch (e) {\n          res = e;\n        }\n\n        if (res !== undefined && !isHelp(res)) {\n          desc += '        ' + format(res, {\n            precision: 14\n          }) + '\\n';\n        }\n      }\n\n      desc += '\\n';\n    }\n\n    if (doc.mayThrow && doc.mayThrow.length) {\n      desc += 'Throws: ' + doc.mayThrow.join(', ') + '\\n\\n';\n    }\n\n    if (doc.seealso && doc.seealso.length) {\n      desc += 'See also: ' + doc.seealso.join(', ') + '\\n';\n    }\n\n    return desc;\n  };\n  /**\n   * Export the help object to JSON\n   */\n\n\n  Help.prototype.toJSON = function () {\n    var obj = clone(this.doc);\n    obj.mathjs = 'Help';\n    return obj;\n  };\n  /**\n   * Instantiate a Help object from a JSON object\n   * @param {Object} json\n   * @returns {Help} Returns a new Help object\n   */\n\n\n  Help.fromJSON = function (json) {\n    var doc = {};\n    Object.keys(json).filter(prop => prop !== 'mathjs').forEach(prop => {\n      doc[prop] = json[prop];\n    });\n    return new Help(doc);\n  };\n  /**\n   * Returns a string representation of the Help object\n   */\n\n\n  Help.prototype.valueOf = Help.prototype.toString;\n  return Help;\n}, {\n  isClass: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}