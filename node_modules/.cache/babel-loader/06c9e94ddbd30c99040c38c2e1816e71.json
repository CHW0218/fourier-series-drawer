{"ast":null,"code":"import { factory } from '../../../utils/factory.js';\nimport { createSolveValidation } from './utils/solveValidation.js';\nvar name = 'lsolve';\nvar dependencies = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtract', 'equalScalar', 'DenseMatrix'];\nexport var createLsolve = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      divideScalar = _ref.divideScalar,\n      multiplyScalar = _ref.multiplyScalar,\n      subtract = _ref.subtract,\n      equalScalar = _ref.equalScalar,\n      DenseMatrix = _ref.DenseMatrix;\n  var solveValidation = createSolveValidation({\n    DenseMatrix: DenseMatrix\n  });\n  /**\n   * Finds one solution of a linear equation system by forwards substitution. Matrix must be a lower triangular matrix. Throws an error if there's no solution.\n   *\n   * `L * x = b`\n   *\n   * Syntax:\n   *\n   *    math.lsolve(L, b)\n   *\n   * Examples:\n   *\n   *    const a = [[-2, 3], [2, 1]]\n   *    const b = [11, 9]\n   *    const x = lsolve(a, b)  // [[-5.5], [20]]\n   *\n   * See also:\n   *\n   *    lsolveAll, lup, slu, usolve, lusolve\n   *\n   * @param {Matrix, Array} L       A N x N matrix or array (L)\n   * @param {Matrix, Array} b       A column vector with the b values\n   *\n   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)\n   */\n\n  return typed(name, {\n    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {\n      return _sparseForwardSubstitution(m, b);\n    },\n    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {\n      return _denseForwardSubstitution(m, b);\n    },\n    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {\n      var m = matrix(a);\n\n      var r = _denseForwardSubstitution(m, b);\n\n      return r.valueOf();\n    }\n  });\n\n  function _denseForwardSubstitution(m, b) {\n    // validate matrix and vector, return copy of column vector b\n    b = solveValidation(m, b, true);\n    var bdata = b._data;\n    var rows = m._size[0];\n    var columns = m._size[1]; // result\n\n    var x = [];\n    var mdata = m._data; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      var bj = bdata[j][0] || 0;\n      var xj = void 0;\n\n      if (!equalScalar(bj, 0)) {\n        // non-degenerate row, find solution\n        var vjj = mdata[j][j];\n\n        if (equalScalar(vjj, 0)) {\n          throw new Error('Linear system cannot be solved since matrix is singular');\n        }\n\n        xj = divideScalar(bj, vjj); // loop rows\n\n        for (var i = j + 1; i < rows; i++) {\n          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, mdata[i][j]))];\n        }\n      } else {\n        // degenerate row, we can choose any value\n        xj = 0;\n      }\n\n      x[j] = [xj];\n    }\n\n    return new DenseMatrix({\n      data: x,\n      size: [rows, 1]\n    });\n  }\n\n  function _sparseForwardSubstitution(m, b) {\n    // validate matrix and vector, return copy of column vector b\n    b = solveValidation(m, b, true);\n    var bdata = b._data;\n    var rows = m._size[0];\n    var columns = m._size[1];\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr; // result\n\n    var x = []; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      var bj = bdata[j][0] || 0;\n\n      if (!equalScalar(bj, 0)) {\n        // non-degenerate row, find solution\n        var vjj = 0; // matrix values & indices (column j)\n\n        var jValues = [];\n        var jIndices = []; // first and last index in the column\n\n        var firstIndex = ptr[j];\n        var lastIndex = ptr[j + 1]; // values in column, find value at [j, j]\n\n        for (var k = firstIndex; k < lastIndex; k++) {\n          var i = index[k]; // check row (rows are not sorted!)\n\n          if (i === j) {\n            vjj = values[k];\n          } else if (i > j) {\n            // store lower triangular\n            jValues.push(values[k]);\n            jIndices.push(i);\n          }\n        } // at this point we must have a value in vjj\n\n\n        if (equalScalar(vjj, 0)) {\n          throw new Error('Linear system cannot be solved since matrix is singular');\n        }\n\n        var xj = divideScalar(bj, vjj);\n\n        for (var _k = 0, l = jIndices.length; _k < l; _k++) {\n          var _i = jIndices[_k];\n          bdata[_i] = [subtract(bdata[_i][0] || 0, multiplyScalar(xj, jValues[_k]))];\n        }\n\n        x[j] = [xj];\n      } else {\n        // degenerate row, we can choose any value\n        x[j] = [0];\n      }\n    }\n\n    return new DenseMatrix({\n      data: x,\n      size: [rows, 1]\n    });\n  }\n});","map":{"version":3,"names":["factory","createSolveValidation","name","dependencies","createLsolve","_ref","typed","matrix","divideScalar","multiplyScalar","subtract","equalScalar","DenseMatrix","solveValidation","SparseMatrixArrayMatrix","m","b","_sparseForwardSubstitution","DenseMatrixArrayMatrix","_denseForwardSubstitution","ArrayArrayMatrix","a","r","valueOf","bdata","_data","rows","_size","columns","x","mdata","j","bj","xj","vjj","Error","i","data","size","values","_values","index","_index","ptr","_ptr","jValues","jIndices","firstIndex","lastIndex","k","push","_k","l","length","_i"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/function/algebra/solver/lsolve.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\nimport { createSolveValidation } from './utils/solveValidation.js';\nvar name = 'lsolve';\nvar dependencies = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtract', 'equalScalar', 'DenseMatrix'];\nexport var createLsolve = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    divideScalar,\n    multiplyScalar,\n    subtract,\n    equalScalar,\n    DenseMatrix\n  } = _ref;\n  var solveValidation = createSolveValidation({\n    DenseMatrix\n  });\n  /**\n   * Finds one solution of a linear equation system by forwards substitution. Matrix must be a lower triangular matrix. Throws an error if there's no solution.\n   *\n   * `L * x = b`\n   *\n   * Syntax:\n   *\n   *    math.lsolve(L, b)\n   *\n   * Examples:\n   *\n   *    const a = [[-2, 3], [2, 1]]\n   *    const b = [11, 9]\n   *    const x = lsolve(a, b)  // [[-5.5], [20]]\n   *\n   * See also:\n   *\n   *    lsolveAll, lup, slu, usolve, lusolve\n   *\n   * @param {Matrix, Array} L       A N x N matrix or array (L)\n   * @param {Matrix, Array} b       A column vector with the b values\n   *\n   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)\n   */\n\n  return typed(name, {\n    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {\n      return _sparseForwardSubstitution(m, b);\n    },\n    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {\n      return _denseForwardSubstitution(m, b);\n    },\n    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {\n      var m = matrix(a);\n\n      var r = _denseForwardSubstitution(m, b);\n\n      return r.valueOf();\n    }\n  });\n\n  function _denseForwardSubstitution(m, b) {\n    // validate matrix and vector, return copy of column vector b\n    b = solveValidation(m, b, true);\n    var bdata = b._data;\n    var rows = m._size[0];\n    var columns = m._size[1]; // result\n\n    var x = [];\n    var mdata = m._data; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      var bj = bdata[j][0] || 0;\n      var xj = void 0;\n\n      if (!equalScalar(bj, 0)) {\n        // non-degenerate row, find solution\n        var vjj = mdata[j][j];\n\n        if (equalScalar(vjj, 0)) {\n          throw new Error('Linear system cannot be solved since matrix is singular');\n        }\n\n        xj = divideScalar(bj, vjj); // loop rows\n\n        for (var i = j + 1; i < rows; i++) {\n          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, mdata[i][j]))];\n        }\n      } else {\n        // degenerate row, we can choose any value\n        xj = 0;\n      }\n\n      x[j] = [xj];\n    }\n\n    return new DenseMatrix({\n      data: x,\n      size: [rows, 1]\n    });\n  }\n\n  function _sparseForwardSubstitution(m, b) {\n    // validate matrix and vector, return copy of column vector b\n    b = solveValidation(m, b, true);\n    var bdata = b._data;\n    var rows = m._size[0];\n    var columns = m._size[1];\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr; // result\n\n    var x = []; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      var bj = bdata[j][0] || 0;\n\n      if (!equalScalar(bj, 0)) {\n        // non-degenerate row, find solution\n        var vjj = 0; // matrix values & indices (column j)\n\n        var jValues = [];\n        var jIndices = []; // first and last index in the column\n\n        var firstIndex = ptr[j];\n        var lastIndex = ptr[j + 1]; // values in column, find value at [j, j]\n\n        for (var k = firstIndex; k < lastIndex; k++) {\n          var i = index[k]; // check row (rows are not sorted!)\n\n          if (i === j) {\n            vjj = values[k];\n          } else if (i > j) {\n            // store lower triangular\n            jValues.push(values[k]);\n            jIndices.push(i);\n          }\n        } // at this point we must have a value in vjj\n\n\n        if (equalScalar(vjj, 0)) {\n          throw new Error('Linear system cannot be solved since matrix is singular');\n        }\n\n        var xj = divideScalar(bj, vjj);\n\n        for (var _k = 0, l = jIndices.length; _k < l; _k++) {\n          var _i = jIndices[_k];\n          bdata[_i] = [subtract(bdata[_i][0] || 0, multiplyScalar(xj, jValues[_k]))];\n        }\n\n        x[j] = [xj];\n      } else {\n        // degenerate row, we can choose any value\n        x[j] = [0];\n      }\n    }\n\n    return new DenseMatrix({\n      data: x,\n      size: [rows, 1]\n    });\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}