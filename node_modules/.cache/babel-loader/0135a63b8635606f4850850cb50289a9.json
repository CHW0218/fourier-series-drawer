{"ast":null,"code":"import { isConstantNode } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'symbolicEqual';\nvar dependencies = ['parse', 'simplify', 'typed', 'OperatorNode'];\nexport var createSymbolicEqual = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var parse = _ref.parse,\n      simplify = _ref.simplify,\n      typed = _ref.typed,\n      OperatorNode = _ref.OperatorNode;\n  /**\n   * Attempts to determine if two expressions are symbolically equal, i.e.\n   * one is the result of valid algebraic manipulations on the other.\n   * Currently, this simply checks if the difference of the two expressions\n   * simplifies down to 0. So there are two important caveats:\n   * 1. whether two expressions are symbolically equal depends on the\n   *     manipulations allowed. Therefore, this function takes an optional\n   *     third argument, which are the options that control the behavior\n   *     as documented for the `simplify()` function.\n   * 2. it is in general intractable to find the minimal simplification of\n   *     an arbitrarily complicated expression. So while a `true` value\n   *     of `symbolicEqual` ensures that the two expressions can be manipulated\n   *     to match each other, a `false` value does not absolutely rule this out.\n   *\n   * Syntax:\n   *\n   *    symbolicEqual(expr1, expr2)\n   *    symbolicEqual(expr1, expr2, options)\n   *\n   * Examples:\n   *\n   *    symbolicEqual('x*y', 'y*x') // true\n   *    symbolicEqual('x*y', 'y*x', {context: {multiply: {commutative: false}}})\n   *        //false\n   *    symbolicEqual('x/y', '(y*x^(-1))^(-1)') // true\n   *    symbolicEqual('abs(x)','x') // false\n   *    symbolicEqual('abs(x)','x', simplify.positiveContext) // true\n   *\n   * See also:\n   *\n   *    simplify, evaluate\n   *\n   * @param {Node|string} expr1  The first expression to compare\n   * @param {Node|string} expr2  The second expression to compare\n   * @param {Object} [options] Optional option object, passed to simplify\n   * @returns {boolean}\n   *     Returns true if a valid manipulation making the expressions equal\n   *     is found.\n   */\n\n  return typed(name, {\n    'string, string': function stringString(s1, s2) {\n      return this(parse(s1), parse(s2), {});\n    },\n    'string, string, Object': function stringStringObject(s1, s2, options) {\n      return this(parse(s1), parse(s2), options);\n    },\n    'Node, string': function NodeString(e1, s2) {\n      return this(e1, parse(s2), {});\n    },\n    'Node, string, Object': function NodeStringObject(e1, s2, options) {\n      return this(e1, parse(s2), options);\n    },\n    'string, Node': function stringNode(s1, e2) {\n      return this(parse(s1), e2, {});\n    },\n    'string, Node, Object': function stringNodeObject(s1, e2, options) {\n      return this(parse(s1), e2, options);\n    },\n    'Node, Node': function NodeNode(e1, e2) {\n      return this(e1, e2, {});\n    },\n    'Node, Node, Object': function NodeNodeObject(e1, e2, options) {\n      var diff = new OperatorNode('-', 'subtract', [e1, e2]);\n      var simplified = simplify(diff, {}, options);\n      return isConstantNode(simplified) && !simplified.value;\n    }\n  });\n});","map":{"version":3,"names":["isConstantNode","factory","name","dependencies","createSymbolicEqual","_ref","parse","simplify","typed","OperatorNode","stringString","s1","s2","stringStringObject","options","NodeString","e1","NodeStringObject","stringNode","e2","stringNodeObject","NodeNode","NodeNodeObject","diff","simplified","value"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/function/algebra/symbolicEqual.js"],"sourcesContent":["import { isConstantNode } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'symbolicEqual';\nvar dependencies = ['parse', 'simplify', 'typed', 'OperatorNode'];\nexport var createSymbolicEqual = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    parse,\n    simplify,\n    typed,\n    OperatorNode\n  } = _ref;\n\n  /**\n   * Attempts to determine if two expressions are symbolically equal, i.e.\n   * one is the result of valid algebraic manipulations on the other.\n   * Currently, this simply checks if the difference of the two expressions\n   * simplifies down to 0. So there are two important caveats:\n   * 1. whether two expressions are symbolically equal depends on the\n   *     manipulations allowed. Therefore, this function takes an optional\n   *     third argument, which are the options that control the behavior\n   *     as documented for the `simplify()` function.\n   * 2. it is in general intractable to find the minimal simplification of\n   *     an arbitrarily complicated expression. So while a `true` value\n   *     of `symbolicEqual` ensures that the two expressions can be manipulated\n   *     to match each other, a `false` value does not absolutely rule this out.\n   *\n   * Syntax:\n   *\n   *    symbolicEqual(expr1, expr2)\n   *    symbolicEqual(expr1, expr2, options)\n   *\n   * Examples:\n   *\n   *    symbolicEqual('x*y', 'y*x') // true\n   *    symbolicEqual('x*y', 'y*x', {context: {multiply: {commutative: false}}})\n   *        //false\n   *    symbolicEqual('x/y', '(y*x^(-1))^(-1)') // true\n   *    symbolicEqual('abs(x)','x') // false\n   *    symbolicEqual('abs(x)','x', simplify.positiveContext) // true\n   *\n   * See also:\n   *\n   *    simplify, evaluate\n   *\n   * @param {Node|string} expr1  The first expression to compare\n   * @param {Node|string} expr2  The second expression to compare\n   * @param {Object} [options] Optional option object, passed to simplify\n   * @returns {boolean}\n   *     Returns true if a valid manipulation making the expressions equal\n   *     is found.\n   */\n  return typed(name, {\n    'string, string': function stringString(s1, s2) {\n      return this(parse(s1), parse(s2), {});\n    },\n    'string, string, Object': function stringStringObject(s1, s2, options) {\n      return this(parse(s1), parse(s2), options);\n    },\n    'Node, string': function NodeString(e1, s2) {\n      return this(e1, parse(s2), {});\n    },\n    'Node, string, Object': function NodeStringObject(e1, s2, options) {\n      return this(e1, parse(s2), options);\n    },\n    'string, Node': function stringNode(s1, e2) {\n      return this(parse(s1), e2, {});\n    },\n    'string, Node, Object': function stringNodeObject(s1, e2, options) {\n      return this(parse(s1), e2, options);\n    },\n    'Node, Node': function NodeNode(e1, e2) {\n      return this(e1, e2, {});\n    },\n    'Node, Node, Object': function NodeNodeObject(e1, e2, options) {\n      var diff = new OperatorNode('-', 'subtract', [e1, e2]);\n      var simplified = simplify(diff, {}, options);\n      return isConstantNode(simplified) && !simplified.value;\n    }\n  });\n});"],"mappings":"AAAA,SAASA,cAAT,QAA+B,mBAA/B;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,eAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,UAAV,EAAsB,OAAtB,EAA+B,cAA/B,CAAnB;AACA,OAAO,IAAIC,mBAAmB,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EAClF,IACEC,KADF,GAKID,IALJ,CACEC,KADF;EAAA,IAEEC,QAFF,GAKIF,IALJ,CAEEE,QAFF;EAAA,IAGEC,KAHF,GAKIH,IALJ,CAGEG,KAHF;EAAA,IAIEC,YAJF,GAKIJ,IALJ,CAIEI,YAJF;EAOA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOD,KAAK,CAACN,IAAD,EAAO;IACjB,kBAAkB,SAASQ,YAAT,CAAsBC,EAAtB,EAA0BC,EAA1B,EAA8B;MAC9C,OAAO,KAAKN,KAAK,CAACK,EAAD,CAAV,EAAgBL,KAAK,CAACM,EAAD,CAArB,EAA2B,EAA3B,CAAP;IACD,CAHgB;IAIjB,0BAA0B,SAASC,kBAAT,CAA4BF,EAA5B,EAAgCC,EAAhC,EAAoCE,OAApC,EAA6C;MACrE,OAAO,KAAKR,KAAK,CAACK,EAAD,CAAV,EAAgBL,KAAK,CAACM,EAAD,CAArB,EAA2BE,OAA3B,CAAP;IACD,CANgB;IAOjB,gBAAgB,SAASC,UAAT,CAAoBC,EAApB,EAAwBJ,EAAxB,EAA4B;MAC1C,OAAO,KAAKI,EAAL,EAASV,KAAK,CAACM,EAAD,CAAd,EAAoB,EAApB,CAAP;IACD,CATgB;IAUjB,wBAAwB,SAASK,gBAAT,CAA0BD,EAA1B,EAA8BJ,EAA9B,EAAkCE,OAAlC,EAA2C;MACjE,OAAO,KAAKE,EAAL,EAASV,KAAK,CAACM,EAAD,CAAd,EAAoBE,OAApB,CAAP;IACD,CAZgB;IAajB,gBAAgB,SAASI,UAAT,CAAoBP,EAApB,EAAwBQ,EAAxB,EAA4B;MAC1C,OAAO,KAAKb,KAAK,CAACK,EAAD,CAAV,EAAgBQ,EAAhB,EAAoB,EAApB,CAAP;IACD,CAfgB;IAgBjB,wBAAwB,SAASC,gBAAT,CAA0BT,EAA1B,EAA8BQ,EAA9B,EAAkCL,OAAlC,EAA2C;MACjE,OAAO,KAAKR,KAAK,CAACK,EAAD,CAAV,EAAgBQ,EAAhB,EAAoBL,OAApB,CAAP;IACD,CAlBgB;IAmBjB,cAAc,SAASO,QAAT,CAAkBL,EAAlB,EAAsBG,EAAtB,EAA0B;MACtC,OAAO,KAAKH,EAAL,EAASG,EAAT,EAAa,EAAb,CAAP;IACD,CArBgB;IAsBjB,sBAAsB,SAASG,cAAT,CAAwBN,EAAxB,EAA4BG,EAA5B,EAAgCL,OAAhC,EAAyC;MAC7D,IAAIS,IAAI,GAAG,IAAId,YAAJ,CAAiB,GAAjB,EAAsB,UAAtB,EAAkC,CAACO,EAAD,EAAKG,EAAL,CAAlC,CAAX;MACA,IAAIK,UAAU,GAAGjB,QAAQ,CAACgB,IAAD,EAAO,EAAP,EAAWT,OAAX,CAAzB;MACA,OAAOd,cAAc,CAACwB,UAAD,CAAd,IAA8B,CAACA,UAAU,CAACC,KAAjD;IACD;EA1BgB,CAAP,CAAZ;AA4BD,CA3EsD,CAAhD"},"metadata":{},"sourceType":"module"}