{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { extend } from '../../utils/object.js';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nvar name = 'divide';\nvar dependencies = ['typed', 'matrix', 'multiply', 'equalScalar', 'divideScalar', 'inv'];\nexport var createDivide = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      multiply = _ref.multiply,\n      equalScalar = _ref.equalScalar,\n      divideScalar = _ref.divideScalar,\n      inv = _ref.inv;\n  var algorithm11 = createAlgorithm11({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm14 = createAlgorithm14({\n    typed: typed\n  });\n  /**\n   * Divide two values, `x / y`.\n   * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.\n   *\n   * Syntax:\n   *\n   *    math.divide(x, y)\n   *\n   * Examples:\n   *\n   *    math.divide(2, 3)            // returns number 0.6666666666666666\n   *\n   *    const a = math.complex(5, 14)\n   *    const b = math.complex(4, 1)\n   *    math.divide(a, b)            // returns Complex 2 + 3i\n   *\n   *    const c = [[7, -6], [13, -4]]\n   *    const d = [[1, 2], [4, 3]]\n   *    math.divide(c, d)            // returns Array [[-9, 4], [-11, 6]]\n   *\n   *    const e = math.unit('18 km')\n   *    math.divide(e, 4.5)          // returns Unit 4 km\n   *\n   * See also:\n   *\n   *    multiply\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x   Numerator\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} y          Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`\n   */\n\n  return typed('divide', extend({\n    // we extend the signatures of divideScalar with signatures dealing with matrices\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(x, y) {\n      // TODO: implement matrix right division using pseudo inverse\n      // https://www.mathworks.nl/help/matlab/ref/mrdivide.html\n      // https://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html\n      // https://stackoverflow.com/questions/12263932/how-does-gnu-octave-matrix-division-work-getting-unexpected-behaviour\n      return multiply(x, inv(y));\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, divideScalar, false);\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm11(x, y, divideScalar, false);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, divideScalar, false).valueOf();\n    },\n    'any, Array | Matrix': function anyArrayMatrix(x, y) {\n      return multiply(x, inv(y));\n    }\n  }, divideScalar.signatures));\n});","map":{"version":3,"names":["factory","extend","createAlgorithm11","createAlgorithm14","name","dependencies","createDivide","_ref","typed","matrix","multiply","equalScalar","divideScalar","inv","algorithm11","algorithm14","ArrayMatrixArrayMatrix","x","y","DenseMatrixAny","SparseMatrixAny","ArrayAny","valueOf","anyArrayMatrix","signatures"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/function/arithmetic/divide.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { extend } from '../../utils/object.js';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nvar name = 'divide';\nvar dependencies = ['typed', 'matrix', 'multiply', 'equalScalar', 'divideScalar', 'inv'];\nexport var createDivide = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    multiply,\n    equalScalar,\n    divideScalar,\n    inv\n  } = _ref;\n  var algorithm11 = createAlgorithm11({\n    typed,\n    equalScalar\n  });\n  var algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Divide two values, `x / y`.\n   * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.\n   *\n   * Syntax:\n   *\n   *    math.divide(x, y)\n   *\n   * Examples:\n   *\n   *    math.divide(2, 3)            // returns number 0.6666666666666666\n   *\n   *    const a = math.complex(5, 14)\n   *    const b = math.complex(4, 1)\n   *    math.divide(a, b)            // returns Complex 2 + 3i\n   *\n   *    const c = [[7, -6], [13, -4]]\n   *    const d = [[1, 2], [4, 3]]\n   *    math.divide(c, d)            // returns Array [[-9, 4], [-11, 6]]\n   *\n   *    const e = math.unit('18 km')\n   *    math.divide(e, 4.5)          // returns Unit 4 km\n   *\n   * See also:\n   *\n   *    multiply\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x   Numerator\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} y          Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`\n   */\n\n  return typed('divide', extend({\n    // we extend the signatures of divideScalar with signatures dealing with matrices\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(x, y) {\n      // TODO: implement matrix right division using pseudo inverse\n      // https://www.mathworks.nl/help/matlab/ref/mrdivide.html\n      // https://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html\n      // https://stackoverflow.com/questions/12263932/how-does-gnu-octave-matrix-division-work-getting-unexpected-behaviour\n      return multiply(x, inv(y));\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, divideScalar, false);\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm11(x, y, divideScalar, false);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, divideScalar, false).valueOf();\n    },\n    'any, Array | Matrix': function anyArrayMatrix(x, y) {\n      return multiply(x, inv(y));\n    }\n  }, divideScalar.signatures));\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,iBAAT,QAAkC,wCAAlC;AACA,SAASC,iBAAT,QAAkC,wCAAlC;AACA,IAAIC,IAAI,GAAG,QAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,UAApB,EAAgC,aAAhC,EAA+C,cAA/C,EAA+D,KAA/D,CAAnB;AACA,OAAO,IAAIC,YAAY,GAAG,eAAeN,OAAO,CAACI,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EAC3E,IACEC,KADF,GAOID,IAPJ,CACEC,KADF;EAAA,IAEEC,MAFF,GAOIF,IAPJ,CAEEE,MAFF;EAAA,IAGEC,QAHF,GAOIH,IAPJ,CAGEG,QAHF;EAAA,IAIEC,WAJF,GAOIJ,IAPJ,CAIEI,WAJF;EAAA,IAKEC,YALF,GAOIL,IAPJ,CAKEK,YALF;EAAA,IAMEC,GANF,GAOIN,IAPJ,CAMEM,GANF;EAQA,IAAIC,WAAW,GAAGZ,iBAAiB,CAAC;IAClCM,KAAK,EAALA,KADkC;IAElCG,WAAW,EAAXA;EAFkC,CAAD,CAAnC;EAIA,IAAII,WAAW,GAAGZ,iBAAiB,CAAC;IAClCK,KAAK,EAALA;EADkC,CAAD,CAAnC;EAGA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE,OAAOA,KAAK,CAAC,QAAD,EAAWP,MAAM,CAAC;IAC5B;IACA,kCAAkC,SAASe,sBAAT,CAAgCC,CAAhC,EAAmCC,CAAnC,EAAsC;MACtE;MACA;MACA;MACA;MACA,OAAOR,QAAQ,CAACO,CAAD,EAAIJ,GAAG,CAACK,CAAD,CAAP,CAAf;IACD,CAR2B;IAS5B,oBAAoB,SAASC,cAAT,CAAwBF,CAAxB,EAA2BC,CAA3B,EAA8B;MAChD,OAAOH,WAAW,CAACE,CAAD,EAAIC,CAAJ,EAAON,YAAP,EAAqB,KAArB,CAAlB;IACD,CAX2B;IAY5B,qBAAqB,SAASQ,eAAT,CAAyBH,CAAzB,EAA4BC,CAA5B,EAA+B;MAClD,OAAOJ,WAAW,CAACG,CAAD,EAAIC,CAAJ,EAAON,YAAP,EAAqB,KAArB,CAAlB;IACD,CAd2B;IAe5B,cAAc,SAASS,QAAT,CAAkBJ,CAAlB,EAAqBC,CAArB,EAAwB;MACpC;MACA,OAAOH,WAAW,CAACN,MAAM,CAACQ,CAAD,CAAP,EAAYC,CAAZ,EAAeN,YAAf,EAA6B,KAA7B,CAAX,CAA+CU,OAA/C,EAAP;IACD,CAlB2B;IAmB5B,uBAAuB,SAASC,cAAT,CAAwBN,CAAxB,EAA2BC,CAA3B,EAA8B;MACnD,OAAOR,QAAQ,CAACO,CAAD,EAAIJ,GAAG,CAACK,CAAD,CAAP,CAAf;IACD;EArB2B,CAAD,EAsB1BN,YAAY,CAACY,UAtBa,CAAjB,CAAZ;AAuBD,CAvE+C,CAAzC"},"metadata":{},"sourceType":"module"}