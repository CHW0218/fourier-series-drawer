{"ast":null,"code":"/**\n * @license Complex.js v2.1.1 12/05/2020\n *\n * Copyright (c) 2020, Robert Eisele (robert@xarg.org)\n * Dual licensed under the MIT or GPL Version 2 licenses.\n **/\n\n/**\n *\n * This class allows the manipulation of complex numbers.\n * You can pass a complex number in different formats. Either as object, double, string or two integer parameters.\n *\n * Object form\n * { re: <real>, im: <imaginary> }\n * { arg: <angle>, abs: <radius> }\n * { phi: <angle>, r: <radius> }\n *\n * Array / Vector form\n * [ real, imaginary ]\n *\n * Double form\n * 99.3 - Single double value\n *\n * String form\n * '23.1337' - Simple real number\n * '15+3i' - a simple complex number\n * '3-i' - a simple complex number\n *\n * Example:\n *\n * var c = new Complex('99.3+8i');\n * c.mul({r: 3, i: 9}).div(4.9).sub(3, 2);\n *\n */\n(function (root) {\n  'use strict';\n\n  var _cosh = Math.cosh || function (x) {\n    return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;\n  };\n\n  var _sinh = Math.sinh || function (x) {\n    return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;\n  };\n  /**\n   * Calculates cos(x) - 1 using Taylor series if x is small (-¼π ≤ x ≤ ¼π).\n   *\n   * @param {number} x\n   * @returns {number} cos(x) - 1\n   */\n\n\n  var cosm1 = function cosm1(x) {\n    var b = Math.PI / 4;\n\n    if (-b > x || x > b) {\n      return Math.cos(x) - 1.0;\n    }\n    /* Calculate horner form of polynomial of taylor series in Q\n    var fac = 1, alt = 1, pol = {};\n    for (var i = 0; i <= 16; i++) {\n      fac*= i || 1;\n      if (i % 2 == 0) {\n        pol[i] = new Fraction(1, alt * fac);\n        alt = -alt;\n      }\n    }\n    console.log(new Polynomial(pol).toHorner()); // (((((((1/20922789888000x^2-1/87178291200)x^2+1/479001600)x^2-1/3628800)x^2+1/40320)x^2-1/720)x^2+1/24)x^2-1/2)x^2+1\n    */\n\n\n    var xx = x * x;\n    return xx * (xx * (xx * (xx * (xx * (xx * (xx * (xx / 20922789888000 - 1 / 87178291200) + 1 / 479001600) - 1 / 3628800) + 1 / 40320) - 1 / 720) + 1 / 24) - 1 / 2);\n  };\n\n  var hypot = function hypot(x, y) {\n    var a = Math.abs(x);\n    var b = Math.abs(y);\n\n    if (a < 3000 && b < 3000) {\n      return Math.sqrt(a * a + b * b);\n    }\n\n    if (a < b) {\n      a = b;\n      b = x / y;\n    } else {\n      b = y / x;\n    }\n\n    return a * Math.sqrt(1 + b * b);\n  };\n\n  var parser_exit = function parser_exit() {\n    throw SyntaxError('Invalid Param');\n  };\n  /**\n   * Calculates log(sqrt(a^2+b^2)) in a way to avoid overflows\n   *\n   * @param {number} a\n   * @param {number} b\n   * @returns {number}\n   */\n\n\n  function logHypot(a, b) {\n    var _a = Math.abs(a);\n\n    var _b = Math.abs(b);\n\n    if (a === 0) {\n      return Math.log(_b);\n    }\n\n    if (b === 0) {\n      return Math.log(_a);\n    }\n\n    if (_a < 3000 && _b < 3000) {\n      return Math.log(a * a + b * b) * 0.5;\n    }\n    /* I got 4 ideas to compute this property without overflow:\n     *\n     * Testing 1000000 times with random samples for a,b ∈ [1, 1000000000] against a big decimal library to get an error estimate\n     *\n     * 1. Only eliminate the square root: (OVERALL ERROR: 3.9122483030951116e-11)\n      Math.log(a * a + b * b) / 2\n      *\n     *\n     * 2. Try to use the non-overflowing pythagoras: (OVERALL ERROR: 8.889760039210159e-10)\n      var fn = function(a, b) {\n     a = Math.abs(a);\n     b = Math.abs(b);\n     var t = Math.min(a, b);\n     a = Math.max(a, b);\n     t = t / a;\n      return Math.log(a) + Math.log(1 + t * t) / 2;\n     };\n      * 3. Abuse the identity cos(atan(y/x) = x / sqrt(x^2+y^2): (OVERALL ERROR: 3.4780178737037204e-10)\n      Math.log(a / Math.cos(Math.atan2(b, a)))\n      * 4. Use 3. and apply log rules: (OVERALL ERROR: 1.2014087502620896e-9)\n      Math.log(a) - Math.log(Math.cos(Math.atan2(b, a)))\n      */\n\n\n    a = a / 2;\n    b = b / 2;\n    return 0.5 * Math.log(a * a + b * b) + Math.LN2;\n  }\n\n  var parse = function parse(a, b) {\n    var z = {\n      're': 0,\n      'im': 0\n    };\n\n    if (a === undefined || a === null) {\n      z['re'] = z['im'] = 0;\n    } else if (b !== undefined) {\n      z['re'] = a;\n      z['im'] = b;\n    } else switch (typeof a) {\n      case 'object':\n        if ('im' in a && 're' in a) {\n          z['re'] = a['re'];\n          z['im'] = a['im'];\n        } else if ('abs' in a && 'arg' in a) {\n          if (!Number.isFinite(a['abs']) && Number.isFinite(a['arg'])) {\n            return Complex['INFINITY'];\n          }\n\n          z['re'] = a['abs'] * Math.cos(a['arg']);\n          z['im'] = a['abs'] * Math.sin(a['arg']);\n        } else if ('r' in a && 'phi' in a) {\n          if (!Number.isFinite(a['r']) && Number.isFinite(a['phi'])) {\n            return Complex['INFINITY'];\n          }\n\n          z['re'] = a['r'] * Math.cos(a['phi']);\n          z['im'] = a['r'] * Math.sin(a['phi']);\n        } else if (a.length === 2) {\n          // Quick array check\n          z['re'] = a[0];\n          z['im'] = a[1];\n        } else {\n          parser_exit();\n        }\n\n        break;\n\n      case 'string':\n        z['im'] =\n        /* void */\n        z['re'] = 0;\n        var tokens = a.match(/\\d+\\.?\\d*e[+-]?\\d+|\\d+\\.?\\d*|\\.\\d+|./g);\n        var plus = 1;\n        var minus = 0;\n\n        if (tokens === null) {\n          parser_exit();\n        }\n\n        for (var i = 0; i < tokens.length; i++) {\n          var c = tokens[i];\n\n          if (c === ' ' || c === '\\t' || c === '\\n') {\n            /* void */\n          } else if (c === '+') {\n            plus++;\n          } else if (c === '-') {\n            minus++;\n          } else if (c === 'i' || c === 'I') {\n            if (plus + minus === 0) {\n              parser_exit();\n            }\n\n            if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {\n              z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);\n              i++;\n            } else {\n              z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');\n            }\n\n            plus = minus = 0;\n          } else {\n            if (plus + minus === 0 || isNaN(c)) {\n              parser_exit();\n            }\n\n            if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {\n              z['im'] += parseFloat((minus % 2 ? '-' : '') + c);\n              i++;\n            } else {\n              z['re'] += parseFloat((minus % 2 ? '-' : '') + c);\n            }\n\n            plus = minus = 0;\n          }\n        } // Still something on the stack\n\n\n        if (plus + minus > 0) {\n          parser_exit();\n        }\n\n        break;\n\n      case 'number':\n        z['im'] = 0;\n        z['re'] = a;\n        break;\n\n      default:\n        parser_exit();\n    }\n\n    if (isNaN(z['re']) || isNaN(z['im'])) {// If a calculation is NaN, we treat it as NaN and don't throw\n      //parser_exit();\n    }\n\n    return z;\n  };\n  /**\n   * @constructor\n   * @returns {Complex}\n   */\n\n\n  function Complex(a, b) {\n    if (!(this instanceof Complex)) {\n      return new Complex(a, b);\n    }\n\n    var z = parse(a, b);\n    this['re'] = z['re'];\n    this['im'] = z['im'];\n  }\n\n  Complex.prototype = {\n    're': 0,\n    'im': 0,\n\n    /**\n     * Calculates the sign of a complex number, which is a normalized complex\n     *\n     * @returns {Complex}\n     */\n    'sign': function sign() {\n      var abs = this['abs']();\n      return new Complex(this['re'] / abs, this['im'] / abs);\n    },\n\n    /**\n     * Adds two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'add': function add(a, b) {\n      var z = new Complex(a, b); // Infinity + Infinity = NaN\n\n      if (this['isInfinite']() && z['isInfinite']()) {\n        return Complex['NAN'];\n      } // Infinity + z = Infinity { where z != Infinity }\n\n\n      if (this['isInfinite']() || z['isInfinite']()) {\n        return Complex['INFINITY'];\n      }\n\n      return new Complex(this['re'] + z['re'], this['im'] + z['im']);\n    },\n\n    /**\n     * Subtracts two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'sub': function sub(a, b) {\n      var z = new Complex(a, b); // Infinity - Infinity = NaN\n\n      if (this['isInfinite']() && z['isInfinite']()) {\n        return Complex['NAN'];\n      } // Infinity - z = Infinity { where z != Infinity }\n\n\n      if (this['isInfinite']() || z['isInfinite']()) {\n        return Complex['INFINITY'];\n      }\n\n      return new Complex(this['re'] - z['re'], this['im'] - z['im']);\n    },\n\n    /**\n     * Multiplies two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'mul': function mul(a, b) {\n      var z = new Complex(a, b); // Infinity * 0 = NaN\n\n      if (this['isInfinite']() && z['isZero']() || this['isZero']() && z['isInfinite']()) {\n        return Complex['NAN'];\n      } // Infinity * z = Infinity { where z != 0 }\n\n\n      if (this['isInfinite']() || z['isInfinite']()) {\n        return Complex['INFINITY'];\n      } // Short circuit for real values\n\n\n      if (z['im'] === 0 && this['im'] === 0) {\n        return new Complex(this['re'] * z['re'], 0);\n      }\n\n      return new Complex(this['re'] * z['re'] - this['im'] * z['im'], this['re'] * z['im'] + this['im'] * z['re']);\n    },\n\n    /**\n     * Divides two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'div': function div(a, b) {\n      var z = new Complex(a, b); // 0 / 0 = NaN and Infinity / Infinity = NaN\n\n      if (this['isZero']() && z['isZero']() || this['isInfinite']() && z['isInfinite']()) {\n        return Complex['NAN'];\n      } // Infinity / 0 = Infinity\n\n\n      if (this['isInfinite']() || z['isZero']()) {\n        return Complex['INFINITY'];\n      } // 0 / Infinity = 0\n\n\n      if (this['isZero']() || z['isInfinite']()) {\n        return Complex['ZERO'];\n      }\n\n      a = this['re'];\n      b = this['im'];\n      var c = z['re'];\n      var d = z['im'];\n      var t, x;\n\n      if (0 === d) {\n        // Divisor is real\n        return new Complex(a / c, b / c);\n      }\n\n      if (Math.abs(c) < Math.abs(d)) {\n        x = c / d;\n        t = c * x + d;\n        return new Complex((a * x + b) / t, (b * x - a) / t);\n      } else {\n        x = d / c;\n        t = d * x + c;\n        return new Complex((a + b * x) / t, (b - a * x) / t);\n      }\n    },\n\n    /**\n     * Calculate the power of two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'pow': function pow(a, b) {\n      var z = new Complex(a, b);\n      a = this['re'];\n      b = this['im'];\n\n      if (z['isZero']()) {\n        return Complex['ONE'];\n      } // If the exponent is real\n\n\n      if (z['im'] === 0) {\n        if (b === 0 && a > 0) {\n          return new Complex(Math.pow(a, z['re']), 0);\n        } else if (a === 0) {\n          // If base is fully imaginary\n          switch ((z['re'] % 4 + 4) % 4) {\n            case 0:\n              return new Complex(Math.pow(b, z['re']), 0);\n\n            case 1:\n              return new Complex(0, Math.pow(b, z['re']));\n\n            case 2:\n              return new Complex(-Math.pow(b, z['re']), 0);\n\n            case 3:\n              return new Complex(0, -Math.pow(b, z['re']));\n          }\n        }\n      }\n      /* I couldn't find a good formula, so here is a derivation and optimization\n       *\n       * z_1^z_2 = (a + bi)^(c + di)\n       *         = exp((c + di) * log(a + bi)\n       *         = pow(a^2 + b^2, (c + di) / 2) * exp(i(c + di)atan2(b, a))\n       * =>...\n       * Re = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * cos(d * log(a^2 + b^2) / 2 + c * atan2(b, a))\n       * Im = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * sin(d * log(a^2 + b^2) / 2 + c * atan2(b, a))\n       *\n       * =>...\n       * Re = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * cos(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))\n       * Im = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * sin(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))\n       *\n       * =>\n       * Re = exp(c * logsq2 - d * arg(z_1)) * cos(d * logsq2 + c * arg(z_1))\n       * Im = exp(c * logsq2 - d * arg(z_1)) * sin(d * logsq2 + c * arg(z_1))\n       *\n       */\n\n\n      if (a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0) {\n        return Complex['ZERO'];\n      }\n\n      var arg = Math.atan2(b, a);\n      var loh = logHypot(a, b);\n      a = Math.exp(z['re'] * loh - z['im'] * arg);\n      b = z['im'] * loh + z['re'] * arg;\n      return new Complex(a * Math.cos(b), a * Math.sin(b));\n    },\n\n    /**\n     * Calculate the complex square root\n     *\n     * @returns {Complex}\n     */\n    'sqrt': function sqrt() {\n      var a = this['re'];\n      var b = this['im'];\n      var r = this['abs']();\n      var re, im;\n\n      if (a >= 0) {\n        if (b === 0) {\n          return new Complex(Math.sqrt(a), 0);\n        }\n\n        re = 0.5 * Math.sqrt(2.0 * (r + a));\n      } else {\n        re = Math.abs(b) / Math.sqrt(2 * (r - a));\n      }\n\n      if (a <= 0) {\n        im = 0.5 * Math.sqrt(2.0 * (r - a));\n      } else {\n        im = Math.abs(b) / Math.sqrt(2 * (r + a));\n      }\n\n      return new Complex(re, b < 0 ? -im : im);\n    },\n\n    /**\n     * Calculate the complex exponent\n     *\n     * @returns {Complex}\n     */\n    'exp': function exp() {\n      var tmp = Math.exp(this['re']);\n\n      if (this['im'] === 0) {//return new Complex(tmp, 0);\n      }\n\n      return new Complex(tmp * Math.cos(this['im']), tmp * Math.sin(this['im']));\n    },\n\n    /**\n     * Calculate the complex exponent and subtracts one.\n     *\n     * This may be more accurate than `Complex(x).exp().sub(1)` if\n     * `x` is small.\n     *\n     * @returns {Complex}\n     */\n    'expm1': function expm1() {\n      /**\n       * exp(a + i*b) - 1\n       = exp(a) * (cos(b) + j*sin(b)) - 1\n       = expm1(a)*cos(b) + cosm1(b) + j*exp(a)*sin(b)\n       */\n      var a = this['re'];\n      var b = this['im'];\n      return new Complex(Math.expm1(a) * Math.cos(b) + cosm1(b), Math.exp(a) * Math.sin(b));\n    },\n\n    /**\n     * Calculate the natural log\n     *\n     * @returns {Complex}\n     */\n    'log': function log() {\n      var a = this['re'];\n      var b = this['im'];\n\n      if (b === 0 && a > 0) {//return new Complex(Math.log(a), 0);\n      }\n\n      return new Complex(logHypot(a, b), Math.atan2(b, a));\n    },\n\n    /**\n     * Calculate the magnitude of the complex number\n     *\n     * @returns {number}\n     */\n    'abs': function abs() {\n      return hypot(this['re'], this['im']);\n    },\n\n    /**\n     * Calculate the angle of the complex number\n     *\n     * @returns {number}\n     */\n    'arg': function arg() {\n      return Math.atan2(this['im'], this['re']);\n    },\n\n    /**\n     * Calculate the sine of the complex number\n     *\n     * @returns {Complex}\n     */\n    'sin': function sin() {\n      // sin(z) = ( e^iz - e^-iz ) / 2i \n      //        = sin(a)cosh(b) + i cos(a)sinh(b)\n      var a = this['re'];\n      var b = this['im'];\n      return new Complex(Math.sin(a) * _cosh(b), Math.cos(a) * _sinh(b));\n    },\n\n    /**\n     * Calculate the cosine\n     *\n     * @returns {Complex}\n     */\n    'cos': function cos() {\n      // cos(z) = ( e^iz + e^-iz ) / 2 \n      //        = cos(a)cosh(b) - i sin(a)sinh(b)\n      var a = this['re'];\n      var b = this['im'];\n      return new Complex(Math.cos(a) * _cosh(b), -Math.sin(a) * _sinh(b));\n    },\n\n    /**\n     * Calculate the tangent\n     *\n     * @returns {Complex}\n     */\n    'tan': function tan() {\n      // tan(z) = sin(z) / cos(z) \n      //        = ( e^iz - e^-iz ) / ( i( e^iz + e^-iz ) )\n      //        = ( e^2iz - 1 ) / i( e^2iz + 1 )\n      //        = ( sin(2a) + i sinh(2b) ) / ( cos(2a) + cosh(2b) )\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n\n      var d = Math.cos(a) + _cosh(b);\n\n      return new Complex(Math.sin(a) / d, _sinh(b) / d);\n    },\n\n    /**\n     * Calculate the cotangent\n     *\n     * @returns {Complex}\n     */\n    'cot': function cot() {\n      // cot(c) = i(e^(ci) + e^(-ci)) / (e^(ci) - e^(-ci))\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n\n      var d = Math.cos(a) - _cosh(b);\n\n      return new Complex(-Math.sin(a) / d, _sinh(b) / d);\n    },\n\n    /**\n     * Calculate the secant\n     *\n     * @returns {Complex}\n     */\n    'sec': function sec() {\n      // sec(c) = 2 / (e^(ci) + e^(-ci))\n      var a = this['re'];\n      var b = this['im'];\n      var d = 0.5 * _cosh(2 * b) + 0.5 * Math.cos(2 * a);\n      return new Complex(Math.cos(a) * _cosh(b) / d, Math.sin(a) * _sinh(b) / d);\n    },\n\n    /**\n     * Calculate the cosecans\n     *\n     * @returns {Complex}\n     */\n    'csc': function csc() {\n      // csc(c) = 2i / (e^(ci) - e^(-ci))\n      var a = this['re'];\n      var b = this['im'];\n      var d = 0.5 * _cosh(2 * b) - 0.5 * Math.cos(2 * a);\n      return new Complex(Math.sin(a) * _cosh(b) / d, -Math.cos(a) * _sinh(b) / d);\n    },\n\n    /**\n     * Calculate the complex arcus sinus\n     *\n     * @returns {Complex}\n     */\n    'asin': function asin() {\n      // asin(c) = -i * log(ci + sqrt(1 - c^2))\n      var a = this['re'];\n      var b = this['im'];\n      var t1 = new Complex(b * b - a * a + 1, -2 * a * b)['sqrt']();\n      var t2 = new Complex(t1['re'] - b, t1['im'] + a)['log']();\n      return new Complex(t2['im'], -t2['re']);\n    },\n\n    /**\n     * Calculate the complex arcus cosinus\n     *\n     * @returns {Complex}\n     */\n    'acos': function acos() {\n      // acos(c) = i * log(c - i * sqrt(1 - c^2))\n      var a = this['re'];\n      var b = this['im'];\n      var t1 = new Complex(b * b - a * a + 1, -2 * a * b)['sqrt']();\n      var t2 = new Complex(t1['re'] - b, t1['im'] + a)['log']();\n      return new Complex(Math.PI / 2 - t2['im'], t2['re']);\n    },\n\n    /**\n     * Calculate the complex arcus tangent\n     *\n     * @returns {Complex}\n     */\n    'atan': function atan() {\n      // atan(c) = i / 2 log((i + x) / (i - x))\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0) {\n        if (b === 1) {\n          return new Complex(0, Infinity);\n        }\n\n        if (b === -1) {\n          return new Complex(0, -Infinity);\n        }\n      }\n\n      var d = a * a + (1.0 - b) * (1.0 - b);\n      var t1 = new Complex((1 - b * b - a * a) / d, -2 * a / d).log();\n      return new Complex(-0.5 * t1['im'], 0.5 * t1['re']);\n    },\n\n    /**\n     * Calculate the complex arcus cotangent\n     *\n     * @returns {Complex}\n     */\n    'acot': function acot() {\n      // acot(c) = i / 2 log((c - i) / (c + i))\n      var a = this['re'];\n      var b = this['im'];\n\n      if (b === 0) {\n        return new Complex(Math.atan2(1, a), 0);\n      }\n\n      var d = a * a + b * b;\n      return d !== 0 ? new Complex(a / d, -b / d).atan() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).atan();\n    },\n\n    /**\n     * Calculate the complex arcus secant\n     *\n     * @returns {Complex}\n     */\n    'asec': function asec() {\n      // asec(c) = -i * log(1 / c + sqrt(1 - i / c^2))\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0 && b === 0) {\n        return new Complex(0, Infinity);\n      }\n\n      var d = a * a + b * b;\n      return d !== 0 ? new Complex(a / d, -b / d).acos() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).acos();\n    },\n\n    /**\n     * Calculate the complex arcus cosecans\n     *\n     * @returns {Complex}\n     */\n    'acsc': function acsc() {\n      // acsc(c) = -i * log(i / c + sqrt(1 - 1 / c^2))\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0 && b === 0) {\n        return new Complex(Math.PI / 2, Infinity);\n      }\n\n      var d = a * a + b * b;\n      return d !== 0 ? new Complex(a / d, -b / d).asin() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).asin();\n    },\n\n    /**\n     * Calculate the complex sinh\n     *\n     * @returns {Complex}\n     */\n    'sinh': function sinh() {\n      // sinh(c) = (e^c - e^-c) / 2\n      var a = this['re'];\n      var b = this['im'];\n      return new Complex(_sinh(a) * Math.cos(b), _cosh(a) * Math.sin(b));\n    },\n\n    /**\n     * Calculate the complex cosh\n     *\n     * @returns {Complex}\n     */\n    'cosh': function cosh() {\n      // cosh(c) = (e^c + e^-c) / 2\n      var a = this['re'];\n      var b = this['im'];\n      return new Complex(_cosh(a) * Math.cos(b), _sinh(a) * Math.sin(b));\n    },\n\n    /**\n     * Calculate the complex tanh\n     *\n     * @returns {Complex}\n     */\n    'tanh': function tanh() {\n      // tanh(c) = (e^c - e^-c) / (e^c + e^-c)\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = _cosh(a) + Math.cos(b);\n      return new Complex(_sinh(a) / d, Math.sin(b) / d);\n    },\n\n    /**\n     * Calculate the complex coth\n     *\n     * @returns {Complex}\n     */\n    'coth': function coth() {\n      // coth(c) = (e^c + e^-c) / (e^c - e^-c)\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = _cosh(a) - Math.cos(b);\n      return new Complex(_sinh(a) / d, -Math.sin(b) / d);\n    },\n\n    /**\n     * Calculate the complex coth\n     *\n     * @returns {Complex}\n     */\n    'csch': function csch() {\n      // csch(c) = 2 / (e^c - e^-c)\n      var a = this['re'];\n      var b = this['im'];\n\n      var d = Math.cos(2 * b) - _cosh(2 * a);\n\n      return new Complex(-2 * _sinh(a) * Math.cos(b) / d, 2 * _cosh(a) * Math.sin(b) / d);\n    },\n\n    /**\n     * Calculate the complex sech\n     *\n     * @returns {Complex}\n     */\n    'sech': function sech() {\n      // sech(c) = 2 / (e^c + e^-c)\n      var a = this['re'];\n      var b = this['im'];\n\n      var d = Math.cos(2 * b) + _cosh(2 * a);\n\n      return new Complex(2 * _cosh(a) * Math.cos(b) / d, -2 * _sinh(a) * Math.sin(b) / d);\n    },\n\n    /**\n     * Calculate the complex asinh\n     *\n     * @returns {Complex}\n     */\n    'asinh': function asinh() {\n      // asinh(c) = log(c + sqrt(c^2 + 1))\n      var tmp = this['im'];\n      this['im'] = -this['re'];\n      this['re'] = tmp;\n      var res = this['asin']();\n      this['re'] = -this['im'];\n      this['im'] = tmp;\n      tmp = res['re'];\n      res['re'] = -res['im'];\n      res['im'] = tmp;\n      return res;\n    },\n\n    /**\n     * Calculate the complex acosh\n     *\n     * @returns {Complex}\n     */\n    'acosh': function acosh() {\n      // acosh(c) = log(c + sqrt(c^2 - 1))\n      var res = this['acos']();\n\n      if (res['im'] <= 0) {\n        var tmp = res['re'];\n        res['re'] = -res['im'];\n        res['im'] = tmp;\n      } else {\n        var tmp = res['im'];\n        res['im'] = -res['re'];\n        res['re'] = tmp;\n      }\n\n      return res;\n    },\n\n    /**\n     * Calculate the complex atanh\n     *\n     * @returns {Complex}\n     */\n    'atanh': function atanh() {\n      // atanh(c) = log((1+c) / (1-c)) / 2\n      var a = this['re'];\n      var b = this['im'];\n      var noIM = a > 1 && b === 0;\n      var oneMinus = 1 - a;\n      var onePlus = 1 + a;\n      var d = oneMinus * oneMinus + b * b;\n      var x = d !== 0 ? new Complex((onePlus * oneMinus - b * b) / d, (b * oneMinus + onePlus * b) / d) : new Complex(a !== -1 ? a / 0 : 0, b !== 0 ? b / 0 : 0);\n      var temp = x['re'];\n      x['re'] = logHypot(x['re'], x['im']) / 2;\n      x['im'] = Math.atan2(x['im'], temp) / 2;\n\n      if (noIM) {\n        x['im'] = -x['im'];\n      }\n\n      return x;\n    },\n\n    /**\n     * Calculate the complex acoth\n     *\n     * @returns {Complex}\n     */\n    'acoth': function acoth() {\n      // acoth(c) = log((c+1) / (c-1)) / 2\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0 && b === 0) {\n        return new Complex(0, Math.PI / 2);\n      }\n\n      var d = a * a + b * b;\n      return d !== 0 ? new Complex(a / d, -b / d).atanh() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).atanh();\n    },\n\n    /**\n     * Calculate the complex acsch\n     *\n     * @returns {Complex}\n     */\n    'acsch': function acsch() {\n      // acsch(c) = log((1+sqrt(1+c^2))/c)\n      var a = this['re'];\n      var b = this['im'];\n\n      if (b === 0) {\n        return new Complex(a !== 0 ? Math.log(a + Math.sqrt(a * a + 1)) : Infinity, 0);\n      }\n\n      var d = a * a + b * b;\n      return d !== 0 ? new Complex(a / d, -b / d).asinh() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).asinh();\n    },\n\n    /**\n     * Calculate the complex asech\n     *\n     * @returns {Complex}\n     */\n    'asech': function asech() {\n      // asech(c) = log((1+sqrt(1-c^2))/c)\n      var a = this['re'];\n      var b = this['im'];\n\n      if (this['isZero']()) {\n        return Complex['INFINITY'];\n      }\n\n      var d = a * a + b * b;\n      return d !== 0 ? new Complex(a / d, -b / d).acosh() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).acosh();\n    },\n\n    /**\n     * Calculate the complex inverse 1/z\n     *\n     * @returns {Complex}\n     */\n    'inverse': function inverse() {\n      // 1 / 0 = Infinity and 1 / Infinity = 0\n      if (this['isZero']()) {\n        return Complex['INFINITY'];\n      }\n\n      if (this['isInfinite']()) {\n        return Complex['ZERO'];\n      }\n\n      var a = this['re'];\n      var b = this['im'];\n      var d = a * a + b * b;\n      return new Complex(a / d, -b / d);\n    },\n\n    /**\n     * Returns the complex conjugate\n     *\n     * @returns {Complex}\n     */\n    'conjugate': function conjugate() {\n      return new Complex(this['re'], -this['im']);\n    },\n\n    /**\n     * Gets the negated complex number\n     *\n     * @returns {Complex}\n     */\n    'neg': function neg() {\n      return new Complex(-this['re'], -this['im']);\n    },\n\n    /**\n     * Ceils the actual complex number\n     *\n     * @returns {Complex}\n     */\n    'ceil': function ceil(places) {\n      places = Math.pow(10, places || 0);\n      return new Complex(Math.ceil(this['re'] * places) / places, Math.ceil(this['im'] * places) / places);\n    },\n\n    /**\n     * Floors the actual complex number\n     *\n     * @returns {Complex}\n     */\n    'floor': function floor(places) {\n      places = Math.pow(10, places || 0);\n      return new Complex(Math.floor(this['re'] * places) / places, Math.floor(this['im'] * places) / places);\n    },\n\n    /**\n     * Ceils the actual complex number\n     *\n     * @returns {Complex}\n     */\n    'round': function round(places) {\n      places = Math.pow(10, places || 0);\n      return new Complex(Math.round(this['re'] * places) / places, Math.round(this['im'] * places) / places);\n    },\n\n    /**\n     * Compares two complex numbers\n     *\n     * **Note:** new Complex(Infinity).equals(Infinity) === false\n     *\n     * @returns {boolean}\n     */\n    'equals': function equals(a, b) {\n      var z = new Complex(a, b);\n      return Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] && Math.abs(z['im'] - this['im']) <= Complex['EPSILON'];\n    },\n\n    /**\n     * Clones the actual object\n     *\n     * @returns {Complex}\n     */\n    'clone': function clone() {\n      return new Complex(this['re'], this['im']);\n    },\n\n    /**\n     * Gets a string of the actual complex number\n     *\n     * @returns {string}\n     */\n    'toString': function toString() {\n      var a = this['re'];\n      var b = this['im'];\n      var ret = \"\";\n\n      if (this['isNaN']()) {\n        return 'NaN';\n      }\n\n      if (this['isInfinite']()) {\n        return 'Infinity';\n      }\n\n      if (Math.abs(a) < Complex['EPSILON']) {\n        a = 0;\n      }\n\n      if (Math.abs(b) < Complex['EPSILON']) {\n        b = 0;\n      } // If is real number\n\n\n      if (b === 0) {\n        return ret + a;\n      }\n\n      if (a !== 0) {\n        ret += a;\n        ret += \" \";\n\n        if (b < 0) {\n          b = -b;\n          ret += \"-\";\n        } else {\n          ret += \"+\";\n        }\n\n        ret += \" \";\n      } else if (b < 0) {\n        b = -b;\n        ret += \"-\";\n      }\n\n      if (1 !== b) {\n        // b is the absolute imaginary part\n        ret += b;\n      }\n\n      return ret + \"i\";\n    },\n\n    /**\n     * Returns the actual number as a vector\n     *\n     * @returns {Array}\n     */\n    'toVector': function toVector() {\n      return [this['re'], this['im']];\n    },\n\n    /**\n     * Returns the actual real value of the current object\n     *\n     * @returns {number|null}\n     */\n    'valueOf': function valueOf() {\n      if (this['im'] === 0) {\n        return this['re'];\n      }\n\n      return null;\n    },\n\n    /**\n     * Determines whether a complex number is not on the Riemann sphere.\n     *\n     * @returns {boolean}\n     */\n    'isNaN': function (_isNaN) {\n      function isNaN() {\n        return _isNaN.apply(this, arguments);\n      }\n\n      isNaN.toString = function () {\n        return _isNaN.toString();\n      };\n\n      return isNaN;\n    }(function () {\n      return isNaN(this['re']) || isNaN(this['im']);\n    }),\n\n    /**\n     * Determines whether or not a complex number is at the zero pole of the\n     * Riemann sphere.\n     *\n     * @returns {boolean}\n     */\n    'isZero': function isZero() {\n      return this['im'] === 0 && this['re'] === 0;\n    },\n\n    /**\n     * Determines whether a complex number is not at the infinity pole of the\n     * Riemann sphere.\n     *\n     * @returns {boolean}\n     */\n    'isFinite': function (_isFinite) {\n      function isFinite() {\n        return _isFinite.apply(this, arguments);\n      }\n\n      isFinite.toString = function () {\n        return _isFinite.toString();\n      };\n\n      return isFinite;\n    }(function () {\n      return isFinite(this['re']) && isFinite(this['im']);\n    }),\n\n    /**\n     * Determines whether or not a complex number is at the infinity pole of the\n     * Riemann sphere.\n     *\n     * @returns {boolean}\n     */\n    'isInfinite': function isInfinite() {\n      return !(this['isNaN']() || this['isFinite']());\n    }\n  };\n  Complex['ZERO'] = new Complex(0, 0);\n  Complex['ONE'] = new Complex(1, 0);\n  Complex['I'] = new Complex(0, 1);\n  Complex['PI'] = new Complex(Math.PI, 0);\n  Complex['E'] = new Complex(Math.E, 0);\n  Complex['INFINITY'] = new Complex(Infinity, Infinity);\n  Complex['NAN'] = new Complex(NaN, NaN);\n  Complex['EPSILON'] = 1e-15;\n\n  if (typeof define === 'function' && define['amd']) {\n    define([], function () {\n      return Complex;\n    });\n  } else if (typeof exports === 'object') {\n    Object.defineProperty(Complex, \"__esModule\", {\n      'value': true\n    });\n    Complex['default'] = Complex;\n    Complex['Complex'] = Complex;\n    module['exports'] = Complex;\n  } else {\n    root['Complex'] = Complex;\n  }\n})(this);","map":{"version":3,"names":["root","cosh","Math","x","abs","exp","sinh","cosm1","b","PI","cos","xx","hypot","y","a","sqrt","parser_exit","SyntaxError","logHypot","_a","_b","log","LN2","parse","z","undefined","Number","isFinite","Complex","sin","length","tokens","match","plus","minus","i","c","isNaN","parseFloat","prototype","d","t","pow","arg","atan2","loh","r","re","im","tmp","expm1","t1","t2","Infinity","atan","acos","asin","res","noIM","oneMinus","onePlus","temp","atanh","asinh","acosh","places","ceil","floor","round","ret","E","NaN","define","exports","Object","defineProperty","module"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/complex.js/complex.js"],"sourcesContent":["/**\n * @license Complex.js v2.1.1 12/05/2020\n *\n * Copyright (c) 2020, Robert Eisele (robert@xarg.org)\n * Dual licensed under the MIT or GPL Version 2 licenses.\n **/\n\n/**\n *\n * This class allows the manipulation of complex numbers.\n * You can pass a complex number in different formats. Either as object, double, string or two integer parameters.\n *\n * Object form\n * { re: <real>, im: <imaginary> }\n * { arg: <angle>, abs: <radius> }\n * { phi: <angle>, r: <radius> }\n *\n * Array / Vector form\n * [ real, imaginary ]\n *\n * Double form\n * 99.3 - Single double value\n *\n * String form\n * '23.1337' - Simple real number\n * '15+3i' - a simple complex number\n * '3-i' - a simple complex number\n *\n * Example:\n *\n * var c = new Complex('99.3+8i');\n * c.mul({r: 3, i: 9}).div(4.9).sub(3, 2);\n *\n */\n\n(function(root) {\n\n  'use strict';\n\n  var cosh = Math.cosh || function(x) {\n    return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;\n  };\n\n  var sinh = Math.sinh || function(x) {\n    return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;\n  };\n\n  /**\n   * Calculates cos(x) - 1 using Taylor series if x is small (-¼π ≤ x ≤ ¼π).\n   *\n   * @param {number} x\n   * @returns {number} cos(x) - 1\n   */\n  var cosm1 = function(x) {\n\n    var b = Math.PI / 4;\n    if (-b > x || x > b) {\n      return Math.cos(x) - 1.0;\n    }\n\n    /* Calculate horner form of polynomial of taylor series in Q\n    var fac = 1, alt = 1, pol = {};\n    for (var i = 0; i <= 16; i++) {\n      fac*= i || 1;\n      if (i % 2 == 0) {\n        pol[i] = new Fraction(1, alt * fac);\n        alt = -alt;\n      }\n    }\n    console.log(new Polynomial(pol).toHorner()); // (((((((1/20922789888000x^2-1/87178291200)x^2+1/479001600)x^2-1/3628800)x^2+1/40320)x^2-1/720)x^2+1/24)x^2-1/2)x^2+1\n    */\n\n    var xx = x * x;\n    return xx * (\n      xx * (\n        xx * (\n          xx * (\n            xx * (\n              xx * (\n                xx * (\n                  xx / 20922789888000\n                  - 1 / 87178291200)\n                + 1 / 479001600)\n              - 1 / 3628800)\n            + 1 / 40320)\n          - 1 / 720)\n        + 1 / 24)\n      - 1 / 2);\n  };\n\n  var hypot = function(x, y) {\n\n    var a = Math.abs(x);\n    var b = Math.abs(y);\n\n    if (a < 3000 && b < 3000) {\n      return Math.sqrt(a * a + b * b);\n    }\n\n    if (a < b) {\n      a = b;\n      b = x / y;\n    } else {\n      b = y / x;\n    }\n    return a * Math.sqrt(1 + b * b);\n  };\n\n  var parser_exit = function() {\n    throw SyntaxError('Invalid Param');\n  };\n\n  /**\n   * Calculates log(sqrt(a^2+b^2)) in a way to avoid overflows\n   *\n   * @param {number} a\n   * @param {number} b\n   * @returns {number}\n   */\n  function logHypot(a, b) {\n\n    var _a = Math.abs(a);\n    var _b = Math.abs(b);\n\n    if (a === 0) {\n      return Math.log(_b);\n    }\n\n    if (b === 0) {\n      return Math.log(_a);\n    }\n\n    if (_a < 3000 && _b < 3000) {\n      return Math.log(a * a + b * b) * 0.5;\n    }\n\n    /* I got 4 ideas to compute this property without overflow:\n     *\n     * Testing 1000000 times with random samples for a,b ∈ [1, 1000000000] against a big decimal library to get an error estimate\n     *\n     * 1. Only eliminate the square root: (OVERALL ERROR: 3.9122483030951116e-11)\n\n     Math.log(a * a + b * b) / 2\n\n     *\n     *\n     * 2. Try to use the non-overflowing pythagoras: (OVERALL ERROR: 8.889760039210159e-10)\n\n     var fn = function(a, b) {\n     a = Math.abs(a);\n     b = Math.abs(b);\n     var t = Math.min(a, b);\n     a = Math.max(a, b);\n     t = t / a;\n\n     return Math.log(a) + Math.log(1 + t * t) / 2;\n     };\n\n     * 3. Abuse the identity cos(atan(y/x) = x / sqrt(x^2+y^2): (OVERALL ERROR: 3.4780178737037204e-10)\n\n     Math.log(a / Math.cos(Math.atan2(b, a)))\n\n     * 4. Use 3. and apply log rules: (OVERALL ERROR: 1.2014087502620896e-9)\n\n     Math.log(a) - Math.log(Math.cos(Math.atan2(b, a)))\n\n     */\n\n     a = a / 2;\n     b = b / 2;\n\n    return 0.5 * Math.log(a * a + b * b) + Math.LN2;\n  }\n\n  var parse = function(a, b) {\n\n    var z = { 're': 0, 'im': 0 };\n\n    if (a === undefined || a === null) {\n      z['re'] =\n      z['im'] = 0;\n    } else if (b !== undefined) {\n      z['re'] = a;\n      z['im'] = b;\n    } else\n      switch (typeof a) {\n\n        case 'object':\n\n          if ('im' in a && 're' in a) {\n            z['re'] = a['re'];\n            z['im'] = a['im'];\n          } else if ('abs' in a && 'arg' in a) {\n            if (!Number.isFinite(a['abs']) && Number.isFinite(a['arg'])) {\n              return Complex['INFINITY'];\n            }\n            z['re'] = a['abs'] * Math.cos(a['arg']);\n            z['im'] = a['abs'] * Math.sin(a['arg']);\n          } else if ('r' in a && 'phi' in a) {\n            if (!Number.isFinite(a['r']) && Number.isFinite(a['phi'])) {\n              return Complex['INFINITY'];\n            }\n            z['re'] = a['r'] * Math.cos(a['phi']);\n            z['im'] = a['r'] * Math.sin(a['phi']);\n          } else if (a.length === 2) { // Quick array check\n            z['re'] = a[0];\n            z['im'] = a[1];\n          } else {\n            parser_exit();\n          }\n          break;\n\n        case 'string':\n\n          z['im'] = /* void */\n          z['re'] = 0;\n\n          var tokens = a.match(/\\d+\\.?\\d*e[+-]?\\d+|\\d+\\.?\\d*|\\.\\d+|./g);\n          var plus = 1;\n          var minus = 0;\n\n          if (tokens === null) {\n            parser_exit();\n          }\n\n          for (var i = 0; i < tokens.length; i++) {\n\n            var c = tokens[i];\n\n            if (c === ' ' || c === '\\t' || c === '\\n') {\n              /* void */\n            } else if (c === '+') {\n              plus++;\n            } else if (c === '-') {\n              minus++;\n            } else if (c === 'i' || c === 'I') {\n\n              if (plus + minus === 0) {\n                parser_exit();\n              }\n\n              if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {\n                z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);\n                i++;\n              } else {\n                z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');\n              }\n              plus = minus = 0;\n\n            } else {\n\n              if (plus + minus === 0 || isNaN(c)) {\n                parser_exit();\n              }\n\n              if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {\n                z['im'] += parseFloat((minus % 2 ? '-' : '') + c);\n                i++;\n              } else {\n                z['re'] += parseFloat((minus % 2 ? '-' : '') + c);\n              }\n              plus = minus = 0;\n            }\n          }\n\n          // Still something on the stack\n          if (plus + minus > 0) {\n            parser_exit();\n          }\n          break;\n\n        case 'number':\n          z['im'] = 0;\n          z['re'] = a;\n          break;\n\n        default:\n          parser_exit();\n      }\n\n    if (isNaN(z['re']) || isNaN(z['im'])) {\n      // If a calculation is NaN, we treat it as NaN and don't throw\n      //parser_exit();\n    }\n\n    return z;\n  };\n\n  /**\n   * @constructor\n   * @returns {Complex}\n   */\n  function Complex(a, b) {\n\n    if (!(this instanceof Complex)) {\n      return new Complex(a, b);\n    }\n\n    var z = parse(a, b);\n\n    this['re'] = z['re'];\n    this['im'] = z['im'];\n  }\n\n  Complex.prototype = {\n\n    're': 0,\n    'im': 0,\n\n    /**\n     * Calculates the sign of a complex number, which is a normalized complex\n     *\n     * @returns {Complex}\n     */\n    'sign': function() {\n\n      var abs = this['abs']();\n\n      return new Complex(\n        this['re'] / abs,\n        this['im'] / abs);\n    },\n\n    /**\n     * Adds two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'add': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      // Infinity + Infinity = NaN\n      if (this['isInfinite']() && z['isInfinite']()) {\n        return Complex['NAN'];\n      }\n\n      // Infinity + z = Infinity { where z != Infinity }\n      if (this['isInfinite']() || z['isInfinite']()) {\n        return Complex['INFINITY'];\n      }\n\n      return new Complex(\n        this['re'] + z['re'],\n        this['im'] + z['im']);\n    },\n\n    /**\n     * Subtracts two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'sub': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      // Infinity - Infinity = NaN\n      if (this['isInfinite']() && z['isInfinite']()) {\n        return Complex['NAN'];\n      }\n\n      // Infinity - z = Infinity { where z != Infinity }\n      if (this['isInfinite']() || z['isInfinite']()) {\n        return Complex['INFINITY'];\n      }\n\n      return new Complex(\n        this['re'] - z['re'],\n        this['im'] - z['im']);\n    },\n\n    /**\n     * Multiplies two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'mul': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      // Infinity * 0 = NaN\n      if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && z['isInfinite']())) {\n        return Complex['NAN'];\n      }\n\n      // Infinity * z = Infinity { where z != 0 }\n      if (this['isInfinite']() || z['isInfinite']()) {\n        return Complex['INFINITY'];\n      }\n\n      // Short circuit for real values\n      if (z['im'] === 0 && this['im'] === 0) {\n        return new Complex(this['re'] * z['re'], 0);\n      }\n\n      return new Complex(\n        this['re'] * z['re'] - this['im'] * z['im'],\n        this['re'] * z['im'] + this['im'] * z['re']);\n    },\n\n    /**\n     * Divides two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'div': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      // 0 / 0 = NaN and Infinity / Infinity = NaN\n      if ((this['isZero']() && z['isZero']()) || (this['isInfinite']() && z['isInfinite']())) {\n        return Complex['NAN'];\n      }\n\n      // Infinity / 0 = Infinity\n      if (this['isInfinite']() || z['isZero']()) {\n        return Complex['INFINITY'];\n      }\n\n      // 0 / Infinity = 0\n      if (this['isZero']() || z['isInfinite']()) {\n        return Complex['ZERO'];\n      }\n\n      a = this['re'];\n      b = this['im'];\n\n      var c = z['re'];\n      var d = z['im'];\n      var t, x;\n\n      if (0 === d) {\n        // Divisor is real\n        return new Complex(a / c, b / c);\n      }\n\n      if (Math.abs(c) < Math.abs(d)) {\n\n        x = c / d;\n        t = c * x + d;\n\n        return new Complex(\n          (a * x + b) / t,\n          (b * x - a) / t);\n\n      } else {\n\n        x = d / c;\n        t = d * x + c;\n\n        return new Complex(\n          (a + b * x) / t,\n          (b - a * x) / t);\n      }\n    },\n\n    /**\n     * Calculate the power of two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'pow': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      a = this['re'];\n      b = this['im'];\n\n      if (z['isZero']()) {\n        return Complex['ONE'];\n      }\n\n      // If the exponent is real\n      if (z['im'] === 0) {\n\n        if (b === 0 && a > 0) {\n\n          return new Complex(Math.pow(a, z['re']), 0);\n\n        } else if (a === 0) { // If base is fully imaginary\n\n          switch ((z['re'] % 4 + 4) % 4) {\n            case 0:\n              return new Complex(Math.pow(b, z['re']), 0);\n            case 1:\n              return new Complex(0, Math.pow(b, z['re']));\n            case 2:\n              return new Complex(-Math.pow(b, z['re']), 0);\n            case 3:\n              return new Complex(0, -Math.pow(b, z['re']));\n          }\n        }\n      }\n\n      /* I couldn't find a good formula, so here is a derivation and optimization\n       *\n       * z_1^z_2 = (a + bi)^(c + di)\n       *         = exp((c + di) * log(a + bi)\n       *         = pow(a^2 + b^2, (c + di) / 2) * exp(i(c + di)atan2(b, a))\n       * =>...\n       * Re = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * cos(d * log(a^2 + b^2) / 2 + c * atan2(b, a))\n       * Im = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * sin(d * log(a^2 + b^2) / 2 + c * atan2(b, a))\n       *\n       * =>...\n       * Re = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * cos(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))\n       * Im = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * sin(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))\n       *\n       * =>\n       * Re = exp(c * logsq2 - d * arg(z_1)) * cos(d * logsq2 + c * arg(z_1))\n       * Im = exp(c * logsq2 - d * arg(z_1)) * sin(d * logsq2 + c * arg(z_1))\n       *\n       */\n\n      if (a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0) {\n        return Complex['ZERO'];\n      }\n\n      var arg = Math.atan2(b, a);\n      var loh = logHypot(a, b);\n\n      a = Math.exp(z['re'] * loh - z['im'] * arg);\n      b = z['im'] * loh + z['re'] * arg;\n      return new Complex(\n        a * Math.cos(b),\n        a * Math.sin(b));\n    },\n\n    /**\n     * Calculate the complex square root\n     *\n     * @returns {Complex}\n     */\n    'sqrt': function() {\n\n      var a = this['re'];\n      var b = this['im'];\n      var r = this['abs']();\n\n      var re, im;\n\n      if (a >= 0) {\n\n        if (b === 0) {\n          return new Complex(Math.sqrt(a), 0);\n        }\n\n        re = 0.5 * Math.sqrt(2.0 * (r + a));\n      } else {\n        re = Math.abs(b) / Math.sqrt(2 * (r - a));\n      }\n\n      if (a <= 0) {\n        im = 0.5 * Math.sqrt(2.0 * (r - a));\n      } else {\n        im = Math.abs(b) / Math.sqrt(2 * (r + a));\n      }\n\n      return new Complex(re, b < 0 ? -im : im);\n    },\n\n    /**\n     * Calculate the complex exponent\n     *\n     * @returns {Complex}\n     */\n    'exp': function() {\n\n      var tmp = Math.exp(this['re']);\n\n      if (this['im'] === 0) {\n        //return new Complex(tmp, 0);\n      }\n      return new Complex(\n        tmp * Math.cos(this['im']),\n        tmp * Math.sin(this['im']));\n    },\n\n    /**\n     * Calculate the complex exponent and subtracts one.\n     *\n     * This may be more accurate than `Complex(x).exp().sub(1)` if\n     * `x` is small.\n     *\n     * @returns {Complex}\n     */\n    'expm1': function() {\n\n      /**\n       * exp(a + i*b) - 1\n       = exp(a) * (cos(b) + j*sin(b)) - 1\n       = expm1(a)*cos(b) + cosm1(b) + j*exp(a)*sin(b)\n       */\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n        Math.expm1(a) * Math.cos(b) + cosm1(b),\n        Math.exp(a) * Math.sin(b));\n    },\n\n    /**\n     * Calculate the natural log\n     *\n     * @returns {Complex}\n     */\n    'log': function() {\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (b === 0 && a > 0) {\n        //return new Complex(Math.log(a), 0);\n      }\n\n      return new Complex(\n        logHypot(a, b),\n        Math.atan2(b, a));\n    },\n\n    /**\n     * Calculate the magnitude of the complex number\n     *\n     * @returns {number}\n     */\n    'abs': function() {\n\n      return hypot(this['re'], this['im']);\n    },\n\n    /**\n     * Calculate the angle of the complex number\n     *\n     * @returns {number}\n     */\n    'arg': function() {\n\n      return Math.atan2(this['im'], this['re']);\n    },\n\n    /**\n     * Calculate the sine of the complex number\n     *\n     * @returns {Complex}\n     */\n    'sin': function() {\n\n      // sin(z) = ( e^iz - e^-iz ) / 2i \n      //        = sin(a)cosh(b) + i cos(a)sinh(b)\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n        Math.sin(a) * cosh(b),\n        Math.cos(a) * sinh(b));\n    },\n\n    /**\n     * Calculate the cosine\n     *\n     * @returns {Complex}\n     */\n    'cos': function() {\n\n      // cos(z) = ( e^iz + e^-iz ) / 2 \n      //        = cos(a)cosh(b) - i sin(a)sinh(b)\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n        Math.cos(a) * cosh(b),\n        -Math.sin(a) * sinh(b));\n    },\n\n    /**\n     * Calculate the tangent\n     *\n     * @returns {Complex}\n     */\n    'tan': function() {\n\n      // tan(z) = sin(z) / cos(z) \n      //        = ( e^iz - e^-iz ) / ( i( e^iz + e^-iz ) )\n      //        = ( e^2iz - 1 ) / i( e^2iz + 1 )\n      //        = ( sin(2a) + i sinh(2b) ) / ( cos(2a) + cosh(2b) )\n\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = Math.cos(a) + cosh(b);\n\n      return new Complex(\n        Math.sin(a) / d,\n        sinh(b) / d);\n    },\n\n    /**\n     * Calculate the cotangent\n     *\n     * @returns {Complex}\n     */\n    'cot': function() {\n\n      // cot(c) = i(e^(ci) + e^(-ci)) / (e^(ci) - e^(-ci))\n\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = Math.cos(a) - cosh(b);\n\n      return new Complex(\n        -Math.sin(a) / d,\n        sinh(b) / d);\n    },\n\n    /**\n     * Calculate the secant\n     *\n     * @returns {Complex}\n     */\n    'sec': function() {\n\n      // sec(c) = 2 / (e^(ci) + e^(-ci))\n\n      var a = this['re'];\n      var b = this['im'];\n      var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);\n\n      return new Complex(\n        Math.cos(a) * cosh(b) / d,\n        Math.sin(a) * sinh(b) / d);\n    },\n\n    /**\n     * Calculate the cosecans\n     *\n     * @returns {Complex}\n     */\n    'csc': function() {\n\n      // csc(c) = 2i / (e^(ci) - e^(-ci))\n\n      var a = this['re'];\n      var b = this['im'];\n      var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);\n\n      return new Complex(\n        Math.sin(a) * cosh(b) / d,\n        -Math.cos(a) * sinh(b) / d);\n    },\n\n    /**\n     * Calculate the complex arcus sinus\n     *\n     * @returns {Complex}\n     */\n    'asin': function() {\n\n      // asin(c) = -i * log(ci + sqrt(1 - c^2))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      var t1 = new Complex(\n        b * b - a * a + 1,\n        -2 * a * b)['sqrt']();\n\n      var t2 = new Complex(\n        t1['re'] - b,\n        t1['im'] + a)['log']();\n\n      return new Complex(t2['im'], -t2['re']);\n    },\n\n    /**\n     * Calculate the complex arcus cosinus\n     *\n     * @returns {Complex}\n     */\n    'acos': function() {\n\n      // acos(c) = i * log(c - i * sqrt(1 - c^2))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      var t1 = new Complex(\n        b * b - a * a + 1,\n        -2 * a * b)['sqrt']();\n\n      var t2 = new Complex(\n        t1['re'] - b,\n        t1['im'] + a)['log']();\n\n      return new Complex(Math.PI / 2 - t2['im'], t2['re']);\n    },\n\n    /**\n     * Calculate the complex arcus tangent\n     *\n     * @returns {Complex}\n     */\n    'atan': function() {\n\n      // atan(c) = i / 2 log((i + x) / (i - x))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0) {\n\n        if (b === 1) {\n          return new Complex(0, Infinity);\n        }\n\n        if (b === -1) {\n          return new Complex(0, -Infinity);\n        }\n      }\n\n      var d = a * a + (1.0 - b) * (1.0 - b);\n\n      var t1 = new Complex(\n        (1 - b * b - a * a) / d,\n        -2 * a / d).log();\n\n      return new Complex(-0.5 * t1['im'], 0.5 * t1['re']);\n    },\n\n    /**\n     * Calculate the complex arcus cotangent\n     *\n     * @returns {Complex}\n     */\n    'acot': function() {\n\n      // acot(c) = i / 2 log((c - i) / (c + i))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (b === 0) {\n        return new Complex(Math.atan2(1, a), 0);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n        ? new Complex(\n          a / d,\n          -b / d).atan()\n        : new Complex(\n          (a !== 0) ? a / 0 : 0,\n          (b !== 0) ? -b / 0 : 0).atan();\n    },\n\n    /**\n     * Calculate the complex arcus secant\n     *\n     * @returns {Complex}\n     */\n    'asec': function() {\n\n      // asec(c) = -i * log(1 / c + sqrt(1 - i / c^2))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0 && b === 0) {\n        return new Complex(0, Infinity);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n        ? new Complex(\n          a / d,\n          -b / d).acos()\n        : new Complex(\n          (a !== 0) ? a / 0 : 0,\n          (b !== 0) ? -b / 0 : 0).acos();\n    },\n\n    /**\n     * Calculate the complex arcus cosecans\n     *\n     * @returns {Complex}\n     */\n    'acsc': function() {\n\n      // acsc(c) = -i * log(i / c + sqrt(1 - 1 / c^2))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0 && b === 0) {\n        return new Complex(Math.PI / 2, Infinity);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n        ? new Complex(\n          a / d,\n          -b / d).asin()\n        : new Complex(\n          (a !== 0) ? a / 0 : 0,\n          (b !== 0) ? -b / 0 : 0).asin();\n    },\n\n    /**\n     * Calculate the complex sinh\n     *\n     * @returns {Complex}\n     */\n    'sinh': function() {\n\n      // sinh(c) = (e^c - e^-c) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n        sinh(a) * Math.cos(b),\n        cosh(a) * Math.sin(b));\n    },\n\n    /**\n     * Calculate the complex cosh\n     *\n     * @returns {Complex}\n     */\n    'cosh': function() {\n\n      // cosh(c) = (e^c + e^-c) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n        cosh(a) * Math.cos(b),\n        sinh(a) * Math.sin(b));\n    },\n\n    /**\n     * Calculate the complex tanh\n     *\n     * @returns {Complex}\n     */\n    'tanh': function() {\n\n      // tanh(c) = (e^c - e^-c) / (e^c + e^-c)\n\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = cosh(a) + Math.cos(b);\n\n      return new Complex(\n        sinh(a) / d,\n        Math.sin(b) / d);\n    },\n\n    /**\n     * Calculate the complex coth\n     *\n     * @returns {Complex}\n     */\n    'coth': function() {\n\n      // coth(c) = (e^c + e^-c) / (e^c - e^-c)\n\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = cosh(a) - Math.cos(b);\n\n      return new Complex(\n        sinh(a) / d,\n        -Math.sin(b) / d);\n    },\n\n    /**\n     * Calculate the complex coth\n     *\n     * @returns {Complex}\n     */\n    'csch': function() {\n\n      // csch(c) = 2 / (e^c - e^-c)\n\n      var a = this['re'];\n      var b = this['im'];\n      var d = Math.cos(2 * b) - cosh(2 * a);\n\n      return new Complex(\n        -2 * sinh(a) * Math.cos(b) / d,\n        2 * cosh(a) * Math.sin(b) / d);\n    },\n\n    /**\n     * Calculate the complex sech\n     *\n     * @returns {Complex}\n     */\n    'sech': function() {\n\n      // sech(c) = 2 / (e^c + e^-c)\n\n      var a = this['re'];\n      var b = this['im'];\n      var d = Math.cos(2 * b) + cosh(2 * a);\n\n      return new Complex(\n        2 * cosh(a) * Math.cos(b) / d,\n        -2 * sinh(a) * Math.sin(b) / d);\n    },\n\n    /**\n     * Calculate the complex asinh\n     *\n     * @returns {Complex}\n     */\n    'asinh': function() {\n\n      // asinh(c) = log(c + sqrt(c^2 + 1))\n\n      var tmp = this['im'];\n      this['im'] = -this['re'];\n      this['re'] = tmp;\n      var res = this['asin']();\n\n      this['re'] = -this['im'];\n      this['im'] = tmp;\n      tmp = res['re'];\n\n      res['re'] = -res['im'];\n      res['im'] = tmp;\n      return res;\n    },\n\n    /**\n     * Calculate the complex acosh\n     *\n     * @returns {Complex}\n     */\n    'acosh': function() {\n\n      // acosh(c) = log(c + sqrt(c^2 - 1))\n\n      var res = this['acos']();\n      if (res['im'] <= 0) {\n        var tmp = res['re'];\n        res['re'] = -res['im'];\n        res['im'] = tmp;\n      } else {\n        var tmp = res['im'];\n        res['im'] = -res['re'];\n        res['re'] = tmp;\n      }\n      return res;\n    },\n\n    /**\n     * Calculate the complex atanh\n     *\n     * @returns {Complex}\n     */\n    'atanh': function() {\n\n      // atanh(c) = log((1+c) / (1-c)) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n\n      var noIM = a > 1 && b === 0;\n      var oneMinus = 1 - a;\n      var onePlus = 1 + a;\n      var d = oneMinus * oneMinus + b * b;\n\n      var x = (d !== 0)\n        ? new Complex(\n          (onePlus * oneMinus - b * b) / d,\n          (b * oneMinus + onePlus * b) / d)\n        : new Complex(\n          (a !== -1) ? (a / 0) : 0,\n          (b !== 0) ? (b / 0) : 0);\n\n      var temp = x['re'];\n      x['re'] = logHypot(x['re'], x['im']) / 2;\n      x['im'] = Math.atan2(x['im'], temp) / 2;\n      if (noIM) {\n        x['im'] = -x['im'];\n      }\n      return x;\n    },\n\n    /**\n     * Calculate the complex acoth\n     *\n     * @returns {Complex}\n     */\n    'acoth': function() {\n\n      // acoth(c) = log((c+1) / (c-1)) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0 && b === 0) {\n        return new Complex(0, Math.PI / 2);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n        ? new Complex(\n          a / d,\n          -b / d).atanh()\n        : new Complex(\n          (a !== 0) ? a / 0 : 0,\n          (b !== 0) ? -b / 0 : 0).atanh();\n    },\n\n    /**\n     * Calculate the complex acsch\n     *\n     * @returns {Complex}\n     */\n    'acsch': function() {\n\n      // acsch(c) = log((1+sqrt(1+c^2))/c)\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (b === 0) {\n\n        return new Complex(\n          (a !== 0)\n            ? Math.log(a + Math.sqrt(a * a + 1))\n            : Infinity, 0);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n        ? new Complex(\n          a / d,\n          -b / d).asinh()\n        : new Complex(\n          (a !== 0) ? a / 0 : 0,\n          (b !== 0) ? -b / 0 : 0).asinh();\n    },\n\n    /**\n     * Calculate the complex asech\n     *\n     * @returns {Complex}\n     */\n    'asech': function() {\n\n      // asech(c) = log((1+sqrt(1-c^2))/c)\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (this['isZero']()) {\n        return Complex['INFINITY'];\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n        ? new Complex(\n          a / d,\n          -b / d).acosh()\n        : new Complex(\n          (a !== 0) ? a / 0 : 0,\n          (b !== 0) ? -b / 0 : 0).acosh();\n    },\n\n    /**\n     * Calculate the complex inverse 1/z\n     *\n     * @returns {Complex}\n     */\n    'inverse': function() {\n\n      // 1 / 0 = Infinity and 1 / Infinity = 0\n      if (this['isZero']()) {\n        return Complex['INFINITY'];\n      }\n\n      if (this['isInfinite']()) {\n        return Complex['ZERO'];\n      }\n\n      var a = this['re'];\n      var b = this['im'];\n\n      var d = a * a + b * b;\n\n      return new Complex(a / d, -b / d);\n    },\n\n    /**\n     * Returns the complex conjugate\n     *\n     * @returns {Complex}\n     */\n    'conjugate': function() {\n\n      return new Complex(this['re'], -this['im']);\n    },\n\n    /**\n     * Gets the negated complex number\n     *\n     * @returns {Complex}\n     */\n    'neg': function() {\n\n      return new Complex(-this['re'], -this['im']);\n    },\n\n    /**\n     * Ceils the actual complex number\n     *\n     * @returns {Complex}\n     */\n    'ceil': function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      return new Complex(\n        Math.ceil(this['re'] * places) / places,\n        Math.ceil(this['im'] * places) / places);\n    },\n\n    /**\n     * Floors the actual complex number\n     *\n     * @returns {Complex}\n     */\n    'floor': function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      return new Complex(\n        Math.floor(this['re'] * places) / places,\n        Math.floor(this['im'] * places) / places);\n    },\n\n    /**\n     * Ceils the actual complex number\n     *\n     * @returns {Complex}\n     */\n    'round': function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      return new Complex(\n        Math.round(this['re'] * places) / places,\n        Math.round(this['im'] * places) / places);\n    },\n\n    /**\n     * Compares two complex numbers\n     *\n     * **Note:** new Complex(Infinity).equals(Infinity) === false\n     *\n     * @returns {boolean}\n     */\n    'equals': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      return Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] &&\n        Math.abs(z['im'] - this['im']) <= Complex['EPSILON'];\n    },\n\n    /**\n     * Clones the actual object\n     *\n     * @returns {Complex}\n     */\n    'clone': function() {\n\n      return new Complex(this['re'], this['im']);\n    },\n\n    /**\n     * Gets a string of the actual complex number\n     *\n     * @returns {string}\n     */\n    'toString': function() {\n\n      var a = this['re'];\n      var b = this['im'];\n      var ret = \"\";\n\n      if (this['isNaN']()) {\n        return 'NaN';\n      }\n\n      if (this['isInfinite']()) {\n        return 'Infinity';\n      }\n\n      if (Math.abs(a) < Complex['EPSILON']) {\n        a = 0;\n      }\n\n      if (Math.abs(b) < Complex['EPSILON']) {\n        b = 0;\n      }\n\n      // If is real number\n      if (b === 0) {\n        return ret + a;\n      }\n\n      if (a !== 0) {\n        ret += a;\n        ret += \" \";\n        if (b < 0) {\n          b = -b;\n          ret += \"-\";\n        } else {\n          ret += \"+\";\n        }\n        ret += \" \";\n      } else if (b < 0) {\n        b = -b;\n        ret += \"-\";\n      }\n\n      if (1 !== b) { // b is the absolute imaginary part\n        ret += b;\n      }\n      return ret + \"i\";\n    },\n\n    /**\n     * Returns the actual number as a vector\n     *\n     * @returns {Array}\n     */\n    'toVector': function() {\n\n      return [this['re'], this['im']];\n    },\n\n    /**\n     * Returns the actual real value of the current object\n     *\n     * @returns {number|null}\n     */\n    'valueOf': function() {\n\n      if (this['im'] === 0) {\n        return this['re'];\n      }\n      return null;\n    },\n\n    /**\n     * Determines whether a complex number is not on the Riemann sphere.\n     *\n     * @returns {boolean}\n     */\n    'isNaN': function() {\n      return isNaN(this['re']) || isNaN(this['im']);\n    },\n\n    /**\n     * Determines whether or not a complex number is at the zero pole of the\n     * Riemann sphere.\n     *\n     * @returns {boolean}\n     */\n    'isZero': function() {\n      return this['im'] === 0 && this['re'] === 0;\n    },\n\n    /**\n     * Determines whether a complex number is not at the infinity pole of the\n     * Riemann sphere.\n     *\n     * @returns {boolean}\n     */\n    'isFinite': function() {\n      return isFinite(this['re']) && isFinite(this['im']);\n    },\n\n    /**\n     * Determines whether or not a complex number is at the infinity pole of the\n     * Riemann sphere.\n     *\n     * @returns {boolean}\n     */\n    'isInfinite': function() {\n      return !(this['isNaN']() || this['isFinite']());\n    }\n  };\n\n  Complex['ZERO'] = new Complex(0, 0);\n  Complex['ONE'] = new Complex(1, 0);\n  Complex['I'] = new Complex(0, 1);\n  Complex['PI'] = new Complex(Math.PI, 0);\n  Complex['E'] = new Complex(Math.E, 0);\n  Complex['INFINITY'] = new Complex(Infinity, Infinity);\n  Complex['NAN'] = new Complex(NaN, NaN);\n  Complex['EPSILON'] = 1e-15;\n\n  if (typeof define === 'function' && define['amd']) {\n    define([], function() {\n      return Complex;\n    });\n  } else if (typeof exports === 'object') {\n    Object.defineProperty(Complex, \"__esModule\", { 'value': true });\n    Complex['default'] = Complex;\n    Complex['Complex'] = Complex;\n    module['exports'] = Complex;\n  } else {\n    root['Complex'] = Complex;\n  }\n\n})(this);\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}