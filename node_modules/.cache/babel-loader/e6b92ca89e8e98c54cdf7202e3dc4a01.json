{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nvar name = 'sqrt';\nvar dependencies = ['config', 'typed', 'Complex'];\nexport var createSqrt = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var config = _ref.config,\n      typed = _ref.typed,\n      Complex = _ref.Complex;\n  /**\n   * Calculate the square root of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.sqrt(x)\n   *\n   * Examples:\n   *\n   *    math.sqrt(25)                // returns 5\n   *    math.square(5)               // returns 25\n   *    math.sqrt(-4)                // returns Complex 2i\n   *\n   * See also:\n   *\n   *    square, multiply, cube, cbrt, sqrtm\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix | Unit} x\n   *            Value for which to calculate the square root.\n   * @return {number | BigNumber | Complex | Array | Matrix | Unit}\n   *            Returns the square root of `x`\n   */\n\n  return typed('sqrt', {\n    number: _sqrtNumber,\n    Complex: function Complex(x) {\n      return x.sqrt();\n    },\n    BigNumber: function BigNumber(x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.sqrt();\n      } else {\n        // negative value -> downgrade to number to do complex value computation\n        return _sqrtNumber(x.toNumber());\n      }\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since sqrt(0) = 0\n      return deepMap(x, this, true);\n    },\n    Unit: function Unit(x) {\n      // Someday will work for complex units when they are implemented\n      return x.pow(0.5);\n    }\n  });\n  /**\n   * Calculate sqrt for a number\n   * @param {number} x\n   * @returns {number | Complex} Returns the square root of x\n   * @private\n   */\n\n  function _sqrtNumber(x) {\n    if (isNaN(x)) {\n      return NaN;\n    } else if (x >= 0 || config.predictable) {\n      return Math.sqrt(x);\n    } else {\n      return new Complex(x, 0).sqrt();\n    }\n  }\n});","map":{"version":3,"names":["factory","deepMap","name","dependencies","createSqrt","_ref","config","typed","Complex","number","_sqrtNumber","x","sqrt","BigNumber","isNegative","predictable","toNumber","ArrayMatrix","Unit","pow","isNaN","NaN","Math"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/function/arithmetic/sqrt.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nvar name = 'sqrt';\nvar dependencies = ['config', 'typed', 'Complex'];\nexport var createSqrt = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    config,\n    typed,\n    Complex\n  } = _ref;\n\n  /**\n   * Calculate the square root of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.sqrt(x)\n   *\n   * Examples:\n   *\n   *    math.sqrt(25)                // returns 5\n   *    math.square(5)               // returns 25\n   *    math.sqrt(-4)                // returns Complex 2i\n   *\n   * See also:\n   *\n   *    square, multiply, cube, cbrt, sqrtm\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix | Unit} x\n   *            Value for which to calculate the square root.\n   * @return {number | BigNumber | Complex | Array | Matrix | Unit}\n   *            Returns the square root of `x`\n   */\n  return typed('sqrt', {\n    number: _sqrtNumber,\n    Complex: function Complex(x) {\n      return x.sqrt();\n    },\n    BigNumber: function BigNumber(x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.sqrt();\n      } else {\n        // negative value -> downgrade to number to do complex value computation\n        return _sqrtNumber(x.toNumber());\n      }\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since sqrt(0) = 0\n      return deepMap(x, this, true);\n    },\n    Unit: function Unit(x) {\n      // Someday will work for complex units when they are implemented\n      return x.pow(0.5);\n    }\n  });\n  /**\n   * Calculate sqrt for a number\n   * @param {number} x\n   * @returns {number | Complex} Returns the square root of x\n   * @private\n   */\n\n  function _sqrtNumber(x) {\n    if (isNaN(x)) {\n      return NaN;\n    } else if (x >= 0 || config.predictable) {\n      return Math.sqrt(x);\n    } else {\n      return new Complex(x, 0).sqrt();\n    }\n  }\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,YAAY,GAAG,CAAC,QAAD,EAAW,OAAX,EAAoB,SAApB,CAAnB;AACA,OAAO,IAAIC,UAAU,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EACzE,IACEC,MADF,GAIID,IAJJ,CACEC,MADF;EAAA,IAEEC,KAFF,GAIIF,IAJJ,CAEEE,KAFF;EAAA,IAGEC,OAHF,GAIIH,IAJJ,CAGEG,OAHF;EAMA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOD,KAAK,CAAC,MAAD,EAAS;IACnBE,MAAM,EAAEC,WADW;IAEnBF,OAAO,EAAE,SAASA,OAAT,CAAiBG,CAAjB,EAAoB;MAC3B,OAAOA,CAAC,CAACC,IAAF,EAAP;IACD,CAJkB;IAKnBC,SAAS,EAAE,SAASA,SAAT,CAAmBF,CAAnB,EAAsB;MAC/B,IAAI,CAACA,CAAC,CAACG,UAAF,EAAD,IAAmBR,MAAM,CAACS,WAA9B,EAA2C;QACzC,OAAOJ,CAAC,CAACC,IAAF,EAAP;MACD,CAFD,MAEO;QACL;QACA,OAAOF,WAAW,CAACC,CAAC,CAACK,QAAF,EAAD,CAAlB;MACD;IACF,CAZkB;IAanB,kBAAkB,SAASC,WAAT,CAAqBN,CAArB,EAAwB;MACxC;MACA,OAAOV,OAAO,CAACU,CAAD,EAAI,IAAJ,EAAU,IAAV,CAAd;IACD,CAhBkB;IAiBnBO,IAAI,EAAE,SAASA,IAAT,CAAcP,CAAd,EAAiB;MACrB;MACA,OAAOA,CAAC,CAACQ,GAAF,CAAM,GAAN,CAAP;IACD;EApBkB,CAAT,CAAZ;EAsBA;AACF;AACA;AACA;AACA;AACA;;EAEE,SAAST,WAAT,CAAqBC,CAArB,EAAwB;IACtB,IAAIS,KAAK,CAACT,CAAD,CAAT,EAAc;MACZ,OAAOU,GAAP;IACD,CAFD,MAEO,IAAIV,CAAC,IAAI,CAAL,IAAUL,MAAM,CAACS,WAArB,EAAkC;MACvC,OAAOO,IAAI,CAACV,IAAL,CAAUD,CAAV,CAAP;IACD,CAFM,MAEA;MACL,OAAO,IAAIH,OAAJ,CAAYG,CAAZ,EAAe,CAAf,EAAkBC,IAAlB,EAAP;IACD;EACF;AACF,CArE6C,CAAvC"},"metadata":{},"sourceType":"module"}