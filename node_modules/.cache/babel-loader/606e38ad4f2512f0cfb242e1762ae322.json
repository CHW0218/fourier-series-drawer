{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport { isFunctionNode, isOperatorNode, isParenthesisNode } from '../../../utils/is.js';\nimport { factory } from '../../../utils/factory.js';\nimport { hasOwnProperty } from '../../../utils/object.js';\nvar name = 'simplifyUtil';\nvar dependencies = ['FunctionNode', 'OperatorNode', 'SymbolNode'];\nexport var createUtil = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var FunctionNode = _ref.FunctionNode,\n      OperatorNode = _ref.OperatorNode,\n      SymbolNode = _ref.SymbolNode; // TODO commutative/associative properties rely on the arguments\n  // e.g. multiply is not commutative for matrices\n  // The properties should be calculated from an argument to simplify, or possibly something in math.config\n  // the other option is for typed() to specify a return type so that we can evaluate the type of arguments\n\n  /* So that properties of an operator fit on one line: */\n\n  var T = true;\n  var F = false;\n  var defaultName = 'defaultF';\n  var defaultContext = {\n    /*      */\n    add: {\n      trivial: T,\n      total: T,\n      commutative: T,\n      associative: T\n    },\n\n    /**/\n    unaryPlus: {\n      trivial: T,\n      total: T,\n      commutative: T,\n      associative: T\n    },\n\n    /* */\n    subtract: {\n      trivial: F,\n      total: T,\n      commutative: F,\n      associative: F\n    },\n\n    /* */\n    multiply: {\n      trivial: T,\n      total: T,\n      commutative: T,\n      associative: T\n    },\n\n    /*   */\n    divide: {\n      trivial: F,\n      total: T,\n      commutative: F,\n      associative: F\n    },\n\n    /*    */\n    paren: {\n      trivial: T,\n      total: T,\n      commutative: T,\n      associative: F\n    },\n\n    /* */\n    defaultF: {\n      trivial: F,\n      total: T,\n      commutative: F,\n      associative: F\n    }\n  };\n  var realContext = {\n    divide: {\n      total: F\n    },\n    log: {\n      total: F\n    }\n  };\n  var positiveContext = {\n    subtract: {\n      total: F\n    },\n    abs: {\n      trivial: T\n    },\n    log: {\n      total: T\n    }\n  };\n\n  function hasProperty(nodeOrName, property) {\n    var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultContext;\n    var name = defaultName;\n\n    if (typeof nodeOrName === 'string') {\n      name = nodeOrName;\n    } else if (isOperatorNode(nodeOrName)) {\n      name = nodeOrName.fn.toString();\n    } else if (isFunctionNode(nodeOrName)) {\n      name = nodeOrName.name;\n    } else if (isParenthesisNode(nodeOrName)) {\n      name = 'paren';\n    }\n\n    if (hasOwnProperty(context, name)) {\n      var properties = context[name];\n\n      if (hasOwnProperty(properties, property)) {\n        return properties[property];\n      }\n\n      if (hasOwnProperty(defaultContext, name)) {\n        return defaultContext[name][property];\n      }\n    }\n\n    if (hasOwnProperty(context, defaultName)) {\n      var _properties = context[defaultName];\n\n      if (hasOwnProperty(_properties, property)) {\n        return _properties[property];\n      }\n\n      return defaultContext[defaultName][property];\n    }\n    /* name not found in context and context has no global default */\n\n    /* So use default context. */\n\n\n    if (hasOwnProperty(defaultContext, name)) {\n      var _properties2 = defaultContext[name];\n\n      if (hasOwnProperty(_properties2, property)) {\n        return _properties2[property];\n      }\n    }\n\n    return defaultContext[defaultName][property];\n  }\n\n  function isCommutative(node) {\n    var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultContext;\n    return hasProperty(node, 'commutative', context);\n  }\n\n  function isAssociative(node) {\n    var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultContext;\n    return hasProperty(node, 'associative', context);\n  }\n  /**\n   * Merge the given contexts, with primary overriding secondary\n   * wherever they might conflict\n   */\n\n\n  function mergeContext(primary, secondary) {\n    var merged = _objectSpread({}, primary);\n\n    for (var prop in secondary) {\n      if (hasOwnProperty(primary, prop)) {\n        merged[prop] = _objectSpread(_objectSpread({}, secondary[prop]), primary[prop]);\n      } else {\n        merged[prop] = secondary[prop];\n      }\n    }\n\n    return merged;\n  }\n  /**\n   * Flatten all associative operators in an expression tree.\n   * Assumes parentheses have already been removed.\n   */\n\n\n  function flatten(node, context) {\n    if (!node.args || node.args.length === 0) {\n      return node;\n    }\n\n    node.args = allChildren(node, context);\n\n    for (var i = 0; i < node.args.length; i++) {\n      flatten(node.args[i], context);\n    }\n  }\n  /**\n   * Get the children of a node as if it has been flattened.\n   * TODO implement for FunctionNodes\n   */\n\n\n  function allChildren(node, context) {\n    var op;\n    var children = [];\n\n    var findChildren = function findChildren(node) {\n      for (var i = 0; i < node.args.length; i++) {\n        var child = node.args[i];\n\n        if (isOperatorNode(child) && op === child.op) {\n          findChildren(child);\n        } else {\n          children.push(child);\n        }\n      }\n    };\n\n    if (isAssociative(node, context)) {\n      op = node.op;\n      findChildren(node);\n      return children;\n    } else {\n      return node.args;\n    }\n  }\n  /**\n   *  Unflatten all flattened operators to a right-heavy binary tree.\n   */\n\n\n  function unflattenr(node, context) {\n    if (!node.args || node.args.length === 0) {\n      return;\n    }\n\n    var makeNode = createMakeNodeFunction(node);\n    var l = node.args.length;\n\n    for (var i = 0; i < l; i++) {\n      unflattenr(node.args[i], context);\n    }\n\n    if (l > 2 && isAssociative(node, context)) {\n      var curnode = node.args.pop();\n\n      while (node.args.length > 0) {\n        curnode = makeNode([node.args.pop(), curnode]);\n      }\n\n      node.args = curnode.args;\n    }\n  }\n  /**\n   *  Unflatten all flattened operators to a left-heavy binary tree.\n   */\n\n\n  function unflattenl(node, context) {\n    if (!node.args || node.args.length === 0) {\n      return;\n    }\n\n    var makeNode = createMakeNodeFunction(node);\n    var l = node.args.length;\n\n    for (var i = 0; i < l; i++) {\n      unflattenl(node.args[i], context);\n    }\n\n    if (l > 2 && isAssociative(node, context)) {\n      var curnode = node.args.shift();\n\n      while (node.args.length > 0) {\n        curnode = makeNode([curnode, node.args.shift()]);\n      }\n\n      node.args = curnode.args;\n    }\n  }\n\n  function createMakeNodeFunction(node) {\n    if (isOperatorNode(node)) {\n      return function (args) {\n        try {\n          return new OperatorNode(node.op, node.fn, args, node.implicit);\n        } catch (err) {\n          console.error(err);\n          return [];\n        }\n      };\n    } else {\n      return function (args) {\n        return new FunctionNode(new SymbolNode(node.name), args);\n      };\n    }\n  }\n\n  return {\n    createMakeNodeFunction: createMakeNodeFunction,\n    hasProperty: hasProperty,\n    isCommutative: isCommutative,\n    isAssociative: isAssociative,\n    mergeContext: mergeContext,\n    flatten: flatten,\n    allChildren: allChildren,\n    unflattenr: unflattenr,\n    unflattenl: unflattenl,\n    defaultContext: defaultContext,\n    realContext: realContext,\n    positiveContext: positiveContext\n  };\n});","map":{"version":3,"names":["_defineProperty","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","isFunctionNode","isOperatorNode","isParenthesisNode","factory","hasOwnProperty","name","dependencies","createUtil","_ref","FunctionNode","OperatorNode","SymbolNode","T","F","defaultName","defaultContext","add","trivial","total","commutative","associative","unaryPlus","subtract","multiply","divide","paren","defaultF","realContext","log","positiveContext","abs","hasProperty","nodeOrName","property","context","undefined","fn","toString","properties","_properties","_properties2","isCommutative","node","isAssociative","mergeContext","primary","secondary","merged","prop","flatten","args","allChildren","op","children","findChildren","child","unflattenr","makeNode","createMakeNodeFunction","l","curnode","pop","unflattenl","shift","implicit","err","console","error"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/function/algebra/simplify/util.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { isFunctionNode, isOperatorNode, isParenthesisNode } from '../../../utils/is.js';\nimport { factory } from '../../../utils/factory.js';\nimport { hasOwnProperty } from '../../../utils/object.js';\nvar name = 'simplifyUtil';\nvar dependencies = ['FunctionNode', 'OperatorNode', 'SymbolNode'];\nexport var createUtil = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    FunctionNode,\n    OperatorNode,\n    SymbolNode\n  } = _ref;\n  // TODO commutative/associative properties rely on the arguments\n  // e.g. multiply is not commutative for matrices\n  // The properties should be calculated from an argument to simplify, or possibly something in math.config\n  // the other option is for typed() to specify a return type so that we can evaluate the type of arguments\n\n  /* So that properties of an operator fit on one line: */\n  var T = true;\n  var F = false;\n  var defaultName = 'defaultF';\n  var defaultContext = {\n    /*      */\n    add: {\n      trivial: T,\n      total: T,\n      commutative: T,\n      associative: T\n    },\n\n    /**/\n    unaryPlus: {\n      trivial: T,\n      total: T,\n      commutative: T,\n      associative: T\n    },\n\n    /* */\n    subtract: {\n      trivial: F,\n      total: T,\n      commutative: F,\n      associative: F\n    },\n\n    /* */\n    multiply: {\n      trivial: T,\n      total: T,\n      commutative: T,\n      associative: T\n    },\n\n    /*   */\n    divide: {\n      trivial: F,\n      total: T,\n      commutative: F,\n      associative: F\n    },\n\n    /*    */\n    paren: {\n      trivial: T,\n      total: T,\n      commutative: T,\n      associative: F\n    },\n\n    /* */\n    defaultF: {\n      trivial: F,\n      total: T,\n      commutative: F,\n      associative: F\n    }\n  };\n  var realContext = {\n    divide: {\n      total: F\n    },\n    log: {\n      total: F\n    }\n  };\n  var positiveContext = {\n    subtract: {\n      total: F\n    },\n    abs: {\n      trivial: T\n    },\n    log: {\n      total: T\n    }\n  };\n\n  function hasProperty(nodeOrName, property) {\n    var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultContext;\n    var name = defaultName;\n\n    if (typeof nodeOrName === 'string') {\n      name = nodeOrName;\n    } else if (isOperatorNode(nodeOrName)) {\n      name = nodeOrName.fn.toString();\n    } else if (isFunctionNode(nodeOrName)) {\n      name = nodeOrName.name;\n    } else if (isParenthesisNode(nodeOrName)) {\n      name = 'paren';\n    }\n\n    if (hasOwnProperty(context, name)) {\n      var properties = context[name];\n\n      if (hasOwnProperty(properties, property)) {\n        return properties[property];\n      }\n\n      if (hasOwnProperty(defaultContext, name)) {\n        return defaultContext[name][property];\n      }\n    }\n\n    if (hasOwnProperty(context, defaultName)) {\n      var _properties = context[defaultName];\n\n      if (hasOwnProperty(_properties, property)) {\n        return _properties[property];\n      }\n\n      return defaultContext[defaultName][property];\n    }\n    /* name not found in context and context has no global default */\n\n    /* So use default context. */\n\n\n    if (hasOwnProperty(defaultContext, name)) {\n      var _properties2 = defaultContext[name];\n\n      if (hasOwnProperty(_properties2, property)) {\n        return _properties2[property];\n      }\n    }\n\n    return defaultContext[defaultName][property];\n  }\n\n  function isCommutative(node) {\n    var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultContext;\n    return hasProperty(node, 'commutative', context);\n  }\n\n  function isAssociative(node) {\n    var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultContext;\n    return hasProperty(node, 'associative', context);\n  }\n  /**\n   * Merge the given contexts, with primary overriding secondary\n   * wherever they might conflict\n   */\n\n\n  function mergeContext(primary, secondary) {\n    var merged = _objectSpread({}, primary);\n\n    for (var prop in secondary) {\n      if (hasOwnProperty(primary, prop)) {\n        merged[prop] = _objectSpread(_objectSpread({}, secondary[prop]), primary[prop]);\n      } else {\n        merged[prop] = secondary[prop];\n      }\n    }\n\n    return merged;\n  }\n  /**\n   * Flatten all associative operators in an expression tree.\n   * Assumes parentheses have already been removed.\n   */\n\n\n  function flatten(node, context) {\n    if (!node.args || node.args.length === 0) {\n      return node;\n    }\n\n    node.args = allChildren(node, context);\n\n    for (var i = 0; i < node.args.length; i++) {\n      flatten(node.args[i], context);\n    }\n  }\n  /**\n   * Get the children of a node as if it has been flattened.\n   * TODO implement for FunctionNodes\n   */\n\n\n  function allChildren(node, context) {\n    var op;\n    var children = [];\n\n    var findChildren = function findChildren(node) {\n      for (var i = 0; i < node.args.length; i++) {\n        var child = node.args[i];\n\n        if (isOperatorNode(child) && op === child.op) {\n          findChildren(child);\n        } else {\n          children.push(child);\n        }\n      }\n    };\n\n    if (isAssociative(node, context)) {\n      op = node.op;\n      findChildren(node);\n      return children;\n    } else {\n      return node.args;\n    }\n  }\n  /**\n   *  Unflatten all flattened operators to a right-heavy binary tree.\n   */\n\n\n  function unflattenr(node, context) {\n    if (!node.args || node.args.length === 0) {\n      return;\n    }\n\n    var makeNode = createMakeNodeFunction(node);\n    var l = node.args.length;\n\n    for (var i = 0; i < l; i++) {\n      unflattenr(node.args[i], context);\n    }\n\n    if (l > 2 && isAssociative(node, context)) {\n      var curnode = node.args.pop();\n\n      while (node.args.length > 0) {\n        curnode = makeNode([node.args.pop(), curnode]);\n      }\n\n      node.args = curnode.args;\n    }\n  }\n  /**\n   *  Unflatten all flattened operators to a left-heavy binary tree.\n   */\n\n\n  function unflattenl(node, context) {\n    if (!node.args || node.args.length === 0) {\n      return;\n    }\n\n    var makeNode = createMakeNodeFunction(node);\n    var l = node.args.length;\n\n    for (var i = 0; i < l; i++) {\n      unflattenl(node.args[i], context);\n    }\n\n    if (l > 2 && isAssociative(node, context)) {\n      var curnode = node.args.shift();\n\n      while (node.args.length > 0) {\n        curnode = makeNode([curnode, node.args.shift()]);\n      }\n\n      node.args = curnode.args;\n    }\n  }\n\n  function createMakeNodeFunction(node) {\n    if (isOperatorNode(node)) {\n      return function (args) {\n        try {\n          return new OperatorNode(node.op, node.fn, args, node.implicit);\n        } catch (err) {\n          console.error(err);\n          return [];\n        }\n      };\n    } else {\n      return function (args) {\n        return new FunctionNode(new SymbolNode(node.name), args);\n      };\n    }\n  }\n\n  return {\n    createMakeNodeFunction,\n    hasProperty,\n    isCommutative,\n    isAssociative,\n    mergeContext,\n    flatten,\n    allChildren,\n    unflattenr,\n    unflattenl,\n    defaultContext,\n    realContext,\n    positiveContext\n  };\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}