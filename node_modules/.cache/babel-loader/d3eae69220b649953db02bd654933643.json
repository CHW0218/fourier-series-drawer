{"ast":null,"code":"import { factory } from '../../../utils/factory.js';\nvar name = 'matrix';\nvar dependencies = ['typed', 'Matrix', 'DenseMatrix', 'SparseMatrix'];\nexport var createMatrix = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      Matrix = _ref.Matrix,\n      DenseMatrix = _ref.DenseMatrix,\n      SparseMatrix = _ref.SparseMatrix;\n  /**\n   * Create a Matrix. The function creates a new `math.Matrix` object from\n   * an `Array`. A Matrix has utility functions to manipulate the data in the\n   * matrix, like getting the size and getting or setting values in the matrix.\n   * Supported storage formats are 'dense' and 'sparse'.\n   *\n   * Syntax:\n   *\n   *    math.matrix()                         // creates an empty matrix using default storage format (dense).\n   *    math.matrix(data)                     // creates a matrix with initial data using default storage format (dense).\n   *    math.matrix('dense')                  // creates an empty matrix using the given storage format.\n   *    math.matrix(data, 'dense')            // creates a matrix with initial data using the given storage format.\n   *    math.matrix(data, 'sparse')           // creates a sparse matrix with initial data.\n   *    math.matrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.\n   *\n   * Examples:\n   *\n   *    let m = math.matrix([[1, 2], [3, 4]])\n   *    m.size()                        // Array [2, 2]\n   *    m.resize([3, 2], 5)\n   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]\n   *    m.get([1, 0])                    // number 3\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, number, string, unit, sparse\n   *\n   * @param {Array | Matrix} [data]    A multi dimensional array\n   * @param {string} [format]          The Matrix storage format, either `'dense'` or `'sparse'`\n   * @param {string} [datatype]        Type of the values\n   *\n   * @return {Matrix} The created matrix\n   */\n\n  return typed(name, {\n    '': function _() {\n      return _create([]);\n    },\n    string: function string(format) {\n      return _create([], format);\n    },\n    'string, string': function stringString(format, datatype) {\n      return _create([], format, datatype);\n    },\n    Array: function Array(data) {\n      return _create(data);\n    },\n    Matrix: function Matrix(data) {\n      return _create(data, data.storage());\n    },\n    'Array | Matrix, string': _create,\n    'Array | Matrix, string, string': _create\n  });\n  /**\n   * Create a new Matrix with given storage format\n   * @param {Array} data\n   * @param {string} [format]\n   * @param {string} [datatype]\n   * @returns {Matrix} Returns a new Matrix\n   * @private\n   */\n\n  function _create(data, format, datatype) {\n    // get storage format constructor\n    if (format === 'dense' || format === 'default' || format === undefined) {\n      return new DenseMatrix(data, datatype);\n    }\n\n    if (format === 'sparse') {\n      return new SparseMatrix(data, datatype);\n    }\n\n    throw new TypeError('Unknown matrix type ' + JSON.stringify(format) + '.');\n  }\n});","map":{"version":3,"names":["factory","name","dependencies","createMatrix","_ref","typed","Matrix","DenseMatrix","SparseMatrix","_","_create","string","format","stringString","datatype","Array","data","storage","undefined","TypeError","JSON","stringify"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/type/matrix/function/matrix.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\nvar name = 'matrix';\nvar dependencies = ['typed', 'Matrix', 'DenseMatrix', 'SparseMatrix'];\nexport var createMatrix = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Matrix,\n    DenseMatrix,\n    SparseMatrix\n  } = _ref;\n\n  /**\n   * Create a Matrix. The function creates a new `math.Matrix` object from\n   * an `Array`. A Matrix has utility functions to manipulate the data in the\n   * matrix, like getting the size and getting or setting values in the matrix.\n   * Supported storage formats are 'dense' and 'sparse'.\n   *\n   * Syntax:\n   *\n   *    math.matrix()                         // creates an empty matrix using default storage format (dense).\n   *    math.matrix(data)                     // creates a matrix with initial data using default storage format (dense).\n   *    math.matrix('dense')                  // creates an empty matrix using the given storage format.\n   *    math.matrix(data, 'dense')            // creates a matrix with initial data using the given storage format.\n   *    math.matrix(data, 'sparse')           // creates a sparse matrix with initial data.\n   *    math.matrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.\n   *\n   * Examples:\n   *\n   *    let m = math.matrix([[1, 2], [3, 4]])\n   *    m.size()                        // Array [2, 2]\n   *    m.resize([3, 2], 5)\n   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]\n   *    m.get([1, 0])                    // number 3\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, number, string, unit, sparse\n   *\n   * @param {Array | Matrix} [data]    A multi dimensional array\n   * @param {string} [format]          The Matrix storage format, either `'dense'` or `'sparse'`\n   * @param {string} [datatype]        Type of the values\n   *\n   * @return {Matrix} The created matrix\n   */\n  return typed(name, {\n    '': function _() {\n      return _create([]);\n    },\n    string: function string(format) {\n      return _create([], format);\n    },\n    'string, string': function stringString(format, datatype) {\n      return _create([], format, datatype);\n    },\n    Array: function Array(data) {\n      return _create(data);\n    },\n    Matrix: function Matrix(data) {\n      return _create(data, data.storage());\n    },\n    'Array | Matrix, string': _create,\n    'Array | Matrix, string, string': _create\n  });\n  /**\n   * Create a new Matrix with given storage format\n   * @param {Array} data\n   * @param {string} [format]\n   * @param {string} [datatype]\n   * @returns {Matrix} Returns a new Matrix\n   * @private\n   */\n\n  function _create(data, format, datatype) {\n    // get storage format constructor\n    if (format === 'dense' || format === 'default' || format === undefined) {\n      return new DenseMatrix(data, datatype);\n    }\n\n    if (format === 'sparse') {\n      return new SparseMatrix(data, datatype);\n    }\n\n    throw new TypeError('Unknown matrix type ' + JSON.stringify(format) + '.');\n  }\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,2BAAxB;AACA,IAAIC,IAAI,GAAG,QAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,aAApB,EAAmC,cAAnC,CAAnB;AACA,OAAO,IAAIC,YAAY,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EAC3E,IACEC,KADF,GAKID,IALJ,CACEC,KADF;EAAA,IAEEC,MAFF,GAKIF,IALJ,CAEEE,MAFF;EAAA,IAGEC,WAHF,GAKIH,IALJ,CAGEG,WAHF;EAAA,IAIEC,YAJF,GAKIJ,IALJ,CAIEI,YAJF;EAOA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOH,KAAK,CAACJ,IAAD,EAAO;IACjB,IAAI,SAASQ,CAAT,GAAa;MACf,OAAOC,OAAO,CAAC,EAAD,CAAd;IACD,CAHgB;IAIjBC,MAAM,EAAE,SAASA,MAAT,CAAgBC,MAAhB,EAAwB;MAC9B,OAAOF,OAAO,CAAC,EAAD,EAAKE,MAAL,CAAd;IACD,CANgB;IAOjB,kBAAkB,SAASC,YAAT,CAAsBD,MAAtB,EAA8BE,QAA9B,EAAwC;MACxD,OAAOJ,OAAO,CAAC,EAAD,EAAKE,MAAL,EAAaE,QAAb,CAAd;IACD,CATgB;IAUjBC,KAAK,EAAE,SAASA,KAAT,CAAeC,IAAf,EAAqB;MAC1B,OAAON,OAAO,CAACM,IAAD,CAAd;IACD,CAZgB;IAajBV,MAAM,EAAE,SAASA,MAAT,CAAgBU,IAAhB,EAAsB;MAC5B,OAAON,OAAO,CAACM,IAAD,EAAOA,IAAI,CAACC,OAAL,EAAP,CAAd;IACD,CAfgB;IAgBjB,0BAA0BP,OAhBT;IAiBjB,kCAAkCA;EAjBjB,CAAP,CAAZ;EAmBA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE,SAASA,OAAT,CAAiBM,IAAjB,EAAuBJ,MAAvB,EAA+BE,QAA/B,EAAyC;IACvC;IACA,IAAIF,MAAM,KAAK,OAAX,IAAsBA,MAAM,KAAK,SAAjC,IAA8CA,MAAM,KAAKM,SAA7D,EAAwE;MACtE,OAAO,IAAIX,WAAJ,CAAgBS,IAAhB,EAAsBF,QAAtB,CAAP;IACD;;IAED,IAAIF,MAAM,KAAK,QAAf,EAAyB;MACvB,OAAO,IAAIJ,YAAJ,CAAiBQ,IAAjB,EAAuBF,QAAvB,CAAP;IACD;;IAED,MAAM,IAAIK,SAAJ,CAAc,yBAAyBC,IAAI,CAACC,SAAL,CAAeT,MAAf,CAAzB,GAAkD,GAAhE,CAAN;EACD;AACF,CAjF+C,CAAzC"},"metadata":{},"sourceType":"module"}