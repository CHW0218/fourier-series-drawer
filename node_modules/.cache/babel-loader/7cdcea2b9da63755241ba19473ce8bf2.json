{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { unaryPlusNumber } from '../../plain/number/index.js';\nvar name = 'unaryPlus';\nvar dependencies = ['typed', 'config', 'BigNumber'];\nexport var createUnaryPlus = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      BigNumber = _ref.BigNumber;\n  /**\n   * Unary plus operation.\n   * Boolean values and strings will be converted to a number, numeric values will be returned as is.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.unaryPlus(x)\n   *\n   * Examples:\n   *\n   *    math.unaryPlus(3.5)      // returns 3.5\n   *    math.unaryPlus(1)     // returns 1\n   *\n   * See also:\n   *\n   *    unaryMinus, add, subtract\n   *\n   * @param  {number | BigNumber | Fraction | string | Complex | Unit | Array | Matrix} x\n   *            Input value\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Returns the input value when numeric, converts to a number when input is non-numeric.\n   */\n\n  return typed(name, {\n    number: unaryPlusNumber,\n    Complex: function Complex(x) {\n      return x; // complex numbers are immutable\n    },\n    BigNumber: function BigNumber(x) {\n      return x; // bignumbers are immutable\n    },\n    Fraction: function Fraction(x) {\n      return x; // fractions are immutable\n    },\n    Unit: function Unit(x) {\n      return x.clone();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since unaryPlus(0) = 0\n      return deepMap(x, this, true);\n    },\n    'boolean | string': function booleanString(x) {\n      // convert to a number or bignumber\n      return config.number === 'BigNumber' ? new BigNumber(+x) : +x;\n    }\n  });\n});","map":{"version":3,"names":["factory","deepMap","unaryPlusNumber","name","dependencies","createUnaryPlus","_ref","typed","config","BigNumber","number","Complex","x","Fraction","Unit","clone","ArrayMatrix","booleanString"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/function/arithmetic/unaryPlus.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { unaryPlusNumber } from '../../plain/number/index.js';\nvar name = 'unaryPlus';\nvar dependencies = ['typed', 'config', 'BigNumber'];\nexport var createUnaryPlus = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    BigNumber\n  } = _ref;\n\n  /**\n   * Unary plus operation.\n   * Boolean values and strings will be converted to a number, numeric values will be returned as is.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.unaryPlus(x)\n   *\n   * Examples:\n   *\n   *    math.unaryPlus(3.5)      // returns 3.5\n   *    math.unaryPlus(1)     // returns 1\n   *\n   * See also:\n   *\n   *    unaryMinus, add, subtract\n   *\n   * @param  {number | BigNumber | Fraction | string | Complex | Unit | Array | Matrix} x\n   *            Input value\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Returns the input value when numeric, converts to a number when input is non-numeric.\n   */\n  return typed(name, {\n    number: unaryPlusNumber,\n    Complex: function Complex(x) {\n      return x; // complex numbers are immutable\n    },\n    BigNumber: function BigNumber(x) {\n      return x; // bignumbers are immutable\n    },\n    Fraction: function Fraction(x) {\n      return x; // fractions are immutable\n    },\n    Unit: function Unit(x) {\n      return x.clone();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since unaryPlus(0) = 0\n      return deepMap(x, this, true);\n    },\n    'boolean | string': function booleanString(x) {\n      // convert to a number or bignumber\n      return config.number === 'BigNumber' ? new BigNumber(+x) : +x;\n    }\n  });\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,SAASC,eAAT,QAAgC,6BAAhC;AACA,IAAIC,IAAI,GAAG,WAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,WAApB,CAAnB;AACA,OAAO,IAAIC,eAAe,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EAC9E,IACEC,KADF,GAIID,IAJJ,CACEC,KADF;EAAA,IAEEC,MAFF,GAIIF,IAJJ,CAEEE,MAFF;EAAA,IAGEC,SAHF,GAIIH,IAJJ,CAGEG,SAHF;EAMA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOF,KAAK,CAACJ,IAAD,EAAO;IACjBO,MAAM,EAAER,eADS;IAEjBS,OAAO,EAAE,SAASA,OAAT,CAAiBC,CAAjB,EAAoB;MAC3B,OAAOA,CAAP,CAD2B,CACjB;IACX,CAJgB;IAKjBH,SAAS,EAAE,SAASA,SAAT,CAAmBG,CAAnB,EAAsB;MAC/B,OAAOA,CAAP,CAD+B,CACrB;IACX,CAPgB;IAQjBC,QAAQ,EAAE,SAASA,QAAT,CAAkBD,CAAlB,EAAqB;MAC7B,OAAOA,CAAP,CAD6B,CACnB;IACX,CAVgB;IAWjBE,IAAI,EAAE,SAASA,IAAT,CAAcF,CAAd,EAAiB;MACrB,OAAOA,CAAC,CAACG,KAAF,EAAP;IACD,CAbgB;IAcjB,kBAAkB,SAASC,WAAT,CAAqBJ,CAArB,EAAwB;MACxC;MACA,OAAOX,OAAO,CAACW,CAAD,EAAI,IAAJ,EAAU,IAAV,CAAd;IACD,CAjBgB;IAkBjB,oBAAoB,SAASK,aAAT,CAAuBL,CAAvB,EAA0B;MAC5C;MACA,OAAOJ,MAAM,CAACE,MAAP,KAAkB,WAAlB,GAAgC,IAAID,SAAJ,CAAc,CAACG,CAAf,CAAhC,GAAoD,CAACA,CAA5D;IACD;EArBgB,CAAP,CAAZ;AAuBD,CAtDkD,CAA5C"},"metadata":{},"sourceType":"module"}