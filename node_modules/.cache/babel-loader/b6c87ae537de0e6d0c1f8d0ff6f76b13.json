{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'leafCount';\nvar dependencies = ['parse', 'typed'];\nexport var createLeafCount = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var parse = _ref.parse,\n      typed = _ref.typed; // This does the real work, but we don't have to recurse through\n  // a typed call if we separate it out\n\n  function countLeaves(node) {\n    var count = 0;\n    node.forEach(function (n) {\n      count += countLeaves(n);\n    });\n    return count || 1;\n  }\n  /**\n   * Gives the number of \"leaf nodes\" in the parse tree of the given expression\n   * A leaf node is one that has no subexpressions, essentially either a\n   * symbol or a constant. Note that `5!` has just one leaf, the '5'; the\n   * unary factorial operator does not add a leaf. On the other hand,\n   * function symbols do add leaves, so `sin(x)/cos(x)` has four leaves.\n   *\n   * The `simplify()` function should generally not increase the `leafCount()`\n   * of an expression, although currently there is no guarantee that it never\n   * does so. In many cases, `simplify()` reduces the leaf count.\n   *\n   * Syntax:\n   *\n   *     leafCount(expr)\n   *\n   * Examples:\n   *\n   *     math.leafCount('x') // 1\n   *     math.leafCount(math.parse('a*d-b*c')) // 4\n   *     math.leafCount('[a,b;c,d][0,1]') // 6\n   *\n   * See also:\n   *\n   *     simplify\n   *\n   * @param {Node|string} expr    The expression to count the leaves of\n   *\n   * @return {number}  The number of leaves of `expr`\n   *\n   */\n\n\n  return typed(name, {\n    string: function string(expr) {\n      return this(parse(expr));\n    },\n    Node: function Node(expr) {\n      return countLeaves(expr);\n    }\n  });\n});","map":{"version":3,"names":["factory","name","dependencies","createLeafCount","_ref","parse","typed","countLeaves","node","count","forEach","n","string","expr","Node"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/function/algebra/leafCount.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'leafCount';\nvar dependencies = ['parse', 'typed'];\nexport var createLeafCount = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    parse,\n    typed\n  } = _ref;\n\n  // This does the real work, but we don't have to recurse through\n  // a typed call if we separate it out\n  function countLeaves(node) {\n    var count = 0;\n    node.forEach(n => {\n      count += countLeaves(n);\n    });\n    return count || 1;\n  }\n  /**\n   * Gives the number of \"leaf nodes\" in the parse tree of the given expression\n   * A leaf node is one that has no subexpressions, essentially either a\n   * symbol or a constant. Note that `5!` has just one leaf, the '5'; the\n   * unary factorial operator does not add a leaf. On the other hand,\n   * function symbols do add leaves, so `sin(x)/cos(x)` has four leaves.\n   *\n   * The `simplify()` function should generally not increase the `leafCount()`\n   * of an expression, although currently there is no guarantee that it never\n   * does so. In many cases, `simplify()` reduces the leaf count.\n   *\n   * Syntax:\n   *\n   *     leafCount(expr)\n   *\n   * Examples:\n   *\n   *     math.leafCount('x') // 1\n   *     math.leafCount(math.parse('a*d-b*c')) // 4\n   *     math.leafCount('[a,b;c,d][0,1]') // 6\n   *\n   * See also:\n   *\n   *     simplify\n   *\n   * @param {Node|string} expr    The expression to count the leaves of\n   *\n   * @return {number}  The number of leaves of `expr`\n   *\n   */\n\n\n  return typed(name, {\n    string: function string(expr) {\n      return this(parse(expr));\n    },\n    Node: function Node(expr) {\n      return countLeaves(expr);\n    }\n  });\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,WAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,OAAV,CAAnB;AACA,OAAO,IAAIC,eAAe,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EAC9E,IACEC,KADF,GAGID,IAHJ,CACEC,KADF;EAAA,IAEEC,KAFF,GAGIF,IAHJ,CAEEE,KAFF,CAD8E,CAM9E;EACA;;EACA,SAASC,WAAT,CAAqBC,IAArB,EAA2B;IACzB,IAAIC,KAAK,GAAG,CAAZ;IACAD,IAAI,CAACE,OAAL,CAAa,UAAAC,CAAC,EAAI;MAChBF,KAAK,IAAIF,WAAW,CAACI,CAAD,CAApB;IACD,CAFD;IAGA,OAAOF,KAAK,IAAI,CAAhB;EACD;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EAGE,OAAOH,KAAK,CAACL,IAAD,EAAO;IACjBW,MAAM,EAAE,SAASA,MAAT,CAAgBC,IAAhB,EAAsB;MAC5B,OAAO,KAAKR,KAAK,CAACQ,IAAD,CAAV,CAAP;IACD,CAHgB;IAIjBC,IAAI,EAAE,SAASA,IAAT,CAAcD,IAAd,EAAoB;MACxB,OAAON,WAAW,CAACM,IAAD,CAAlB;IACD;EANgB,CAAP,CAAZ;AAQD,CAvDkD,CAA5C"},"metadata":{},"sourceType":"module"}