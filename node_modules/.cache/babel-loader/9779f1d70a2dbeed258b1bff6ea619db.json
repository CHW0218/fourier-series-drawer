{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { noBignumber, noMatrix } from '../../utils/noop.js';\nvar name = 'range';\nvar dependencies = ['typed', 'config', '?matrix', '?bignumber', 'smaller', 'smallerEq', 'larger', 'largerEq'];\nexport var createRange = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      matrix = _ref.matrix,\n      bignumber = _ref.bignumber,\n      smaller = _ref.smaller,\n      smallerEq = _ref.smallerEq,\n      larger = _ref.larger,\n      largerEq = _ref.largerEq;\n  /**\n   * Create an array from a range.\n   * By default, the range end is excluded. This can be customized by providing\n   * an extra parameter `includeEnd`.\n   *\n   * Syntax:\n   *\n   *     math.range(str [, includeEnd])               // Create a range from a string,\n   *                                                  // where the string contains the\n   *                                                  // start, optional step, and end,\n   *                                                  // separated by a colon.\n   *     math.range(start, end [, includeEnd])        // Create a range with start and\n   *                                                  // end and a step size of 1.\n   *     math.range(start, end, step [, includeEnd])  // Create a range with start, step,\n   *                                                  // and end.\n   *\n   * Where:\n   *\n   * - `str: string`\n   *   A string 'start:end' or 'start:step:end'\n   * - `start: {number | BigNumber}`\n   *   Start of the range\n   * - `end: number | BigNumber`\n   *   End of the range, excluded by default, included when parameter includeEnd=true\n   * - `step: number | BigNumber`\n   *   Step size. Default value is 1.\n   * - `includeEnd: boolean`\n   *   Option to specify whether to include the end or not. False by default.\n   *\n   * Examples:\n   *\n   *     math.range(2, 6)        // [2, 3, 4, 5]\n   *     math.range(2, -3, -1)   // [2, 1, 0, -1, -2]\n   *     math.range('2:1:6')     // [2, 3, 4, 5]\n   *     math.range(2, 6, true)  // [2, 3, 4, 5, 6]\n   *\n   * See also:\n   *\n   *     ones, zeros, size, subset\n   *\n   * @param {*} args   Parameters describing the ranges `start`, `end`, and optional `step`.\n   * @return {Array | Matrix} range\n   */\n\n  return typed(name, {\n    // TODO: simplify signatures when typed-function supports default values and optional arguments\n    // TODO: a number or boolean should not be converted to string here\n    string: _strRange,\n    'string, boolean': _strRange,\n    'number, number': function numberNumber(start, end) {\n      return _out(_rangeEx(start, end, 1));\n    },\n    'number, number, number': function numberNumberNumber(start, end, step) {\n      return _out(_rangeEx(start, end, step));\n    },\n    'number, number, boolean': function numberNumberBoolean(start, end, includeEnd) {\n      return includeEnd ? _out(_rangeInc(start, end, 1)) : _out(_rangeEx(start, end, 1));\n    },\n    'number, number, number, boolean': function numberNumberNumberBoolean(start, end, step, includeEnd) {\n      return includeEnd ? _out(_rangeInc(start, end, step)) : _out(_rangeEx(start, end, step));\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(start, end) {\n      var BigNumber = start.constructor;\n      return _out(_bigRangeEx(start, end, new BigNumber(1)));\n    },\n    'BigNumber, BigNumber, BigNumber': function BigNumberBigNumberBigNumber(start, end, step) {\n      return _out(_bigRangeEx(start, end, step));\n    },\n    'BigNumber, BigNumber, boolean': function BigNumberBigNumberBoolean(start, end, includeEnd) {\n      var BigNumber = start.constructor;\n      return includeEnd ? _out(_bigRangeInc(start, end, new BigNumber(1))) : _out(_bigRangeEx(start, end, new BigNumber(1)));\n    },\n    'BigNumber, BigNumber, BigNumber, boolean': function BigNumberBigNumberBigNumberBoolean(start, end, step, includeEnd) {\n      return includeEnd ? _out(_bigRangeInc(start, end, step)) : _out(_bigRangeEx(start, end, step));\n    }\n  });\n\n  function _out(arr) {\n    if (config.matrix === 'Matrix') {\n      return matrix ? matrix(arr) : noMatrix();\n    }\n\n    return arr;\n  }\n\n  function _strRange(str, includeEnd) {\n    var r = _parse(str);\n\n    if (!r) {\n      throw new SyntaxError('String \"' + str + '\" is no valid range');\n    }\n\n    var fn;\n\n    if (config.number === 'BigNumber') {\n      if (bignumber === undefined) {\n        noBignumber();\n      }\n\n      fn = includeEnd ? _bigRangeInc : _bigRangeEx;\n      return _out(fn(bignumber(r.start), bignumber(r.end), bignumber(r.step)));\n    } else {\n      fn = includeEnd ? _rangeInc : _rangeEx;\n      return _out(fn(r.start, r.end, r.step));\n    }\n  }\n  /**\n   * Create a range with numbers. End is excluded\n   * @param {number} start\n   * @param {number} end\n   * @param {number} step\n   * @returns {Array} range\n   * @private\n   */\n\n\n  function _rangeEx(start, end, step) {\n    var array = [];\n    var x = start;\n\n    if (step > 0) {\n      while (smaller(x, end)) {\n        array.push(x);\n        x += step;\n      }\n    } else if (step < 0) {\n      while (larger(x, end)) {\n        array.push(x);\n        x += step;\n      }\n    }\n\n    return array;\n  }\n  /**\n   * Create a range with numbers. End is included\n   * @param {number} start\n   * @param {number} end\n   * @param {number} step\n   * @returns {Array} range\n   * @private\n   */\n\n\n  function _rangeInc(start, end, step) {\n    var array = [];\n    var x = start;\n\n    if (step > 0) {\n      while (smallerEq(x, end)) {\n        array.push(x);\n        x += step;\n      }\n    } else if (step < 0) {\n      while (largerEq(x, end)) {\n        array.push(x);\n        x += step;\n      }\n    }\n\n    return array;\n  }\n  /**\n   * Create a range with big numbers. End is excluded\n   * @param {BigNumber} start\n   * @param {BigNumber} end\n   * @param {BigNumber} step\n   * @returns {Array} range\n   * @private\n   */\n\n\n  function _bigRangeEx(start, end, step) {\n    var zero = bignumber(0);\n    var array = [];\n    var x = start;\n\n    if (step.gt(zero)) {\n      while (smaller(x, end)) {\n        array.push(x);\n        x = x.plus(step);\n      }\n    } else if (step.lt(zero)) {\n      while (larger(x, end)) {\n        array.push(x);\n        x = x.plus(step);\n      }\n    }\n\n    return array;\n  }\n  /**\n   * Create a range with big numbers. End is included\n   * @param {BigNumber} start\n   * @param {BigNumber} end\n   * @param {BigNumber} step\n   * @returns {Array} range\n   * @private\n   */\n\n\n  function _bigRangeInc(start, end, step) {\n    var zero = bignumber(0);\n    var array = [];\n    var x = start;\n\n    if (step.gt(zero)) {\n      while (smallerEq(x, end)) {\n        array.push(x);\n        x = x.plus(step);\n      }\n    } else if (step.lt(zero)) {\n      while (largerEq(x, end)) {\n        array.push(x);\n        x = x.plus(step);\n      }\n    }\n\n    return array;\n  }\n  /**\n   * Parse a string into a range,\n   * The string contains the start, optional step, and end, separated by a colon.\n   * If the string does not contain a valid range, null is returned.\n   * For example str='0:2:11'.\n   * @param {string} str\n   * @return {{start: number, end: number, step: number} | null} range Object containing properties start, end, step\n   * @private\n   */\n\n\n  function _parse(str) {\n    var args = str.split(':'); // number\n\n    var nums = args.map(function (arg) {\n      // use Number and not parseFloat as Number returns NaN on invalid garbage in the string\n      return Number(arg);\n    });\n    var invalid = nums.some(function (num) {\n      return isNaN(num);\n    });\n\n    if (invalid) {\n      return null;\n    }\n\n    switch (nums.length) {\n      case 2:\n        return {\n          start: nums[0],\n          end: nums[1],\n          step: 1\n        };\n\n      case 3:\n        return {\n          start: nums[0],\n          end: nums[2],\n          step: nums[1]\n        };\n\n      default:\n        return null;\n    }\n  }\n});","map":{"version":3,"names":["factory","noBignumber","noMatrix","name","dependencies","createRange","_ref","typed","config","matrix","bignumber","smaller","smallerEq","larger","largerEq","string","_strRange","numberNumber","start","end","_out","_rangeEx","numberNumberNumber","step","numberNumberBoolean","includeEnd","_rangeInc","numberNumberNumberBoolean","BigNumberBigNumber","BigNumber","constructor","_bigRangeEx","BigNumberBigNumberBigNumber","BigNumberBigNumberBoolean","_bigRangeInc","BigNumberBigNumberBigNumberBoolean","arr","str","r","_parse","SyntaxError","fn","number","undefined","array","x","push","zero","gt","plus","lt","args","split","nums","map","arg","Number","invalid","some","num","isNaN","length"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/function/matrix/range.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { noBignumber, noMatrix } from '../../utils/noop.js';\nvar name = 'range';\nvar dependencies = ['typed', 'config', '?matrix', '?bignumber', 'smaller', 'smallerEq', 'larger', 'largerEq'];\nexport var createRange = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    bignumber,\n    smaller,\n    smallerEq,\n    larger,\n    largerEq\n  } = _ref;\n\n  /**\n   * Create an array from a range.\n   * By default, the range end is excluded. This can be customized by providing\n   * an extra parameter `includeEnd`.\n   *\n   * Syntax:\n   *\n   *     math.range(str [, includeEnd])               // Create a range from a string,\n   *                                                  // where the string contains the\n   *                                                  // start, optional step, and end,\n   *                                                  // separated by a colon.\n   *     math.range(start, end [, includeEnd])        // Create a range with start and\n   *                                                  // end and a step size of 1.\n   *     math.range(start, end, step [, includeEnd])  // Create a range with start, step,\n   *                                                  // and end.\n   *\n   * Where:\n   *\n   * - `str: string`\n   *   A string 'start:end' or 'start:step:end'\n   * - `start: {number | BigNumber}`\n   *   Start of the range\n   * - `end: number | BigNumber`\n   *   End of the range, excluded by default, included when parameter includeEnd=true\n   * - `step: number | BigNumber`\n   *   Step size. Default value is 1.\n   * - `includeEnd: boolean`\n   *   Option to specify whether to include the end or not. False by default.\n   *\n   * Examples:\n   *\n   *     math.range(2, 6)        // [2, 3, 4, 5]\n   *     math.range(2, -3, -1)   // [2, 1, 0, -1, -2]\n   *     math.range('2:1:6')     // [2, 3, 4, 5]\n   *     math.range(2, 6, true)  // [2, 3, 4, 5, 6]\n   *\n   * See also:\n   *\n   *     ones, zeros, size, subset\n   *\n   * @param {*} args   Parameters describing the ranges `start`, `end`, and optional `step`.\n   * @return {Array | Matrix} range\n   */\n  return typed(name, {\n    // TODO: simplify signatures when typed-function supports default values and optional arguments\n    // TODO: a number or boolean should not be converted to string here\n    string: _strRange,\n    'string, boolean': _strRange,\n    'number, number': function numberNumber(start, end) {\n      return _out(_rangeEx(start, end, 1));\n    },\n    'number, number, number': function numberNumberNumber(start, end, step) {\n      return _out(_rangeEx(start, end, step));\n    },\n    'number, number, boolean': function numberNumberBoolean(start, end, includeEnd) {\n      return includeEnd ? _out(_rangeInc(start, end, 1)) : _out(_rangeEx(start, end, 1));\n    },\n    'number, number, number, boolean': function numberNumberNumberBoolean(start, end, step, includeEnd) {\n      return includeEnd ? _out(_rangeInc(start, end, step)) : _out(_rangeEx(start, end, step));\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(start, end) {\n      var BigNumber = start.constructor;\n      return _out(_bigRangeEx(start, end, new BigNumber(1)));\n    },\n    'BigNumber, BigNumber, BigNumber': function BigNumberBigNumberBigNumber(start, end, step) {\n      return _out(_bigRangeEx(start, end, step));\n    },\n    'BigNumber, BigNumber, boolean': function BigNumberBigNumberBoolean(start, end, includeEnd) {\n      var BigNumber = start.constructor;\n      return includeEnd ? _out(_bigRangeInc(start, end, new BigNumber(1))) : _out(_bigRangeEx(start, end, new BigNumber(1)));\n    },\n    'BigNumber, BigNumber, BigNumber, boolean': function BigNumberBigNumberBigNumberBoolean(start, end, step, includeEnd) {\n      return includeEnd ? _out(_bigRangeInc(start, end, step)) : _out(_bigRangeEx(start, end, step));\n    }\n  });\n\n  function _out(arr) {\n    if (config.matrix === 'Matrix') {\n      return matrix ? matrix(arr) : noMatrix();\n    }\n\n    return arr;\n  }\n\n  function _strRange(str, includeEnd) {\n    var r = _parse(str);\n\n    if (!r) {\n      throw new SyntaxError('String \"' + str + '\" is no valid range');\n    }\n\n    var fn;\n\n    if (config.number === 'BigNumber') {\n      if (bignumber === undefined) {\n        noBignumber();\n      }\n\n      fn = includeEnd ? _bigRangeInc : _bigRangeEx;\n      return _out(fn(bignumber(r.start), bignumber(r.end), bignumber(r.step)));\n    } else {\n      fn = includeEnd ? _rangeInc : _rangeEx;\n      return _out(fn(r.start, r.end, r.step));\n    }\n  }\n  /**\n   * Create a range with numbers. End is excluded\n   * @param {number} start\n   * @param {number} end\n   * @param {number} step\n   * @returns {Array} range\n   * @private\n   */\n\n\n  function _rangeEx(start, end, step) {\n    var array = [];\n    var x = start;\n\n    if (step > 0) {\n      while (smaller(x, end)) {\n        array.push(x);\n        x += step;\n      }\n    } else if (step < 0) {\n      while (larger(x, end)) {\n        array.push(x);\n        x += step;\n      }\n    }\n\n    return array;\n  }\n  /**\n   * Create a range with numbers. End is included\n   * @param {number} start\n   * @param {number} end\n   * @param {number} step\n   * @returns {Array} range\n   * @private\n   */\n\n\n  function _rangeInc(start, end, step) {\n    var array = [];\n    var x = start;\n\n    if (step > 0) {\n      while (smallerEq(x, end)) {\n        array.push(x);\n        x += step;\n      }\n    } else if (step < 0) {\n      while (largerEq(x, end)) {\n        array.push(x);\n        x += step;\n      }\n    }\n\n    return array;\n  }\n  /**\n   * Create a range with big numbers. End is excluded\n   * @param {BigNumber} start\n   * @param {BigNumber} end\n   * @param {BigNumber} step\n   * @returns {Array} range\n   * @private\n   */\n\n\n  function _bigRangeEx(start, end, step) {\n    var zero = bignumber(0);\n    var array = [];\n    var x = start;\n\n    if (step.gt(zero)) {\n      while (smaller(x, end)) {\n        array.push(x);\n        x = x.plus(step);\n      }\n    } else if (step.lt(zero)) {\n      while (larger(x, end)) {\n        array.push(x);\n        x = x.plus(step);\n      }\n    }\n\n    return array;\n  }\n  /**\n   * Create a range with big numbers. End is included\n   * @param {BigNumber} start\n   * @param {BigNumber} end\n   * @param {BigNumber} step\n   * @returns {Array} range\n   * @private\n   */\n\n\n  function _bigRangeInc(start, end, step) {\n    var zero = bignumber(0);\n    var array = [];\n    var x = start;\n\n    if (step.gt(zero)) {\n      while (smallerEq(x, end)) {\n        array.push(x);\n        x = x.plus(step);\n      }\n    } else if (step.lt(zero)) {\n      while (largerEq(x, end)) {\n        array.push(x);\n        x = x.plus(step);\n      }\n    }\n\n    return array;\n  }\n  /**\n   * Parse a string into a range,\n   * The string contains the start, optional step, and end, separated by a colon.\n   * If the string does not contain a valid range, null is returned.\n   * For example str='0:2:11'.\n   * @param {string} str\n   * @return {{start: number, end: number, step: number} | null} range Object containing properties start, end, step\n   * @private\n   */\n\n\n  function _parse(str) {\n    var args = str.split(':'); // number\n\n    var nums = args.map(function (arg) {\n      // use Number and not parseFloat as Number returns NaN on invalid garbage in the string\n      return Number(arg);\n    });\n    var invalid = nums.some(function (num) {\n      return isNaN(num);\n    });\n\n    if (invalid) {\n      return null;\n    }\n\n    switch (nums.length) {\n      case 2:\n        return {\n          start: nums[0],\n          end: nums[1],\n          step: 1\n        };\n\n      case 3:\n        return {\n          start: nums[0],\n          end: nums[2],\n          step: nums[1]\n        };\n\n      default:\n        return null;\n    }\n  }\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,qBAAtC;AACA,IAAIC,IAAI,GAAG,OAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,SAApB,EAA+B,YAA/B,EAA6C,SAA7C,EAAwD,WAAxD,EAAqE,QAArE,EAA+E,UAA/E,CAAnB;AACA,OAAO,IAAIC,WAAW,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EAC1E,IACEC,KADF,GASID,IATJ,CACEC,KADF;EAAA,IAEEC,MAFF,GASIF,IATJ,CAEEE,MAFF;EAAA,IAGEC,MAHF,GASIH,IATJ,CAGEG,MAHF;EAAA,IAIEC,SAJF,GASIJ,IATJ,CAIEI,SAJF;EAAA,IAKEC,OALF,GASIL,IATJ,CAKEK,OALF;EAAA,IAMEC,SANF,GASIN,IATJ,CAMEM,SANF;EAAA,IAOEC,MAPF,GASIP,IATJ,CAOEO,MAPF;EAAA,IAQEC,QARF,GASIR,IATJ,CAQEQ,QARF;EAWA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOP,KAAK,CAACJ,IAAD,EAAO;IACjB;IACA;IACAY,MAAM,EAAEC,SAHS;IAIjB,mBAAmBA,SAJF;IAKjB,kBAAkB,SAASC,YAAT,CAAsBC,KAAtB,EAA6BC,GAA7B,EAAkC;MAClD,OAAOC,IAAI,CAACC,QAAQ,CAACH,KAAD,EAAQC,GAAR,EAAa,CAAb,CAAT,CAAX;IACD,CAPgB;IAQjB,0BAA0B,SAASG,kBAAT,CAA4BJ,KAA5B,EAAmCC,GAAnC,EAAwCI,IAAxC,EAA8C;MACtE,OAAOH,IAAI,CAACC,QAAQ,CAACH,KAAD,EAAQC,GAAR,EAAaI,IAAb,CAAT,CAAX;IACD,CAVgB;IAWjB,2BAA2B,SAASC,mBAAT,CAA6BN,KAA7B,EAAoCC,GAApC,EAAyCM,UAAzC,EAAqD;MAC9E,OAAOA,UAAU,GAAGL,IAAI,CAACM,SAAS,CAACR,KAAD,EAAQC,GAAR,EAAa,CAAb,CAAV,CAAP,GAAoCC,IAAI,CAACC,QAAQ,CAACH,KAAD,EAAQC,GAAR,EAAa,CAAb,CAAT,CAAzD;IACD,CAbgB;IAcjB,mCAAmC,SAASQ,yBAAT,CAAmCT,KAAnC,EAA0CC,GAA1C,EAA+CI,IAA/C,EAAqDE,UAArD,EAAiE;MAClG,OAAOA,UAAU,GAAGL,IAAI,CAACM,SAAS,CAACR,KAAD,EAAQC,GAAR,EAAaI,IAAb,CAAV,CAAP,GAAuCH,IAAI,CAACC,QAAQ,CAACH,KAAD,EAAQC,GAAR,EAAaI,IAAb,CAAT,CAA5D;IACD,CAhBgB;IAiBjB,wBAAwB,SAASK,kBAAT,CAA4BV,KAA5B,EAAmCC,GAAnC,EAAwC;MAC9D,IAAIU,SAAS,GAAGX,KAAK,CAACY,WAAtB;MACA,OAAOV,IAAI,CAACW,WAAW,CAACb,KAAD,EAAQC,GAAR,EAAa,IAAIU,SAAJ,CAAc,CAAd,CAAb,CAAZ,CAAX;IACD,CApBgB;IAqBjB,mCAAmC,SAASG,2BAAT,CAAqCd,KAArC,EAA4CC,GAA5C,EAAiDI,IAAjD,EAAuD;MACxF,OAAOH,IAAI,CAACW,WAAW,CAACb,KAAD,EAAQC,GAAR,EAAaI,IAAb,CAAZ,CAAX;IACD,CAvBgB;IAwBjB,iCAAiC,SAASU,yBAAT,CAAmCf,KAAnC,EAA0CC,GAA1C,EAA+CM,UAA/C,EAA2D;MAC1F,IAAII,SAAS,GAAGX,KAAK,CAACY,WAAtB;MACA,OAAOL,UAAU,GAAGL,IAAI,CAACc,YAAY,CAAChB,KAAD,EAAQC,GAAR,EAAa,IAAIU,SAAJ,CAAc,CAAd,CAAb,CAAb,CAAP,GAAsDT,IAAI,CAACW,WAAW,CAACb,KAAD,EAAQC,GAAR,EAAa,IAAIU,SAAJ,CAAc,CAAd,CAAb,CAAZ,CAA3E;IACD,CA3BgB;IA4BjB,4CAA4C,SAASM,kCAAT,CAA4CjB,KAA5C,EAAmDC,GAAnD,EAAwDI,IAAxD,EAA8DE,UAA9D,EAA0E;MACpH,OAAOA,UAAU,GAAGL,IAAI,CAACc,YAAY,CAAChB,KAAD,EAAQC,GAAR,EAAaI,IAAb,CAAb,CAAP,GAA0CH,IAAI,CAACW,WAAW,CAACb,KAAD,EAAQC,GAAR,EAAaI,IAAb,CAAZ,CAA/D;IACD;EA9BgB,CAAP,CAAZ;;EAiCA,SAASH,IAAT,CAAcgB,GAAd,EAAmB;IACjB,IAAI5B,MAAM,CAACC,MAAP,KAAkB,QAAtB,EAAgC;MAC9B,OAAOA,MAAM,GAAGA,MAAM,CAAC2B,GAAD,CAAT,GAAiBlC,QAAQ,EAAtC;IACD;;IAED,OAAOkC,GAAP;EACD;;EAED,SAASpB,SAAT,CAAmBqB,GAAnB,EAAwBZ,UAAxB,EAAoC;IAClC,IAAIa,CAAC,GAAGC,MAAM,CAACF,GAAD,CAAd;;IAEA,IAAI,CAACC,CAAL,EAAQ;MACN,MAAM,IAAIE,WAAJ,CAAgB,aAAaH,GAAb,GAAmB,qBAAnC,CAAN;IACD;;IAED,IAAII,EAAJ;;IAEA,IAAIjC,MAAM,CAACkC,MAAP,KAAkB,WAAtB,EAAmC;MACjC,IAAIhC,SAAS,KAAKiC,SAAlB,EAA6B;QAC3B1C,WAAW;MACZ;;MAEDwC,EAAE,GAAGhB,UAAU,GAAGS,YAAH,GAAkBH,WAAjC;MACA,OAAOX,IAAI,CAACqB,EAAE,CAAC/B,SAAS,CAAC4B,CAAC,CAACpB,KAAH,CAAV,EAAqBR,SAAS,CAAC4B,CAAC,CAACnB,GAAH,CAA9B,EAAuCT,SAAS,CAAC4B,CAAC,CAACf,IAAH,CAAhD,CAAH,CAAX;IACD,CAPD,MAOO;MACLkB,EAAE,GAAGhB,UAAU,GAAGC,SAAH,GAAeL,QAA9B;MACA,OAAOD,IAAI,CAACqB,EAAE,CAACH,CAAC,CAACpB,KAAH,EAAUoB,CAAC,CAACnB,GAAZ,EAAiBmB,CAAC,CAACf,IAAnB,CAAH,CAAX;IACD;EACF;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EAGE,SAASF,QAAT,CAAkBH,KAAlB,EAAyBC,GAAzB,EAA8BI,IAA9B,EAAoC;IAClC,IAAIqB,KAAK,GAAG,EAAZ;IACA,IAAIC,CAAC,GAAG3B,KAAR;;IAEA,IAAIK,IAAI,GAAG,CAAX,EAAc;MACZ,OAAOZ,OAAO,CAACkC,CAAD,EAAI1B,GAAJ,CAAd,EAAwB;QACtByB,KAAK,CAACE,IAAN,CAAWD,CAAX;QACAA,CAAC,IAAItB,IAAL;MACD;IACF,CALD,MAKO,IAAIA,IAAI,GAAG,CAAX,EAAc;MACnB,OAAOV,MAAM,CAACgC,CAAD,EAAI1B,GAAJ,CAAb,EAAuB;QACrByB,KAAK,CAACE,IAAN,CAAWD,CAAX;QACAA,CAAC,IAAItB,IAAL;MACD;IACF;;IAED,OAAOqB,KAAP;EACD;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EAGE,SAASlB,SAAT,CAAmBR,KAAnB,EAA0BC,GAA1B,EAA+BI,IAA/B,EAAqC;IACnC,IAAIqB,KAAK,GAAG,EAAZ;IACA,IAAIC,CAAC,GAAG3B,KAAR;;IAEA,IAAIK,IAAI,GAAG,CAAX,EAAc;MACZ,OAAOX,SAAS,CAACiC,CAAD,EAAI1B,GAAJ,CAAhB,EAA0B;QACxByB,KAAK,CAACE,IAAN,CAAWD,CAAX;QACAA,CAAC,IAAItB,IAAL;MACD;IACF,CALD,MAKO,IAAIA,IAAI,GAAG,CAAX,EAAc;MACnB,OAAOT,QAAQ,CAAC+B,CAAD,EAAI1B,GAAJ,CAAf,EAAyB;QACvByB,KAAK,CAACE,IAAN,CAAWD,CAAX;QACAA,CAAC,IAAItB,IAAL;MACD;IACF;;IAED,OAAOqB,KAAP;EACD;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EAGE,SAASb,WAAT,CAAqBb,KAArB,EAA4BC,GAA5B,EAAiCI,IAAjC,EAAuC;IACrC,IAAIwB,IAAI,GAAGrC,SAAS,CAAC,CAAD,CAApB;IACA,IAAIkC,KAAK,GAAG,EAAZ;IACA,IAAIC,CAAC,GAAG3B,KAAR;;IAEA,IAAIK,IAAI,CAACyB,EAAL,CAAQD,IAAR,CAAJ,EAAmB;MACjB,OAAOpC,OAAO,CAACkC,CAAD,EAAI1B,GAAJ,CAAd,EAAwB;QACtByB,KAAK,CAACE,IAAN,CAAWD,CAAX;QACAA,CAAC,GAAGA,CAAC,CAACI,IAAF,CAAO1B,IAAP,CAAJ;MACD;IACF,CALD,MAKO,IAAIA,IAAI,CAAC2B,EAAL,CAAQH,IAAR,CAAJ,EAAmB;MACxB,OAAOlC,MAAM,CAACgC,CAAD,EAAI1B,GAAJ,CAAb,EAAuB;QACrByB,KAAK,CAACE,IAAN,CAAWD,CAAX;QACAA,CAAC,GAAGA,CAAC,CAACI,IAAF,CAAO1B,IAAP,CAAJ;MACD;IACF;;IAED,OAAOqB,KAAP;EACD;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EAGE,SAASV,YAAT,CAAsBhB,KAAtB,EAA6BC,GAA7B,EAAkCI,IAAlC,EAAwC;IACtC,IAAIwB,IAAI,GAAGrC,SAAS,CAAC,CAAD,CAApB;IACA,IAAIkC,KAAK,GAAG,EAAZ;IACA,IAAIC,CAAC,GAAG3B,KAAR;;IAEA,IAAIK,IAAI,CAACyB,EAAL,CAAQD,IAAR,CAAJ,EAAmB;MACjB,OAAOnC,SAAS,CAACiC,CAAD,EAAI1B,GAAJ,CAAhB,EAA0B;QACxByB,KAAK,CAACE,IAAN,CAAWD,CAAX;QACAA,CAAC,GAAGA,CAAC,CAACI,IAAF,CAAO1B,IAAP,CAAJ;MACD;IACF,CALD,MAKO,IAAIA,IAAI,CAAC2B,EAAL,CAAQH,IAAR,CAAJ,EAAmB;MACxB,OAAOjC,QAAQ,CAAC+B,CAAD,EAAI1B,GAAJ,CAAf,EAAyB;QACvByB,KAAK,CAACE,IAAN,CAAWD,CAAX;QACAA,CAAC,GAAGA,CAAC,CAACI,IAAF,CAAO1B,IAAP,CAAJ;MACD;IACF;;IAED,OAAOqB,KAAP;EACD;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EAGE,SAASL,MAAT,CAAgBF,GAAhB,EAAqB;IACnB,IAAIc,IAAI,GAAGd,GAAG,CAACe,KAAJ,CAAU,GAAV,CAAX,CADmB,CACQ;;IAE3B,IAAIC,IAAI,GAAGF,IAAI,CAACG,GAAL,CAAS,UAAUC,GAAV,EAAe;MACjC;MACA,OAAOC,MAAM,CAACD,GAAD,CAAb;IACD,CAHU,CAAX;IAIA,IAAIE,OAAO,GAAGJ,IAAI,CAACK,IAAL,CAAU,UAAUC,GAAV,EAAe;MACrC,OAAOC,KAAK,CAACD,GAAD,CAAZ;IACD,CAFa,CAAd;;IAIA,IAAIF,OAAJ,EAAa;MACX,OAAO,IAAP;IACD;;IAED,QAAQJ,IAAI,CAACQ,MAAb;MACE,KAAK,CAAL;QACE,OAAO;UACL3C,KAAK,EAAEmC,IAAI,CAAC,CAAD,CADN;UAELlC,GAAG,EAAEkC,IAAI,CAAC,CAAD,CAFJ;UAGL9B,IAAI,EAAE;QAHD,CAAP;;MAMF,KAAK,CAAL;QACE,OAAO;UACLL,KAAK,EAAEmC,IAAI,CAAC,CAAD,CADN;UAELlC,GAAG,EAAEkC,IAAI,CAAC,CAAD,CAFJ;UAGL9B,IAAI,EAAE8B,IAAI,CAAC,CAAD;QAHL,CAAP;;MAMF;QACE,OAAO,IAAP;IAhBJ;EAkBD;AACF,CApR8C,CAAxC"},"metadata":{},"sourceType":"module"}