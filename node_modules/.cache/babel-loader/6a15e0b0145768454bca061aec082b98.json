{"ast":null,"code":"import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'isPrime';\nvar dependencies = ['typed'];\nexport var createIsPrime = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  /**\n   * Test whether a value is prime: has no divisors other than itself and one.\n   * The function supports type `number`, `bignumber`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isPrime(x)\n   *\n   * Examples:\n   *\n   *    math.isPrime(3)                     // returns true\n   *    math.isPrime(-2)                    // returns false\n   *    math.isPrime(0)                     // returns false\n   *    math.isPrime(-0)                    // returns false\n   *    math.isPrime(0.5)                   // returns false\n   *    math.isPrime('2')                   // returns true\n   *    math.isPrime([2, 17, 100])           // returns [true, true, false]\n   *\n   * See also:\n   *\n   *    isNumeric, isZero, isNegative, isInteger\n   *\n   * @param {number | BigNumber | Array | Matrix} x  Value to be tested\n   * @return {boolean}  Returns true when `x` is larger than zero.\n   *                    Throws an error in case of an unknown data type.\n   */\n\n  return typed(name, {\n    number: function number(x) {\n      if (x * 0 !== 0) {\n        return false;\n      }\n\n      if (x <= 3) {\n        return x > 1;\n      }\n\n      if (x % 2 === 0 || x % 3 === 0) {\n        return false;\n      }\n\n      for (var i = 5; i * i <= x; i += 6) {\n        if (x % i === 0 || x % (i + 2) === 0) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n    BigNumber: function BigNumber(n) {\n      if (n.toNumber() * 0 !== 0) {\n        return false;\n      }\n\n      if (n.lte(3)) return n.gt(1);\n      if (n.mod(2).eq(0) || n.mod(3).eq(0)) return false;\n\n      if (n.lt(Math.pow(2, 32))) {\n        var x = n.toNumber();\n\n        for (var i = 5; i * i <= x; i += 6) {\n          if (x % i === 0 || x % (i + 2) === 0) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n      function modPow(base, exponent, modulus) {\n        // exponent can be huge, use non-recursive variant\n        var accumulator = 1;\n\n        while (!exponent.eq(0)) {\n          if (exponent.mod(2).eq(0)) {\n            exponent = exponent.div(2);\n            base = base.mul(base).mod(modulus);\n          } else {\n            exponent = exponent.sub(1);\n            accumulator = base.mul(accumulator).mod(modulus);\n          }\n        }\n\n        return accumulator;\n      } // https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test#Deterministic_variants\n\n\n      var Decimal = n.constructor.clone({\n        precision: n.toFixed(0).length * 2\n      });\n      n = new Decimal(n);\n      var r = 0;\n      var d = n.sub(1);\n\n      while (d.mod(2).eq(0)) {\n        d = d.div(2);\n        r += 1;\n      }\n\n      var bases = null; // https://en.wikipedia.org/wiki/Miller–Rabin_primality_test#Testing_against_small_sets_of_bases\n\n      if (n.lt('3317044064679887385961981')) {\n        bases = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41].filter(function (x) {\n          return x < n;\n        });\n      } else {\n        var max = Math.min(n.toNumber() - 2, Math.floor(2 * Math.pow(n.toFixed(0).length * Math.log(10), 2)));\n        bases = [];\n\n        for (var _i = 2; _i <= max; _i += 1) {\n          bases.push(max);\n        }\n      }\n\n      for (var _i2 = 0; _i2 < bases.length; _i2 += 1) {\n        var a = bases[_i2];\n        var adn = modPow(n.sub(n).add(a), d, n);\n\n        if (!adn.eq(1)) {\n          for (var _i3 = 0, _x = adn; !_x.eq(n.sub(1)); _i3 += 1, _x = _x.mul(_x).mod(n)) {\n            if (_i3 === r - 1) {\n              return false;\n            }\n          }\n        }\n      }\n\n      return true;\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  });\n});","map":{"version":3,"names":["deepMap","factory","name","dependencies","createIsPrime","_ref","typed","number","x","i","BigNumber","n","toNumber","lte","gt","mod","eq","lt","Math","pow","modPow","base","exponent","modulus","accumulator","div","mul","sub","Decimal","constructor","clone","precision","toFixed","length","r","d","bases","filter","max","min","floor","log","_i","push","_i2","a","adn","add","_i3","_x","ArrayMatrix"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/function/utils/isPrime.js"],"sourcesContent":["import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'isPrime';\nvar dependencies = ['typed'];\nexport var createIsPrime = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n\n  /**\n   * Test whether a value is prime: has no divisors other than itself and one.\n   * The function supports type `number`, `bignumber`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isPrime(x)\n   *\n   * Examples:\n   *\n   *    math.isPrime(3)                     // returns true\n   *    math.isPrime(-2)                    // returns false\n   *    math.isPrime(0)                     // returns false\n   *    math.isPrime(-0)                    // returns false\n   *    math.isPrime(0.5)                   // returns false\n   *    math.isPrime('2')                   // returns true\n   *    math.isPrime([2, 17, 100])           // returns [true, true, false]\n   *\n   * See also:\n   *\n   *    isNumeric, isZero, isNegative, isInteger\n   *\n   * @param {number | BigNumber | Array | Matrix} x  Value to be tested\n   * @return {boolean}  Returns true when `x` is larger than zero.\n   *                    Throws an error in case of an unknown data type.\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x * 0 !== 0) {\n        return false;\n      }\n\n      if (x <= 3) {\n        return x > 1;\n      }\n\n      if (x % 2 === 0 || x % 3 === 0) {\n        return false;\n      }\n\n      for (var i = 5; i * i <= x; i += 6) {\n        if (x % i === 0 || x % (i + 2) === 0) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n    BigNumber: function BigNumber(n) {\n      if (n.toNumber() * 0 !== 0) {\n        return false;\n      }\n\n      if (n.lte(3)) return n.gt(1);\n      if (n.mod(2).eq(0) || n.mod(3).eq(0)) return false;\n\n      if (n.lt(Math.pow(2, 32))) {\n        var x = n.toNumber();\n\n        for (var i = 5; i * i <= x; i += 6) {\n          if (x % i === 0 || x % (i + 2) === 0) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n      function modPow(base, exponent, modulus) {\n        // exponent can be huge, use non-recursive variant\n        var accumulator = 1;\n\n        while (!exponent.eq(0)) {\n          if (exponent.mod(2).eq(0)) {\n            exponent = exponent.div(2);\n            base = base.mul(base).mod(modulus);\n          } else {\n            exponent = exponent.sub(1);\n            accumulator = base.mul(accumulator).mod(modulus);\n          }\n        }\n\n        return accumulator;\n      } // https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test#Deterministic_variants\n\n\n      var Decimal = n.constructor.clone({\n        precision: n.toFixed(0).length * 2\n      });\n      n = new Decimal(n);\n      var r = 0;\n      var d = n.sub(1);\n\n      while (d.mod(2).eq(0)) {\n        d = d.div(2);\n        r += 1;\n      }\n\n      var bases = null; // https://en.wikipedia.org/wiki/Miller–Rabin_primality_test#Testing_against_small_sets_of_bases\n\n      if (n.lt('3317044064679887385961981')) {\n        bases = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41].filter(x => x < n);\n      } else {\n        var max = Math.min(n.toNumber() - 2, Math.floor(2 * Math.pow(n.toFixed(0).length * Math.log(10), 2)));\n        bases = [];\n\n        for (var _i = 2; _i <= max; _i += 1) {\n          bases.push(max);\n        }\n      }\n\n      for (var _i2 = 0; _i2 < bases.length; _i2 += 1) {\n        var a = bases[_i2];\n        var adn = modPow(n.sub(n).add(a), d, n);\n\n        if (!adn.eq(1)) {\n          for (var _i3 = 0, _x = adn; !_x.eq(n.sub(1)); _i3 += 1, _x = _x.mul(_x).mod(n)) {\n            if (_i3 === r - 1) {\n              return false;\n            }\n          }\n        }\n      }\n\n      return true;\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  });\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}