{"ast":null,"code":"import { isBigNumber } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'distance';\nvar dependencies = ['typed', 'addScalar', 'subtract', 'divideScalar', 'multiplyScalar', 'unaryMinus', 'sqrt', 'abs'];\nexport var createDistance = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      addScalar = _ref.addScalar,\n      subtract = _ref.subtract,\n      multiplyScalar = _ref.multiplyScalar,\n      divideScalar = _ref.divideScalar,\n      unaryMinus = _ref.unaryMinus,\n      sqrt = _ref.sqrt,\n      abs = _ref.abs;\n  /**\n    * Calculates:\n    *    The eucledian distance between two points in N-dimensional spaces.\n    *    Distance between point and a line in 2 and 3 dimensional spaces.\n    *    Pairwise distance between a set of 2D or 3D points\n    * NOTE:\n    *    When substituting coefficients of a line(a, b and c), use ax + by + c = 0 instead of ax + by = c\n    *    For parametric equation of a 3D line, x0, y0, z0, a, b, c are from: (x−x0, y−y0, z−z0) = t(a, b, c)\n    *\n    * Syntax:\n    *    math.distance([x1, y1], [x2, y2])\n    *-   math.distance({pointOneX: 4, pointOneY: 5}, {pointTwoX: 2, pointTwoY: 7})\n    *    math.distance([x1, y1, z1], [x2, y2, z2])\n    *    math.distance({pointOneX: 4, pointOneY: 5, pointOneZ: 8}, {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})\n    *    math.distance([x1, y1, ... , N1], [x2, y2, ... , N2])\n    *    math.distance([[A], [B], [C]...])\n    *    math.distance([x1, y1], [LinePtX1, LinePtY1], [LinePtX2, LinePtY2])\n    *    math.distance({pointX: 1, pointY: 4}, {lineOnePtX: 6, lineOnePtY: 3}, {lineTwoPtX: 2, lineTwoPtY: 8})\n    *    math.distance([x1, y1, z1], [LinePtX1, LinePtY1, LinePtZ1], [LinePtX2, LinePtY2, LinePtZ2])\n    *    math.distance({pointX: 1, pointY: 4, pointZ: 7}, {lineOnePtX: 6, lineOnePtY: 3, lineOnePtZ: 4}, {lineTwoPtX: 2, lineTwoPtY: 8, lineTwoPtZ: 5})\n    *    math.distance([x1, y1], [xCoeffLine, yCoeffLine, constant])\n    *    math.distance({pointX: 10, pointY: 10}, {xCoeffLine: 8, yCoeffLine: 1, constant: 3})\n    *    math.distance([x1, y1, z1], [x0, y0, z0, a-tCoeff, b-tCoeff, c-tCoeff]) point and parametric equation of 3D line\n    *    math.distance([x, y, z], [x0, y0, z0, a, b, c])\n    *    math.distance({pointX: 2, pointY: 5, pointZ: 9}, {x0: 4, y0: 6, z0: 3, a: 4, b: 2, c: 0})\n    *\n    * Examples:\n    *    math.distance([0,0], [4,4])                     // Returns 5.6569\n    *    math.distance(\n    *     {pointOneX: 0, pointOneY: 0},\n    *     {pointTwoX: 10, pointTwoY: 10})                // Returns 14.142135623730951\n    *    math.distance([1, 0, 1], [4, -2, 2])            // Returns 3.74166\n    *    math.distance(\n    *     {pointOneX: 4, pointOneY: 5, pointOneZ: 8},\n    *     {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})    // Returns 3\n    *    math.distance([1, 0, 1, 0], [0, -1, 0, -1])     // Returns 2\n    *    math.distance([[1, 2], [1, 2], [1, 3]])         // Returns [0, 1, 1]\n    *    math.distance([[1,2,4], [1,2,6], [8,1,3]])      // Returns [2, 7.14142842854285, 7.681145747868608]\n    *    math.distance([10, 10], [8, 1, 3])              // Returns 11.535230316796387\n    *    math.distance([10, 10], [2, 3], [-8, 0])        // Returns 8.759953130362847\n    *    math.distance(\n    *     {pointX: 1, pointY: 4},\n    *     {lineOnePtX: 6, lineOnePtY: 3},\n    *     {lineTwoPtX: 2, lineTwoPtY: 8})                // Returns 2.720549372624744\n    *    math.distance([2, 3, 1], [1, 1, 2, 5, 0, 1])    // Returns 2.3204774044612857\n    *    math.distance(\n    *     {pointX: 2, pointY: 3, pointZ: 1},\n    *     {x0: 1, y0: 1, z0: 2, a: 5, b: 0, c: 1}        // Returns 2.3204774044612857\n    *\n    * @param {Array | Matrix | Object} x    Co-ordinates of first point\n    * @param {Array | Matrix | Object} y    Co-ordinates of second point\n    * @return {Number | BigNumber} Returns the distance from two/three points\n  */\n\n  return typed(name, {\n    'Array, Array, Array': function ArrayArrayArray(x, y, z) {\n      // Point to Line 2D (x=Point, y=LinePoint1, z=LinePoint2)\n      if (x.length === 2 && y.length === 2 && z.length === 2) {\n        if (!_2d(x)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');\n        }\n\n        if (!_2d(y)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');\n        }\n\n        if (!_2d(z)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');\n        }\n\n        var m = divideScalar(subtract(z[1], z[0]), subtract(y[1], y[0]));\n        var xCoeff = multiplyScalar(multiplyScalar(m, m), y[0]);\n        var yCoeff = unaryMinus(multiplyScalar(m, y[0]));\n        var constant = x[1];\n        return _distancePointLine2D(x[0], x[1], xCoeff, yCoeff, constant);\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Object, Object, Object': function ObjectObjectObject(x, y, z) {\n      if (Object.keys(x).length === 2 && Object.keys(y).length === 2 && Object.keys(z).length === 2) {\n        if (!_2d(x)) {\n          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');\n        }\n\n        if (!_2d(y)) {\n          throw new TypeError('Values of lineOnePtX and lineOnePtY should be numbers or BigNumbers');\n        }\n\n        if (!_2d(z)) {\n          throw new TypeError('Values of lineTwoPtX and lineTwoPtY should be numbers or BigNumbers');\n        }\n\n        if ('pointX' in x && 'pointY' in x && 'lineOnePtX' in y && 'lineOnePtY' in y && 'lineTwoPtX' in z && 'lineTwoPtY' in z) {\n          var m = divideScalar(subtract(z.lineTwoPtY, z.lineTwoPtX), subtract(y.lineOnePtY, y.lineOnePtX));\n          var xCoeff = multiplyScalar(multiplyScalar(m, m), y.lineOnePtX);\n          var yCoeff = unaryMinus(multiplyScalar(m, y.lineOnePtX));\n          var constant = x.pointX;\n          return _distancePointLine2D(x.pointX, x.pointY, xCoeff, yCoeff, constant);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // Point to Line 2D (x=[pointX, pointY], y=[x-coeff, y-coeff, const])\n      if (x.length === 2 && y.length === 3) {\n        if (!_2d(x)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');\n        }\n\n        if (!_3d(y)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');\n        }\n\n        return _distancePointLine2D(x[0], x[1], y[0], y[1], y[2]);\n      } else if (x.length === 3 && y.length === 6) {\n        // Point to Line 3D\n        if (!_3d(x)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');\n        }\n\n        if (!_parametricLine(y)) {\n          throw new TypeError('Array with 6 numbers or BigNumbers expected for second argument');\n        }\n\n        return _distancePointLine3D(x[0], x[1], x[2], y[0], y[1], y[2], y[3], y[4], y[5]);\n      } else if (x.length === y.length && x.length > 0) {\n        // Point to Point N-dimensions\n        if (!_containsOnlyNumbers(x)) {\n          throw new TypeError('All values of an array should be numbers or BigNumbers');\n        }\n\n        if (!_containsOnlyNumbers(y)) {\n          throw new TypeError('All values of an array should be numbers or BigNumbers');\n        }\n\n        return _euclideanDistance(x, y);\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Object, Object': function ObjectObject(x, y) {\n      if (Object.keys(x).length === 2 && Object.keys(y).length === 3) {\n        if (!_2d(x)) {\n          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');\n        }\n\n        if (!_3d(y)) {\n          throw new TypeError('Values of xCoeffLine, yCoeffLine and constant should be numbers or BigNumbers');\n        }\n\n        if ('pointX' in x && 'pointY' in x && 'xCoeffLine' in y && 'yCoeffLine' in y && 'constant' in y) {\n          return _distancePointLine2D(x.pointX, x.pointY, y.xCoeffLine, y.yCoeffLine, y.constant);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 6) {\n        // Point to Line 3D\n        if (!_3d(x)) {\n          throw new TypeError('Values of pointX, pointY and pointZ should be numbers or BigNumbers');\n        }\n\n        if (!_parametricLine(y)) {\n          throw new TypeError('Values of x0, y0, z0, a, b and c should be numbers or BigNumbers');\n        }\n\n        if ('pointX' in x && 'pointY' in x && 'x0' in y && 'y0' in y && 'z0' in y && 'a' in y && 'b' in y && 'c' in y) {\n          return _distancePointLine3D(x.pointX, x.pointY, x.pointZ, y.x0, y.y0, y.z0, y.a, y.b, y.c);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else if (Object.keys(x).length === 2 && Object.keys(y).length === 2) {\n        // Point to Point 2D\n        if (!_2d(x)) {\n          throw new TypeError('Values of pointOneX and pointOneY should be numbers or BigNumbers');\n        }\n\n        if (!_2d(y)) {\n          throw new TypeError('Values of pointTwoX and pointTwoY should be numbers or BigNumbers');\n        }\n\n        if ('pointOneX' in x && 'pointOneY' in x && 'pointTwoX' in y && 'pointTwoY' in y) {\n          return _euclideanDistance([x.pointOneX, x.pointOneY], [y.pointTwoX, y.pointTwoY]);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 3) {\n        // Point to Point 3D\n        if (!_3d(x)) {\n          throw new TypeError('Values of pointOneX, pointOneY and pointOneZ should be numbers or BigNumbers');\n        }\n\n        if (!_3d(y)) {\n          throw new TypeError('Values of pointTwoX, pointTwoY and pointTwoZ should be numbers or BigNumbers');\n        }\n\n        if ('pointOneX' in x && 'pointOneY' in x && 'pointOneZ' in x && 'pointTwoX' in y && 'pointTwoY' in y && 'pointTwoZ' in y) {\n          return _euclideanDistance([x.pointOneX, x.pointOneY, x.pointOneZ], [y.pointTwoX, y.pointTwoY, y.pointTwoZ]);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    Array: function Array(arr) {\n      if (!_pairwise(arr)) {\n        throw new TypeError('Incorrect array format entered for pairwise distance calculation');\n      }\n\n      return _distancePairwise(arr);\n    }\n  });\n\n  function _isNumber(a) {\n    // distance supports numbers and bignumbers\n    return typeof a === 'number' || isBigNumber(a);\n  }\n\n  function _2d(a) {\n    // checks if the number of arguments are correct in count and are valid (should be numbers)\n    if (a.constructor !== Array) {\n      a = _objectToArray(a);\n    }\n\n    return _isNumber(a[0]) && _isNumber(a[1]);\n  }\n\n  function _3d(a) {\n    // checks if the number of arguments are correct in count and are valid (should be numbers)\n    if (a.constructor !== Array) {\n      a = _objectToArray(a);\n    }\n\n    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]);\n  }\n\n  function _containsOnlyNumbers(a) {\n    // checks if the number of arguments are correct in count and are valid (should be numbers)\n    if (!Array.isArray(a)) {\n      a = _objectToArray(a);\n    }\n\n    return a.every(_isNumber);\n  }\n\n  function _parametricLine(a) {\n    if (a.constructor !== Array) {\n      a = _objectToArray(a);\n    }\n\n    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]) && _isNumber(a[3]) && _isNumber(a[4]) && _isNumber(a[5]);\n  }\n\n  function _objectToArray(o) {\n    var keys = Object.keys(o);\n    var a = [];\n\n    for (var i = 0; i < keys.length; i++) {\n      a.push(o[keys[i]]);\n    }\n\n    return a;\n  }\n\n  function _pairwise(a) {\n    // checks for valid arguments passed to _distancePairwise(Array)\n    if (a[0].length === 2 && _isNumber(a[0][0]) && _isNumber(a[0][1])) {\n      if (a.some(function (aI) {\n        return aI.length !== 2 || !_isNumber(aI[0]) || !_isNumber(aI[1]);\n      })) {\n        return false;\n      }\n    } else if (a[0].length === 3 && _isNumber(a[0][0]) && _isNumber(a[0][1]) && _isNumber(a[0][2])) {\n      if (a.some(function (aI) {\n        return aI.length !== 3 || !_isNumber(aI[0]) || !_isNumber(aI[1]) || !_isNumber(aI[2]);\n      })) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n\n    return true;\n  }\n\n  function _distancePointLine2D(x, y, a, b, c) {\n    var num = abs(addScalar(addScalar(multiplyScalar(a, x), multiplyScalar(b, y)), c));\n    var den = sqrt(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)));\n    return divideScalar(num, den);\n  }\n\n  function _distancePointLine3D(x, y, z, x0, y0, z0, a, b, c) {\n    var num = [subtract(multiplyScalar(subtract(y0, y), c), multiplyScalar(subtract(z0, z), b)), subtract(multiplyScalar(subtract(z0, z), a), multiplyScalar(subtract(x0, x), c)), subtract(multiplyScalar(subtract(x0, x), b), multiplyScalar(subtract(y0, y), a))];\n    num = sqrt(addScalar(addScalar(multiplyScalar(num[0], num[0]), multiplyScalar(num[1], num[1])), multiplyScalar(num[2], num[2])));\n    var den = sqrt(addScalar(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)), multiplyScalar(c, c)));\n    return divideScalar(num, den);\n  }\n\n  function _euclideanDistance(x, y) {\n    var vectorSize = x.length;\n    var result = 0;\n    var diff = 0;\n\n    for (var i = 0; i < vectorSize; i++) {\n      diff = subtract(x[i], y[i]);\n      result = addScalar(multiplyScalar(diff, diff), result);\n    }\n\n    return sqrt(result);\n  }\n\n  function _distancePairwise(a) {\n    var result = [];\n    var pointA = [];\n    var pointB = [];\n\n    for (var i = 0; i < a.length - 1; i++) {\n      for (var j = i + 1; j < a.length; j++) {\n        if (a[0].length === 2) {\n          pointA = [a[i][0], a[i][1]];\n          pointB = [a[j][0], a[j][1]];\n        } else if (a[0].length === 3) {\n          pointA = [a[i][0], a[i][1], a[i][2]];\n          pointB = [a[j][0], a[j][1], a[j][2]];\n        }\n\n        result.push(_euclideanDistance(pointA, pointB));\n      }\n    }\n\n    return result;\n  }\n});","map":{"version":3,"names":["isBigNumber","factory","name","dependencies","createDistance","_ref","typed","addScalar","subtract","multiplyScalar","divideScalar","unaryMinus","sqrt","abs","ArrayArrayArray","x","y","z","length","_2d","TypeError","m","xCoeff","yCoeff","constant","_distancePointLine2D","ObjectObjectObject","Object","keys","lineTwoPtY","lineTwoPtX","lineOnePtY","lineOnePtX","pointX","pointY","ArrayArray","_3d","_parametricLine","_distancePointLine3D","_containsOnlyNumbers","_euclideanDistance","ObjectObject","xCoeffLine","yCoeffLine","pointZ","x0","y0","z0","a","b","c","pointOneX","pointOneY","pointTwoX","pointTwoY","pointOneZ","pointTwoZ","Array","arr","_pairwise","_distancePairwise","_isNumber","constructor","_objectToArray","isArray","every","o","i","push","some","aI","num","den","vectorSize","result","diff","pointA","pointB","j"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/function/geometry/distance.js"],"sourcesContent":["import { isBigNumber } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'distance';\nvar dependencies = ['typed', 'addScalar', 'subtract', 'divideScalar', 'multiplyScalar', 'unaryMinus', 'sqrt', 'abs'];\nexport var createDistance = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    addScalar,\n    subtract,\n    multiplyScalar,\n    divideScalar,\n    unaryMinus,\n    sqrt,\n    abs\n  } = _ref;\n\n  /**\n    * Calculates:\n    *    The eucledian distance between two points in N-dimensional spaces.\n    *    Distance between point and a line in 2 and 3 dimensional spaces.\n    *    Pairwise distance between a set of 2D or 3D points\n    * NOTE:\n    *    When substituting coefficients of a line(a, b and c), use ax + by + c = 0 instead of ax + by = c\n    *    For parametric equation of a 3D line, x0, y0, z0, a, b, c are from: (x−x0, y−y0, z−z0) = t(a, b, c)\n    *\n    * Syntax:\n    *    math.distance([x1, y1], [x2, y2])\n    *-   math.distance({pointOneX: 4, pointOneY: 5}, {pointTwoX: 2, pointTwoY: 7})\n    *    math.distance([x1, y1, z1], [x2, y2, z2])\n    *    math.distance({pointOneX: 4, pointOneY: 5, pointOneZ: 8}, {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})\n    *    math.distance([x1, y1, ... , N1], [x2, y2, ... , N2])\n    *    math.distance([[A], [B], [C]...])\n    *    math.distance([x1, y1], [LinePtX1, LinePtY1], [LinePtX2, LinePtY2])\n    *    math.distance({pointX: 1, pointY: 4}, {lineOnePtX: 6, lineOnePtY: 3}, {lineTwoPtX: 2, lineTwoPtY: 8})\n    *    math.distance([x1, y1, z1], [LinePtX1, LinePtY1, LinePtZ1], [LinePtX2, LinePtY2, LinePtZ2])\n    *    math.distance({pointX: 1, pointY: 4, pointZ: 7}, {lineOnePtX: 6, lineOnePtY: 3, lineOnePtZ: 4}, {lineTwoPtX: 2, lineTwoPtY: 8, lineTwoPtZ: 5})\n    *    math.distance([x1, y1], [xCoeffLine, yCoeffLine, constant])\n    *    math.distance({pointX: 10, pointY: 10}, {xCoeffLine: 8, yCoeffLine: 1, constant: 3})\n    *    math.distance([x1, y1, z1], [x0, y0, z0, a-tCoeff, b-tCoeff, c-tCoeff]) point and parametric equation of 3D line\n    *    math.distance([x, y, z], [x0, y0, z0, a, b, c])\n    *    math.distance({pointX: 2, pointY: 5, pointZ: 9}, {x0: 4, y0: 6, z0: 3, a: 4, b: 2, c: 0})\n    *\n    * Examples:\n    *    math.distance([0,0], [4,4])                     // Returns 5.6569\n    *    math.distance(\n    *     {pointOneX: 0, pointOneY: 0},\n    *     {pointTwoX: 10, pointTwoY: 10})                // Returns 14.142135623730951\n    *    math.distance([1, 0, 1], [4, -2, 2])            // Returns 3.74166\n    *    math.distance(\n    *     {pointOneX: 4, pointOneY: 5, pointOneZ: 8},\n    *     {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})    // Returns 3\n    *    math.distance([1, 0, 1, 0], [0, -1, 0, -1])     // Returns 2\n    *    math.distance([[1, 2], [1, 2], [1, 3]])         // Returns [0, 1, 1]\n    *    math.distance([[1,2,4], [1,2,6], [8,1,3]])      // Returns [2, 7.14142842854285, 7.681145747868608]\n    *    math.distance([10, 10], [8, 1, 3])              // Returns 11.535230316796387\n    *    math.distance([10, 10], [2, 3], [-8, 0])        // Returns 8.759953130362847\n    *    math.distance(\n    *     {pointX: 1, pointY: 4},\n    *     {lineOnePtX: 6, lineOnePtY: 3},\n    *     {lineTwoPtX: 2, lineTwoPtY: 8})                // Returns 2.720549372624744\n    *    math.distance([2, 3, 1], [1, 1, 2, 5, 0, 1])    // Returns 2.3204774044612857\n    *    math.distance(\n    *     {pointX: 2, pointY: 3, pointZ: 1},\n    *     {x0: 1, y0: 1, z0: 2, a: 5, b: 0, c: 1}        // Returns 2.3204774044612857\n    *\n    * @param {Array | Matrix | Object} x    Co-ordinates of first point\n    * @param {Array | Matrix | Object} y    Co-ordinates of second point\n    * @return {Number | BigNumber} Returns the distance from two/three points\n  */\n  return typed(name, {\n    'Array, Array, Array': function ArrayArrayArray(x, y, z) {\n      // Point to Line 2D (x=Point, y=LinePoint1, z=LinePoint2)\n      if (x.length === 2 && y.length === 2 && z.length === 2) {\n        if (!_2d(x)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');\n        }\n\n        if (!_2d(y)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');\n        }\n\n        if (!_2d(z)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');\n        }\n\n        var m = divideScalar(subtract(z[1], z[0]), subtract(y[1], y[0]));\n        var xCoeff = multiplyScalar(multiplyScalar(m, m), y[0]);\n        var yCoeff = unaryMinus(multiplyScalar(m, y[0]));\n        var constant = x[1];\n        return _distancePointLine2D(x[0], x[1], xCoeff, yCoeff, constant);\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Object, Object, Object': function ObjectObjectObject(x, y, z) {\n      if (Object.keys(x).length === 2 && Object.keys(y).length === 2 && Object.keys(z).length === 2) {\n        if (!_2d(x)) {\n          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');\n        }\n\n        if (!_2d(y)) {\n          throw new TypeError('Values of lineOnePtX and lineOnePtY should be numbers or BigNumbers');\n        }\n\n        if (!_2d(z)) {\n          throw new TypeError('Values of lineTwoPtX and lineTwoPtY should be numbers or BigNumbers');\n        }\n\n        if ('pointX' in x && 'pointY' in x && 'lineOnePtX' in y && 'lineOnePtY' in y && 'lineTwoPtX' in z && 'lineTwoPtY' in z) {\n          var m = divideScalar(subtract(z.lineTwoPtY, z.lineTwoPtX), subtract(y.lineOnePtY, y.lineOnePtX));\n          var xCoeff = multiplyScalar(multiplyScalar(m, m), y.lineOnePtX);\n          var yCoeff = unaryMinus(multiplyScalar(m, y.lineOnePtX));\n          var constant = x.pointX;\n          return _distancePointLine2D(x.pointX, x.pointY, xCoeff, yCoeff, constant);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // Point to Line 2D (x=[pointX, pointY], y=[x-coeff, y-coeff, const])\n      if (x.length === 2 && y.length === 3) {\n        if (!_2d(x)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');\n        }\n\n        if (!_3d(y)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');\n        }\n\n        return _distancePointLine2D(x[0], x[1], y[0], y[1], y[2]);\n      } else if (x.length === 3 && y.length === 6) {\n        // Point to Line 3D\n        if (!_3d(x)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');\n        }\n\n        if (!_parametricLine(y)) {\n          throw new TypeError('Array with 6 numbers or BigNumbers expected for second argument');\n        }\n\n        return _distancePointLine3D(x[0], x[1], x[2], y[0], y[1], y[2], y[3], y[4], y[5]);\n      } else if (x.length === y.length && x.length > 0) {\n        // Point to Point N-dimensions\n        if (!_containsOnlyNumbers(x)) {\n          throw new TypeError('All values of an array should be numbers or BigNumbers');\n        }\n\n        if (!_containsOnlyNumbers(y)) {\n          throw new TypeError('All values of an array should be numbers or BigNumbers');\n        }\n\n        return _euclideanDistance(x, y);\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Object, Object': function ObjectObject(x, y) {\n      if (Object.keys(x).length === 2 && Object.keys(y).length === 3) {\n        if (!_2d(x)) {\n          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');\n        }\n\n        if (!_3d(y)) {\n          throw new TypeError('Values of xCoeffLine, yCoeffLine and constant should be numbers or BigNumbers');\n        }\n\n        if ('pointX' in x && 'pointY' in x && 'xCoeffLine' in y && 'yCoeffLine' in y && 'constant' in y) {\n          return _distancePointLine2D(x.pointX, x.pointY, y.xCoeffLine, y.yCoeffLine, y.constant);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 6) {\n        // Point to Line 3D\n        if (!_3d(x)) {\n          throw new TypeError('Values of pointX, pointY and pointZ should be numbers or BigNumbers');\n        }\n\n        if (!_parametricLine(y)) {\n          throw new TypeError('Values of x0, y0, z0, a, b and c should be numbers or BigNumbers');\n        }\n\n        if ('pointX' in x && 'pointY' in x && 'x0' in y && 'y0' in y && 'z0' in y && 'a' in y && 'b' in y && 'c' in y) {\n          return _distancePointLine3D(x.pointX, x.pointY, x.pointZ, y.x0, y.y0, y.z0, y.a, y.b, y.c);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else if (Object.keys(x).length === 2 && Object.keys(y).length === 2) {\n        // Point to Point 2D\n        if (!_2d(x)) {\n          throw new TypeError('Values of pointOneX and pointOneY should be numbers or BigNumbers');\n        }\n\n        if (!_2d(y)) {\n          throw new TypeError('Values of pointTwoX and pointTwoY should be numbers or BigNumbers');\n        }\n\n        if ('pointOneX' in x && 'pointOneY' in x && 'pointTwoX' in y && 'pointTwoY' in y) {\n          return _euclideanDistance([x.pointOneX, x.pointOneY], [y.pointTwoX, y.pointTwoY]);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 3) {\n        // Point to Point 3D\n        if (!_3d(x)) {\n          throw new TypeError('Values of pointOneX, pointOneY and pointOneZ should be numbers or BigNumbers');\n        }\n\n        if (!_3d(y)) {\n          throw new TypeError('Values of pointTwoX, pointTwoY and pointTwoZ should be numbers or BigNumbers');\n        }\n\n        if ('pointOneX' in x && 'pointOneY' in x && 'pointOneZ' in x && 'pointTwoX' in y && 'pointTwoY' in y && 'pointTwoZ' in y) {\n          return _euclideanDistance([x.pointOneX, x.pointOneY, x.pointOneZ], [y.pointTwoX, y.pointTwoY, y.pointTwoZ]);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    Array: function Array(arr) {\n      if (!_pairwise(arr)) {\n        throw new TypeError('Incorrect array format entered for pairwise distance calculation');\n      }\n\n      return _distancePairwise(arr);\n    }\n  });\n\n  function _isNumber(a) {\n    // distance supports numbers and bignumbers\n    return typeof a === 'number' || isBigNumber(a);\n  }\n\n  function _2d(a) {\n    // checks if the number of arguments are correct in count and are valid (should be numbers)\n    if (a.constructor !== Array) {\n      a = _objectToArray(a);\n    }\n\n    return _isNumber(a[0]) && _isNumber(a[1]);\n  }\n\n  function _3d(a) {\n    // checks if the number of arguments are correct in count and are valid (should be numbers)\n    if (a.constructor !== Array) {\n      a = _objectToArray(a);\n    }\n\n    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]);\n  }\n\n  function _containsOnlyNumbers(a) {\n    // checks if the number of arguments are correct in count and are valid (should be numbers)\n    if (!Array.isArray(a)) {\n      a = _objectToArray(a);\n    }\n\n    return a.every(_isNumber);\n  }\n\n  function _parametricLine(a) {\n    if (a.constructor !== Array) {\n      a = _objectToArray(a);\n    }\n\n    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]) && _isNumber(a[3]) && _isNumber(a[4]) && _isNumber(a[5]);\n  }\n\n  function _objectToArray(o) {\n    var keys = Object.keys(o);\n    var a = [];\n\n    for (var i = 0; i < keys.length; i++) {\n      a.push(o[keys[i]]);\n    }\n\n    return a;\n  }\n\n  function _pairwise(a) {\n    // checks for valid arguments passed to _distancePairwise(Array)\n    if (a[0].length === 2 && _isNumber(a[0][0]) && _isNumber(a[0][1])) {\n      if (a.some(aI => aI.length !== 2 || !_isNumber(aI[0]) || !_isNumber(aI[1]))) {\n        return false;\n      }\n    } else if (a[0].length === 3 && _isNumber(a[0][0]) && _isNumber(a[0][1]) && _isNumber(a[0][2])) {\n      if (a.some(aI => aI.length !== 3 || !_isNumber(aI[0]) || !_isNumber(aI[1]) || !_isNumber(aI[2]))) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n\n    return true;\n  }\n\n  function _distancePointLine2D(x, y, a, b, c) {\n    var num = abs(addScalar(addScalar(multiplyScalar(a, x), multiplyScalar(b, y)), c));\n    var den = sqrt(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)));\n    return divideScalar(num, den);\n  }\n\n  function _distancePointLine3D(x, y, z, x0, y0, z0, a, b, c) {\n    var num = [subtract(multiplyScalar(subtract(y0, y), c), multiplyScalar(subtract(z0, z), b)), subtract(multiplyScalar(subtract(z0, z), a), multiplyScalar(subtract(x0, x), c)), subtract(multiplyScalar(subtract(x0, x), b), multiplyScalar(subtract(y0, y), a))];\n    num = sqrt(addScalar(addScalar(multiplyScalar(num[0], num[0]), multiplyScalar(num[1], num[1])), multiplyScalar(num[2], num[2])));\n    var den = sqrt(addScalar(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)), multiplyScalar(c, c)));\n    return divideScalar(num, den);\n  }\n\n  function _euclideanDistance(x, y) {\n    var vectorSize = x.length;\n    var result = 0;\n    var diff = 0;\n\n    for (var i = 0; i < vectorSize; i++) {\n      diff = subtract(x[i], y[i]);\n      result = addScalar(multiplyScalar(diff, diff), result);\n    }\n\n    return sqrt(result);\n  }\n\n  function _distancePairwise(a) {\n    var result = [];\n    var pointA = [];\n    var pointB = [];\n\n    for (var i = 0; i < a.length - 1; i++) {\n      for (var j = i + 1; j < a.length; j++) {\n        if (a[0].length === 2) {\n          pointA = [a[i][0], a[i][1]];\n          pointB = [a[j][0], a[j][1]];\n        } else if (a[0].length === 3) {\n          pointA = [a[i][0], a[i][1], a[i][2]];\n          pointB = [a[j][0], a[j][1], a[j][2]];\n        }\n\n        result.push(_euclideanDistance(pointA, pointB));\n      }\n    }\n\n    return result;\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}