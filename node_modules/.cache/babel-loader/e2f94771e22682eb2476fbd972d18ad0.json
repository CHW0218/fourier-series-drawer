{"ast":null,"code":"import { isNumber } from './is.js';\n/**\n * @typedef {{sign: '+' | '-' | '', coefficients: number[], exponent: number}} SplitValue\n */\n\n/**\n * Check if a number is integer\n * @param {number | boolean} value\n * @return {boolean} isInteger\n */\n\nexport function isInteger(value) {\n  if (typeof value === 'boolean') {\n    return true;\n  }\n\n  return isFinite(value) ? value === Math.round(value) : false;\n}\n/**\n * Calculate the sign of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var sign = /* #__PURE__ */Math.sign || function (x) {\n  if (x > 0) {\n    return 1;\n  } else if (x < 0) {\n    return -1;\n  } else {\n    return 0;\n  }\n};\n/**\n * Calculate the base-2 logarithm of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var log2 = /* #__PURE__ */Math.log2 || function log2(x) {\n  return Math.log(x) / Math.LN2;\n};\n/**\n * Calculate the base-10 logarithm of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var log10 = /* #__PURE__ */Math.log10 || function log10(x) {\n  return Math.log(x) / Math.LN10;\n};\n/**\n * Calculate the natural logarithm of a number + 1\n * @param {number} x\n * @returns {number}\n */\n\nexport var log1p = /* #__PURE__ */Math.log1p || function (x) {\n  return Math.log(x + 1);\n};\n/**\n * Calculate cubic root for a number\n *\n * Code from es6-shim.js:\n *   https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1564-L1577\n *\n * @param {number} x\n * @returns {number} Returns the cubic root of x\n */\n\nexport var cbrt = /* #__PURE__ */Math.cbrt || function cbrt(x) {\n  if (x === 0) {\n    return x;\n  }\n\n  var negate = x < 0;\n  var result;\n\n  if (negate) {\n    x = -x;\n  }\n\n  if (isFinite(x)) {\n    result = Math.exp(Math.log(x) / 3); // from https://en.wikipedia.org/wiki/Cube_root#Numerical_methods\n\n    result = (x / (result * result) + 2 * result) / 3;\n  } else {\n    result = x;\n  }\n\n  return negate ? -result : result;\n};\n/**\n * Calculates exponentiation minus 1\n * @param {number} x\n * @return {number} res\n */\n\nexport var expm1 = /* #__PURE__ */Math.expm1 || function expm1(x) {\n  return x >= 2e-4 || x <= -2e-4 ? Math.exp(x) - 1 : x + x * x / 2 + x * x * x / 6;\n};\n/**\n * Formats a number in a given base\n * @param {number} n\n * @param {number} base\n * @param {number} size\n * @returns {string}\n */\n\nfunction formatNumberToBase(n, base, size) {\n  var prefixes = {\n    2: '0b',\n    8: '0o',\n    16: '0x'\n  };\n  var prefix = prefixes[base];\n  var suffix = '';\n\n  if (size) {\n    if (size < 1) {\n      throw new Error('size must be in greater than 0');\n    }\n\n    if (!isInteger(size)) {\n      throw new Error('size must be an integer');\n    }\n\n    if (n > Math.pow(2, size - 1) - 1 || n < -Math.pow(2, size - 1)) {\n      throw new Error(\"Value must be in range [-2^\".concat(size - 1, \", 2^\").concat(size - 1, \"-1]\"));\n    }\n\n    if (!isInteger(n)) {\n      throw new Error('Value must be an integer');\n    }\n\n    if (n < 0) {\n      n = n + Math.pow(2, size);\n    }\n\n    suffix = \"i\".concat(size);\n  }\n\n  var sign = '';\n\n  if (n < 0) {\n    n = -n;\n    sign = '-';\n  }\n\n  return \"\".concat(sign).concat(prefix).concat(n.toString(base)).concat(suffix);\n}\n/**\n * Convert a number to a formatted string representation.\n *\n * Syntax:\n *\n *    format(value)\n *    format(value, options)\n *    format(value, precision)\n *    format(value, fn)\n *\n * Where:\n *\n *    {number} value   The value to be formatted\n *    {Object} options An object with formatting options. Available options:\n *                     {string} notation\n *                         Number notation. Choose from:\n *                         'fixed'          Always use regular number notation.\n *                                          For example '123.40' and '14000000'\n *                         'exponential'    Always use exponential notation.\n *                                          For example '1.234e+2' and '1.4e+7'\n *                         'engineering'    Always use engineering notation.\n *                                          For example '123.4e+0' and '14.0e+6'\n *                         'auto' (default) Regular number notation for numbers\n *                                          having an absolute value between\n *                                          `lowerExp` and `upperExp` bounds, and\n *                                          uses exponential notation elsewhere.\n *                                          Lower bound is included, upper bound\n *                                          is excluded.\n *                                          For example '123.4' and '1.4e7'.\n *                         'bin', 'oct, or\n *                         'hex'            Format the number using binary, octal,\n *                                          or hexadecimal notation.\n *                                          For example '0b1101' and '0x10fe'.\n *                     {number} wordSize    The word size in bits to use for formatting\n *                                          in binary, octal, or hexadecimal notation.\n *                                          To be used only with 'bin', 'oct', or 'hex'\n *                                          values for 'notation' option. When this option\n *                                          is defined the value is formatted as a signed\n *                                          twos complement integer of the given word size\n *                                          and the size suffix is appended to the output.\n *                                          For example\n *                                          format(-1, {notation: 'hex', wordSize: 8}) === '0xffi8'.\n *                                          Default value is undefined.\n *                     {number} precision   A number between 0 and 16 to round\n *                                          the digits of the number.\n *                                          In case of notations 'exponential',\n *                                          'engineering', and 'auto',\n *                                          `precision` defines the total\n *                                          number of significant digits returned.\n *                                          In case of notation 'fixed',\n *                                          `precision` defines the number of\n *                                          significant digits after the decimal\n *                                          point.\n *                                          `precision` is undefined by default,\n *                                          not rounding any digits.\n *                     {number} lowerExp    Exponent determining the lower boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `-3`.\n *                     {number} upperExp    Exponent determining the upper boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `5`.\n *    {Function} fn    A custom formatting function. Can be used to override the\n *                     built-in notations. Function `fn` is called with `value` as\n *                     parameter and must return a string. Is useful for example to\n *                     format all values inside a matrix in a particular way.\n *\n * Examples:\n *\n *    format(6.4)                                        // '6.4'\n *    format(1240000)                                    // '1.24e6'\n *    format(1/3)                                        // '0.3333333333333333'\n *    format(1/3, 3)                                     // '0.333'\n *    format(21385, 2)                                   // '21000'\n *    format(12.071, {notation: 'fixed'})                // '12'\n *    format(2.3,    {notation: 'fixed', precision: 2})  // '2.30'\n *    format(52.8,   {notation: 'exponential'})          // '5.28e+1'\n *    format(12345678, {notation: 'engineering'})        // '12.345678e+6'\n *\n * @param {number} value\n * @param {Object | Function | number} [options]\n * @return {string} str The formatted value\n */\n\n\nexport function format(value, options) {\n  if (typeof options === 'function') {\n    // handle format(value, fn)\n    return options(value);\n  } // handle special cases\n\n\n  if (value === Infinity) {\n    return 'Infinity';\n  } else if (value === -Infinity) {\n    return '-Infinity';\n  } else if (isNaN(value)) {\n    return 'NaN';\n  } // default values for options\n\n\n  var notation = 'auto';\n  var precision;\n  var wordSize;\n\n  if (options) {\n    // determine notation from options\n    if (options.notation) {\n      notation = options.notation;\n    } // determine precision from options\n\n\n    if (isNumber(options)) {\n      precision = options;\n    } else if (isNumber(options.precision)) {\n      precision = options.precision;\n    }\n\n    if (options.wordSize) {\n      wordSize = options.wordSize;\n\n      if (typeof wordSize !== 'number') {\n        throw new Error('Option \"wordSize\" must be a number');\n      }\n    }\n  } // handle the various notations\n\n\n  switch (notation) {\n    case 'fixed':\n      return toFixed(value, precision);\n\n    case 'exponential':\n      return toExponential(value, precision);\n\n    case 'engineering':\n      return toEngineering(value, precision);\n\n    case 'bin':\n      return formatNumberToBase(value, 2, wordSize);\n\n    case 'oct':\n      return formatNumberToBase(value, 8, wordSize);\n\n    case 'hex':\n      return formatNumberToBase(value, 16, wordSize);\n\n    case 'auto':\n      // remove trailing zeros after the decimal point\n      return toPrecision(value, precision, options && options).replace(/((\\.\\d*?)(0+))($|e)/, function () {\n        var digits = arguments[2];\n        var e = arguments[4];\n        return digits !== '.' ? digits + e : e;\n      });\n\n    default:\n      throw new Error('Unknown notation \"' + notation + '\". ' + 'Choose \"auto\", \"exponential\", \"fixed\", \"bin\", \"oct\", or \"hex.');\n  }\n}\n/**\n * Split a number into sign, coefficients, and exponent\n * @param {number | string} value\n * @return {SplitValue}\n *              Returns an object containing sign, coefficients, and exponent\n */\n\nexport function splitNumber(value) {\n  // parse the input value\n  var match = String(value).toLowerCase().match(/^(-?)(\\d+\\.?\\d*)(e([+-]?\\d+))?$/);\n\n  if (!match) {\n    throw new SyntaxError('Invalid number ' + value);\n  }\n\n  var sign = match[1];\n  var digits = match[2];\n  var exponent = parseFloat(match[4] || '0');\n  var dot = digits.indexOf('.');\n  exponent += dot !== -1 ? dot - 1 : digits.length - 1;\n  var coefficients = digits.replace('.', '') // remove the dot (must be removed before removing leading zeros)\n  .replace(/^0*/, function (zeros) {\n    // remove leading zeros, add their count to the exponent\n    exponent -= zeros.length;\n    return '';\n  }).replace(/0*$/, '') // remove trailing zeros\n  .split('').map(function (d) {\n    return parseInt(d);\n  });\n\n  if (coefficients.length === 0) {\n    coefficients.push(0);\n    exponent++;\n  }\n\n  return {\n    sign: sign,\n    coefficients: coefficients,\n    exponent: exponent\n  };\n}\n/**\n * Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'\n * @param {number | string} value\n * @param {number} [precision]        Optional number of significant figures to return.\n */\n\nexport function toEngineering(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n\n  var split = splitNumber(value);\n  var rounded = roundDigits(split, precision);\n  var e = rounded.exponent;\n  var c = rounded.coefficients; // find nearest lower multiple of 3 for exponent\n\n  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3;\n\n  if (isNumber(precision)) {\n    // add zeroes to give correct sig figs\n    while (precision > c.length || e - newExp + 1 > c.length) {\n      c.push(0);\n    }\n  } else {\n    // concatenate coefficients with necessary zeros\n    // add zeros if necessary (for example: 1e+8 -> 100e+6)\n    var missingZeros = Math.abs(e - newExp) - (c.length - 1);\n\n    for (var i = 0; i < missingZeros; i++) {\n      c.push(0);\n    }\n  } // find difference in exponents\n\n\n  var expDiff = Math.abs(e - newExp);\n  var decimalIdx = 1; // push decimal index over by expDiff times\n\n  while (expDiff > 0) {\n    decimalIdx++;\n    expDiff--;\n  } // if all coefficient values are zero after the decimal point and precision is unset, don't add a decimal value.\n  // otherwise concat with the rest of the coefficients\n\n\n  var decimals = c.slice(decimalIdx).join('');\n  var decimalVal = isNumber(precision) && decimals.length || decimals.match(/[1-9]/) ? '.' + decimals : '';\n  var str = c.slice(0, decimalIdx).join('') + decimalVal + 'e' + (e >= 0 ? '+' : '') + newExp.toString();\n  return rounded.sign + str;\n}\n/**\n * Format a number with fixed notation.\n * @param {number | string} value\n * @param {number} [precision=undefined]  Optional number of decimals after the\n *                                        decimal point. null by default.\n */\n\nexport function toFixed(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n\n  var splitValue = splitNumber(value);\n  var rounded = typeof precision === 'number' ? roundDigits(splitValue, splitValue.exponent + 1 + precision) : splitValue;\n  var c = rounded.coefficients;\n  var p = rounded.exponent + 1; // exponent may have changed\n  // append zeros if needed\n\n  var pp = p + (precision || 0);\n\n  if (c.length < pp) {\n    c = c.concat(zeros(pp - c.length));\n  } // prepend zeros if needed\n\n\n  if (p < 0) {\n    c = zeros(-p + 1).concat(c);\n    p = 1;\n  } // insert a dot if needed\n\n\n  if (p < c.length) {\n    c.splice(p, 0, p === 0 ? '0.' : '.');\n  }\n\n  return rounded.sign + c.join('');\n}\n/**\n * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'\n * @param {number | string} value\n * @param {number} [precision]  Number of digits in formatted output.\n *                              If not provided, the maximum available digits\n *                              is used.\n */\n\nexport function toExponential(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  } // round if needed, else create a clone\n\n\n  var split = splitNumber(value);\n  var rounded = precision ? roundDigits(split, precision) : split;\n  var c = rounded.coefficients;\n  var e = rounded.exponent; // append zeros if needed\n\n  if (c.length < precision) {\n    c = c.concat(zeros(precision - c.length));\n  } // format as `C.CCCe+EEE` or `C.CCCe-EEE`\n\n\n  var first = c.shift();\n  return rounded.sign + first + (c.length > 0 ? '.' + c.join('') : '') + 'e' + (e >= 0 ? '+' : '') + e;\n}\n/**\n * Format a number with a certain precision\n * @param {number | string} value\n * @param {number} [precision=undefined] Optional number of digits.\n * @param {{lowerExp: number | undefined, upperExp: number | undefined}} [options]\n *                                       By default:\n *                                         lowerExp = -3 (incl)\n *                                         upper = +5 (excl)\n * @return {string}\n */\n\nexport function toPrecision(value, precision, options) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  } // determine lower and upper bound for exponential notation.\n\n\n  var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;\n  var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5;\n  var split = splitNumber(value);\n  var rounded = precision ? roundDigits(split, precision) : split;\n\n  if (rounded.exponent < lowerExp || rounded.exponent >= upperExp) {\n    // exponential notation\n    return toExponential(value, precision);\n  } else {\n    var c = rounded.coefficients;\n    var e = rounded.exponent; // append trailing zeros\n\n    if (c.length < precision) {\n      c = c.concat(zeros(precision - c.length));\n    } // append trailing zeros\n    // TODO: simplify the next statement\n\n\n    c = c.concat(zeros(e - c.length + 1 + (c.length < precision ? precision - c.length : 0))); // prepend zeros\n\n    c = zeros(-e).concat(c);\n    var dot = e > 0 ? e : 0;\n\n    if (dot < c.length - 1) {\n      c.splice(dot + 1, 0, '.');\n    }\n\n    return rounded.sign + c.join('');\n  }\n}\n/**\n * Round the number of digits of a number *\n * @param {SplitValue} split       A value split with .splitNumber(value)\n * @param {number} precision  A positive integer\n * @return {SplitValue}\n *              Returns an object containing sign, coefficients, and exponent\n *              with rounded digits\n */\n\nexport function roundDigits(split, precision) {\n  // create a clone\n  var rounded = {\n    sign: split.sign,\n    coefficients: split.coefficients,\n    exponent: split.exponent\n  };\n  var c = rounded.coefficients; // prepend zeros if needed\n\n  while (precision <= 0) {\n    c.unshift(0);\n    rounded.exponent++;\n    precision++;\n  }\n\n  if (c.length > precision) {\n    var removed = c.splice(precision, c.length - precision);\n\n    if (removed[0] >= 5) {\n      var i = precision - 1;\n      c[i]++;\n\n      while (c[i] === 10) {\n        c.pop();\n\n        if (i === 0) {\n          c.unshift(0);\n          rounded.exponent++;\n          i++;\n        }\n\n        i--;\n        c[i]++;\n      }\n    }\n  }\n\n  return rounded;\n}\n/**\n * Create an array filled with zeros.\n * @param {number} length\n * @return {Array}\n */\n\nfunction zeros(length) {\n  var arr = [];\n\n  for (var i = 0; i < length; i++) {\n    arr.push(0);\n  }\n\n  return arr;\n}\n/**\n * Count the number of significant digits of a number.\n *\n * For example:\n *   2.34 returns 3\n *   0.0034 returns 2\n *   120.5e+30 returns 4\n *\n * @param {number} value\n * @return {number} digits   Number of significant digits\n */\n\n\nexport function digits(value) {\n  return value.toExponential().replace(/e.*$/, '') // remove exponential notation\n  .replace(/^0\\.?0*|\\./, '') // remove decimal point and leading zeros\n  .length;\n}\n/**\n * Minimum number added to one that makes the result different than one\n */\n\nexport var DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;\n/**\n * Compares two floating point numbers.\n * @param {number} x          First value to compare\n * @param {number} y          Second value to compare\n * @param {number} [epsilon]  The maximum relative difference between x and y\n *                            If epsilon is undefined or null, the function will\n *                            test whether x and y are exactly equal.\n * @return {boolean} whether the two numbers are nearly equal\n*/\n\nexport function nearlyEqual(x, y, epsilon) {\n  // if epsilon is null or undefined, test whether x and y are exactly equal\n  if (epsilon === null || epsilon === undefined) {\n    return x === y;\n  }\n\n  if (x === y) {\n    return true;\n  } // NaN\n\n\n  if (isNaN(x) || isNaN(y)) {\n    return false;\n  } // at this point x and y should be finite\n\n\n  if (isFinite(x) && isFinite(y)) {\n    // check numbers are very close, needed when comparing numbers near zero\n    var diff = Math.abs(x - y);\n\n    if (diff < DBL_EPSILON) {\n      return true;\n    } else {\n      // use relative error\n      return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;\n    }\n  } // Infinite and Number or negative Infinite and positive Infinite cases\n\n\n  return false;\n}\n/**\n * Calculate the hyperbolic arccos of a number\n * @param {number} x\n * @return {number}\n */\n\nexport var acosh = Math.acosh || function (x) {\n  return Math.log(Math.sqrt(x * x - 1) + x);\n};\nexport var asinh = Math.asinh || function (x) {\n  return Math.log(Math.sqrt(x * x + 1) + x);\n};\n/**\n * Calculate the hyperbolic arctangent of a number\n * @param {number} x\n * @return {number}\n */\n\nexport var atanh = Math.atanh || function (x) {\n  return Math.log((1 + x) / (1 - x)) / 2;\n};\n/**\n * Calculate the hyperbolic cosine of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var cosh = Math.cosh || function (x) {\n  return (Math.exp(x) + Math.exp(-x)) / 2;\n};\n/**\n * Calculate the hyperbolic sine of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var sinh = Math.sinh || function (x) {\n  return (Math.exp(x) - Math.exp(-x)) / 2;\n};\n/**\n * Calculate the hyperbolic tangent of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var tanh = Math.tanh || function (x) {\n  var e = Math.exp(2 * x);\n  return (e - 1) / (e + 1);\n};\n/**\n * Returns a value with the magnitude of x and the sign of y.\n * @param {number} x\n * @param {number} y\n * @returns {number}\n */\n\nexport function copysign(x, y) {\n  var signx = x > 0 ? true : x < 0 ? false : 1 / x === Infinity;\n  var signy = y > 0 ? true : y < 0 ? false : 1 / y === Infinity;\n  return signx ^ signy ? -x : x;\n}","map":{"version":3,"names":["isNumber","isInteger","value","isFinite","Math","round","sign","x","log2","log","LN2","log10","LN10","log1p","cbrt","negate","result","exp","expm1","formatNumberToBase","n","base","size","prefixes","prefix","suffix","Error","concat","toString","format","options","Infinity","isNaN","notation","precision","wordSize","toFixed","toExponential","toEngineering","toPrecision","replace","digits","arguments","e","splitNumber","match","String","toLowerCase","SyntaxError","exponent","parseFloat","dot","indexOf","length","coefficients","zeros","split","map","d","parseInt","push","rounded","roundDigits","c","newExp","missingZeros","abs","i","expDiff","decimalIdx","decimals","slice","join","decimalVal","str","splitValue","p","pp","splice","first","shift","lowerExp","undefined","upperExp","unshift","removed","pop","arr","DBL_EPSILON","Number","EPSILON","nearlyEqual","y","epsilon","diff","max","acosh","sqrt","asinh","atanh","cosh","sinh","tanh","copysign","signx","signy"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/utils/number.js"],"sourcesContent":["import { isNumber } from './is.js';\n/**\n * @typedef {{sign: '+' | '-' | '', coefficients: number[], exponent: number}} SplitValue\n */\n\n/**\n * Check if a number is integer\n * @param {number | boolean} value\n * @return {boolean} isInteger\n */\n\nexport function isInteger(value) {\n  if (typeof value === 'boolean') {\n    return true;\n  }\n\n  return isFinite(value) ? value === Math.round(value) : false;\n}\n/**\n * Calculate the sign of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var sign = /* #__PURE__ */Math.sign || function (x) {\n  if (x > 0) {\n    return 1;\n  } else if (x < 0) {\n    return -1;\n  } else {\n    return 0;\n  }\n};\n/**\n * Calculate the base-2 logarithm of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var log2 = /* #__PURE__ */Math.log2 || function log2(x) {\n  return Math.log(x) / Math.LN2;\n};\n/**\n * Calculate the base-10 logarithm of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var log10 = /* #__PURE__ */Math.log10 || function log10(x) {\n  return Math.log(x) / Math.LN10;\n};\n/**\n * Calculate the natural logarithm of a number + 1\n * @param {number} x\n * @returns {number}\n */\n\nexport var log1p = /* #__PURE__ */Math.log1p || function (x) {\n  return Math.log(x + 1);\n};\n/**\n * Calculate cubic root for a number\n *\n * Code from es6-shim.js:\n *   https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1564-L1577\n *\n * @param {number} x\n * @returns {number} Returns the cubic root of x\n */\n\nexport var cbrt = /* #__PURE__ */Math.cbrt || function cbrt(x) {\n  if (x === 0) {\n    return x;\n  }\n\n  var negate = x < 0;\n  var result;\n\n  if (negate) {\n    x = -x;\n  }\n\n  if (isFinite(x)) {\n    result = Math.exp(Math.log(x) / 3); // from https://en.wikipedia.org/wiki/Cube_root#Numerical_methods\n\n    result = (x / (result * result) + 2 * result) / 3;\n  } else {\n    result = x;\n  }\n\n  return negate ? -result : result;\n};\n/**\n * Calculates exponentiation minus 1\n * @param {number} x\n * @return {number} res\n */\n\nexport var expm1 = /* #__PURE__ */Math.expm1 || function expm1(x) {\n  return x >= 2e-4 || x <= -2e-4 ? Math.exp(x) - 1 : x + x * x / 2 + x * x * x / 6;\n};\n/**\n * Formats a number in a given base\n * @param {number} n\n * @param {number} base\n * @param {number} size\n * @returns {string}\n */\n\nfunction formatNumberToBase(n, base, size) {\n  var prefixes = {\n    2: '0b',\n    8: '0o',\n    16: '0x'\n  };\n  var prefix = prefixes[base];\n  var suffix = '';\n\n  if (size) {\n    if (size < 1) {\n      throw new Error('size must be in greater than 0');\n    }\n\n    if (!isInteger(size)) {\n      throw new Error('size must be an integer');\n    }\n\n    if (n > 2 ** (size - 1) - 1 || n < -(2 ** (size - 1))) {\n      throw new Error(\"Value must be in range [-2^\".concat(size - 1, \", 2^\").concat(size - 1, \"-1]\"));\n    }\n\n    if (!isInteger(n)) {\n      throw new Error('Value must be an integer');\n    }\n\n    if (n < 0) {\n      n = n + 2 ** size;\n    }\n\n    suffix = \"i\".concat(size);\n  }\n\n  var sign = '';\n\n  if (n < 0) {\n    n = -n;\n    sign = '-';\n  }\n\n  return \"\".concat(sign).concat(prefix).concat(n.toString(base)).concat(suffix);\n}\n/**\n * Convert a number to a formatted string representation.\n *\n * Syntax:\n *\n *    format(value)\n *    format(value, options)\n *    format(value, precision)\n *    format(value, fn)\n *\n * Where:\n *\n *    {number} value   The value to be formatted\n *    {Object} options An object with formatting options. Available options:\n *                     {string} notation\n *                         Number notation. Choose from:\n *                         'fixed'          Always use regular number notation.\n *                                          For example '123.40' and '14000000'\n *                         'exponential'    Always use exponential notation.\n *                                          For example '1.234e+2' and '1.4e+7'\n *                         'engineering'    Always use engineering notation.\n *                                          For example '123.4e+0' and '14.0e+6'\n *                         'auto' (default) Regular number notation for numbers\n *                                          having an absolute value between\n *                                          `lowerExp` and `upperExp` bounds, and\n *                                          uses exponential notation elsewhere.\n *                                          Lower bound is included, upper bound\n *                                          is excluded.\n *                                          For example '123.4' and '1.4e7'.\n *                         'bin', 'oct, or\n *                         'hex'            Format the number using binary, octal,\n *                                          or hexadecimal notation.\n *                                          For example '0b1101' and '0x10fe'.\n *                     {number} wordSize    The word size in bits to use for formatting\n *                                          in binary, octal, or hexadecimal notation.\n *                                          To be used only with 'bin', 'oct', or 'hex'\n *                                          values for 'notation' option. When this option\n *                                          is defined the value is formatted as a signed\n *                                          twos complement integer of the given word size\n *                                          and the size suffix is appended to the output.\n *                                          For example\n *                                          format(-1, {notation: 'hex', wordSize: 8}) === '0xffi8'.\n *                                          Default value is undefined.\n *                     {number} precision   A number between 0 and 16 to round\n *                                          the digits of the number.\n *                                          In case of notations 'exponential',\n *                                          'engineering', and 'auto',\n *                                          `precision` defines the total\n *                                          number of significant digits returned.\n *                                          In case of notation 'fixed',\n *                                          `precision` defines the number of\n *                                          significant digits after the decimal\n *                                          point.\n *                                          `precision` is undefined by default,\n *                                          not rounding any digits.\n *                     {number} lowerExp    Exponent determining the lower boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `-3`.\n *                     {number} upperExp    Exponent determining the upper boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `5`.\n *    {Function} fn    A custom formatting function. Can be used to override the\n *                     built-in notations. Function `fn` is called with `value` as\n *                     parameter and must return a string. Is useful for example to\n *                     format all values inside a matrix in a particular way.\n *\n * Examples:\n *\n *    format(6.4)                                        // '6.4'\n *    format(1240000)                                    // '1.24e6'\n *    format(1/3)                                        // '0.3333333333333333'\n *    format(1/3, 3)                                     // '0.333'\n *    format(21385, 2)                                   // '21000'\n *    format(12.071, {notation: 'fixed'})                // '12'\n *    format(2.3,    {notation: 'fixed', precision: 2})  // '2.30'\n *    format(52.8,   {notation: 'exponential'})          // '5.28e+1'\n *    format(12345678, {notation: 'engineering'})        // '12.345678e+6'\n *\n * @param {number} value\n * @param {Object | Function | number} [options]\n * @return {string} str The formatted value\n */\n\n\nexport function format(value, options) {\n  if (typeof options === 'function') {\n    // handle format(value, fn)\n    return options(value);\n  } // handle special cases\n\n\n  if (value === Infinity) {\n    return 'Infinity';\n  } else if (value === -Infinity) {\n    return '-Infinity';\n  } else if (isNaN(value)) {\n    return 'NaN';\n  } // default values for options\n\n\n  var notation = 'auto';\n  var precision;\n  var wordSize;\n\n  if (options) {\n    // determine notation from options\n    if (options.notation) {\n      notation = options.notation;\n    } // determine precision from options\n\n\n    if (isNumber(options)) {\n      precision = options;\n    } else if (isNumber(options.precision)) {\n      precision = options.precision;\n    }\n\n    if (options.wordSize) {\n      wordSize = options.wordSize;\n\n      if (typeof wordSize !== 'number') {\n        throw new Error('Option \"wordSize\" must be a number');\n      }\n    }\n  } // handle the various notations\n\n\n  switch (notation) {\n    case 'fixed':\n      return toFixed(value, precision);\n\n    case 'exponential':\n      return toExponential(value, precision);\n\n    case 'engineering':\n      return toEngineering(value, precision);\n\n    case 'bin':\n      return formatNumberToBase(value, 2, wordSize);\n\n    case 'oct':\n      return formatNumberToBase(value, 8, wordSize);\n\n    case 'hex':\n      return formatNumberToBase(value, 16, wordSize);\n\n    case 'auto':\n      // remove trailing zeros after the decimal point\n      return toPrecision(value, precision, options && options).replace(/((\\.\\d*?)(0+))($|e)/, function () {\n        var digits = arguments[2];\n        var e = arguments[4];\n        return digits !== '.' ? digits + e : e;\n      });\n\n    default:\n      throw new Error('Unknown notation \"' + notation + '\". ' + 'Choose \"auto\", \"exponential\", \"fixed\", \"bin\", \"oct\", or \"hex.');\n  }\n}\n/**\n * Split a number into sign, coefficients, and exponent\n * @param {number | string} value\n * @return {SplitValue}\n *              Returns an object containing sign, coefficients, and exponent\n */\n\nexport function splitNumber(value) {\n  // parse the input value\n  var match = String(value).toLowerCase().match(/^(-?)(\\d+\\.?\\d*)(e([+-]?\\d+))?$/);\n\n  if (!match) {\n    throw new SyntaxError('Invalid number ' + value);\n  }\n\n  var sign = match[1];\n  var digits = match[2];\n  var exponent = parseFloat(match[4] || '0');\n  var dot = digits.indexOf('.');\n  exponent += dot !== -1 ? dot - 1 : digits.length - 1;\n  var coefficients = digits.replace('.', '') // remove the dot (must be removed before removing leading zeros)\n  .replace(/^0*/, function (zeros) {\n    // remove leading zeros, add their count to the exponent\n    exponent -= zeros.length;\n    return '';\n  }).replace(/0*$/, '') // remove trailing zeros\n  .split('').map(function (d) {\n    return parseInt(d);\n  });\n\n  if (coefficients.length === 0) {\n    coefficients.push(0);\n    exponent++;\n  }\n\n  return {\n    sign,\n    coefficients,\n    exponent\n  };\n}\n/**\n * Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'\n * @param {number | string} value\n * @param {number} [precision]        Optional number of significant figures to return.\n */\n\nexport function toEngineering(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n\n  var split = splitNumber(value);\n  var rounded = roundDigits(split, precision);\n  var e = rounded.exponent;\n  var c = rounded.coefficients; // find nearest lower multiple of 3 for exponent\n\n  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3;\n\n  if (isNumber(precision)) {\n    // add zeroes to give correct sig figs\n    while (precision > c.length || e - newExp + 1 > c.length) {\n      c.push(0);\n    }\n  } else {\n    // concatenate coefficients with necessary zeros\n    // add zeros if necessary (for example: 1e+8 -> 100e+6)\n    var missingZeros = Math.abs(e - newExp) - (c.length - 1);\n\n    for (var i = 0; i < missingZeros; i++) {\n      c.push(0);\n    }\n  } // find difference in exponents\n\n\n  var expDiff = Math.abs(e - newExp);\n  var decimalIdx = 1; // push decimal index over by expDiff times\n\n  while (expDiff > 0) {\n    decimalIdx++;\n    expDiff--;\n  } // if all coefficient values are zero after the decimal point and precision is unset, don't add a decimal value.\n  // otherwise concat with the rest of the coefficients\n\n\n  var decimals = c.slice(decimalIdx).join('');\n  var decimalVal = isNumber(precision) && decimals.length || decimals.match(/[1-9]/) ? '.' + decimals : '';\n  var str = c.slice(0, decimalIdx).join('') + decimalVal + 'e' + (e >= 0 ? '+' : '') + newExp.toString();\n  return rounded.sign + str;\n}\n/**\n * Format a number with fixed notation.\n * @param {number | string} value\n * @param {number} [precision=undefined]  Optional number of decimals after the\n *                                        decimal point. null by default.\n */\n\nexport function toFixed(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n\n  var splitValue = splitNumber(value);\n  var rounded = typeof precision === 'number' ? roundDigits(splitValue, splitValue.exponent + 1 + precision) : splitValue;\n  var c = rounded.coefficients;\n  var p = rounded.exponent + 1; // exponent may have changed\n  // append zeros if needed\n\n  var pp = p + (precision || 0);\n\n  if (c.length < pp) {\n    c = c.concat(zeros(pp - c.length));\n  } // prepend zeros if needed\n\n\n  if (p < 0) {\n    c = zeros(-p + 1).concat(c);\n    p = 1;\n  } // insert a dot if needed\n\n\n  if (p < c.length) {\n    c.splice(p, 0, p === 0 ? '0.' : '.');\n  }\n\n  return rounded.sign + c.join('');\n}\n/**\n * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'\n * @param {number | string} value\n * @param {number} [precision]  Number of digits in formatted output.\n *                              If not provided, the maximum available digits\n *                              is used.\n */\n\nexport function toExponential(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  } // round if needed, else create a clone\n\n\n  var split = splitNumber(value);\n  var rounded = precision ? roundDigits(split, precision) : split;\n  var c = rounded.coefficients;\n  var e = rounded.exponent; // append zeros if needed\n\n  if (c.length < precision) {\n    c = c.concat(zeros(precision - c.length));\n  } // format as `C.CCCe+EEE` or `C.CCCe-EEE`\n\n\n  var first = c.shift();\n  return rounded.sign + first + (c.length > 0 ? '.' + c.join('') : '') + 'e' + (e >= 0 ? '+' : '') + e;\n}\n/**\n * Format a number with a certain precision\n * @param {number | string} value\n * @param {number} [precision=undefined] Optional number of digits.\n * @param {{lowerExp: number | undefined, upperExp: number | undefined}} [options]\n *                                       By default:\n *                                         lowerExp = -3 (incl)\n *                                         upper = +5 (excl)\n * @return {string}\n */\n\nexport function toPrecision(value, precision, options) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  } // determine lower and upper bound for exponential notation.\n\n\n  var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;\n  var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5;\n  var split = splitNumber(value);\n  var rounded = precision ? roundDigits(split, precision) : split;\n\n  if (rounded.exponent < lowerExp || rounded.exponent >= upperExp) {\n    // exponential notation\n    return toExponential(value, precision);\n  } else {\n    var c = rounded.coefficients;\n    var e = rounded.exponent; // append trailing zeros\n\n    if (c.length < precision) {\n      c = c.concat(zeros(precision - c.length));\n    } // append trailing zeros\n    // TODO: simplify the next statement\n\n\n    c = c.concat(zeros(e - c.length + 1 + (c.length < precision ? precision - c.length : 0))); // prepend zeros\n\n    c = zeros(-e).concat(c);\n    var dot = e > 0 ? e : 0;\n\n    if (dot < c.length - 1) {\n      c.splice(dot + 1, 0, '.');\n    }\n\n    return rounded.sign + c.join('');\n  }\n}\n/**\n * Round the number of digits of a number *\n * @param {SplitValue} split       A value split with .splitNumber(value)\n * @param {number} precision  A positive integer\n * @return {SplitValue}\n *              Returns an object containing sign, coefficients, and exponent\n *              with rounded digits\n */\n\nexport function roundDigits(split, precision) {\n  // create a clone\n  var rounded = {\n    sign: split.sign,\n    coefficients: split.coefficients,\n    exponent: split.exponent\n  };\n  var c = rounded.coefficients; // prepend zeros if needed\n\n  while (precision <= 0) {\n    c.unshift(0);\n    rounded.exponent++;\n    precision++;\n  }\n\n  if (c.length > precision) {\n    var removed = c.splice(precision, c.length - precision);\n\n    if (removed[0] >= 5) {\n      var i = precision - 1;\n      c[i]++;\n\n      while (c[i] === 10) {\n        c.pop();\n\n        if (i === 0) {\n          c.unshift(0);\n          rounded.exponent++;\n          i++;\n        }\n\n        i--;\n        c[i]++;\n      }\n    }\n  }\n\n  return rounded;\n}\n/**\n * Create an array filled with zeros.\n * @param {number} length\n * @return {Array}\n */\n\nfunction zeros(length) {\n  var arr = [];\n\n  for (var i = 0; i < length; i++) {\n    arr.push(0);\n  }\n\n  return arr;\n}\n/**\n * Count the number of significant digits of a number.\n *\n * For example:\n *   2.34 returns 3\n *   0.0034 returns 2\n *   120.5e+30 returns 4\n *\n * @param {number} value\n * @return {number} digits   Number of significant digits\n */\n\n\nexport function digits(value) {\n  return value.toExponential().replace(/e.*$/, '') // remove exponential notation\n  .replace(/^0\\.?0*|\\./, '') // remove decimal point and leading zeros\n  .length;\n}\n/**\n * Minimum number added to one that makes the result different than one\n */\n\nexport var DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;\n/**\n * Compares two floating point numbers.\n * @param {number} x          First value to compare\n * @param {number} y          Second value to compare\n * @param {number} [epsilon]  The maximum relative difference between x and y\n *                            If epsilon is undefined or null, the function will\n *                            test whether x and y are exactly equal.\n * @return {boolean} whether the two numbers are nearly equal\n*/\n\nexport function nearlyEqual(x, y, epsilon) {\n  // if epsilon is null or undefined, test whether x and y are exactly equal\n  if (epsilon === null || epsilon === undefined) {\n    return x === y;\n  }\n\n  if (x === y) {\n    return true;\n  } // NaN\n\n\n  if (isNaN(x) || isNaN(y)) {\n    return false;\n  } // at this point x and y should be finite\n\n\n  if (isFinite(x) && isFinite(y)) {\n    // check numbers are very close, needed when comparing numbers near zero\n    var diff = Math.abs(x - y);\n\n    if (diff < DBL_EPSILON) {\n      return true;\n    } else {\n      // use relative error\n      return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;\n    }\n  } // Infinite and Number or negative Infinite and positive Infinite cases\n\n\n  return false;\n}\n/**\n * Calculate the hyperbolic arccos of a number\n * @param {number} x\n * @return {number}\n */\n\nexport var acosh = Math.acosh || function (x) {\n  return Math.log(Math.sqrt(x * x - 1) + x);\n};\nexport var asinh = Math.asinh || function (x) {\n  return Math.log(Math.sqrt(x * x + 1) + x);\n};\n/**\n * Calculate the hyperbolic arctangent of a number\n * @param {number} x\n * @return {number}\n */\n\nexport var atanh = Math.atanh || function (x) {\n  return Math.log((1 + x) / (1 - x)) / 2;\n};\n/**\n * Calculate the hyperbolic cosine of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var cosh = Math.cosh || function (x) {\n  return (Math.exp(x) + Math.exp(-x)) / 2;\n};\n/**\n * Calculate the hyperbolic sine of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var sinh = Math.sinh || function (x) {\n  return (Math.exp(x) - Math.exp(-x)) / 2;\n};\n/**\n * Calculate the hyperbolic tangent of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var tanh = Math.tanh || function (x) {\n  var e = Math.exp(2 * x);\n  return (e - 1) / (e + 1);\n};\n/**\n * Returns a value with the magnitude of x and the sign of y.\n * @param {number} x\n * @param {number} y\n * @returns {number}\n */\n\nexport function copysign(x, y) {\n  var signx = x > 0 ? true : x < 0 ? false : 1 / x === Infinity;\n  var signy = y > 0 ? true : y < 0 ? false : 1 / y === Infinity;\n  return signx ^ signy ? -x : x;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}