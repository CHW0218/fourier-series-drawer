{"ast":null,"code":"import _slicedToArray from \"/Users/ayao/vscode/fourier-series-drawer/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { factory } from '../../utils/factory.js';\nvar name = 'invmod';\nvar dependencies = ['typed', 'config', 'BigNumber', 'xgcd', 'equal', 'smaller', 'mod', 'add', 'isInteger'];\nexport var createInvmod = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      BigNumber = _ref.BigNumber,\n      xgcd = _ref.xgcd,\n      equal = _ref.equal,\n      smaller = _ref.smaller,\n      mod = _ref.mod,\n      add = _ref.add,\n      isInteger = _ref.isInteger;\n  /**\n   * Calculate the (modular) multiplicative inverse of a modulo b. Solution to the equation `ax ≣ 1 (mod b)`\n   * See https://en.wikipedia.org/wiki/Modular_multiplicative_inverse.\n   *\n   * Syntax:\n   *\n   *    math.invmod(a, b)\n   *\n   * Examples:\n   *\n   *    math.invmod(8, 12)             // returns NaN\n   *    math.invmod(7, 13)             // return 2\n   *    math.invmod(15151, 15122)      // returns 10429\n   *\n   * See also:\n   *\n   *    gcd, xgcd\n   *\n   * @param {number | BigNumber} a  An integer number\n   * @param {number | BigNumber} b  An integer number\n   * @return {number | BigNumber }  Returns an integer number\n   *                              where `invmod(a,b)*a ≣ 1 (mod b)`\n   */\n\n  return typed(name, {\n    'number, number': invmod,\n    'BigNumber, BigNumber': invmod\n  });\n\n  function invmod(a, b) {\n    if (!isInteger(a) || !isInteger(b)) throw new Error('Parameters in function invmod must be integer numbers');\n    a = mod(a, b);\n    if (equal(b, 0)) throw new Error('Divisor must be non zero');\n    var res = xgcd(a, b);\n    res = res.valueOf();\n\n    var _res = res,\n        _res2 = _slicedToArray(_res, 2),\n        gcd = _res2[0],\n        inv = _res2[1];\n\n    if (!equal(gcd, BigNumber(1))) return NaN;\n    inv = mod(inv, b);\n    if (smaller(inv, BigNumber(0))) inv = add(inv, b);\n    return inv;\n  }\n});","map":{"version":3,"names":["factory","name","dependencies","createInvmod","_ref","typed","config","BigNumber","xgcd","equal","smaller","mod","add","isInteger","invmod","a","b","Error","res","valueOf","gcd","inv","NaN"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/function/arithmetic/invmod.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'invmod';\nvar dependencies = ['typed', 'config', 'BigNumber', 'xgcd', 'equal', 'smaller', 'mod', 'add', 'isInteger'];\nexport var createInvmod = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    BigNumber,\n    xgcd,\n    equal,\n    smaller,\n    mod,\n    add,\n    isInteger\n  } = _ref;\n\n  /**\n   * Calculate the (modular) multiplicative inverse of a modulo b. Solution to the equation `ax ≣ 1 (mod b)`\n   * See https://en.wikipedia.org/wiki/Modular_multiplicative_inverse.\n   *\n   * Syntax:\n   *\n   *    math.invmod(a, b)\n   *\n   * Examples:\n   *\n   *    math.invmod(8, 12)             // returns NaN\n   *    math.invmod(7, 13)             // return 2\n   *    math.invmod(15151, 15122)      // returns 10429\n   *\n   * See also:\n   *\n   *    gcd, xgcd\n   *\n   * @param {number | BigNumber} a  An integer number\n   * @param {number | BigNumber} b  An integer number\n   * @return {number | BigNumber }  Returns an integer number\n   *                              where `invmod(a,b)*a ≣ 1 (mod b)`\n   */\n  return typed(name, {\n    'number, number': invmod,\n    'BigNumber, BigNumber': invmod\n  });\n\n  function invmod(a, b) {\n    if (!isInteger(a) || !isInteger(b)) throw new Error('Parameters in function invmod must be integer numbers');\n    a = mod(a, b);\n    if (equal(b, 0)) throw new Error('Divisor must be non zero');\n    var res = xgcd(a, b);\n    res = res.valueOf();\n    var [gcd, inv] = res;\n    if (!equal(gcd, BigNumber(1))) return NaN;\n    inv = mod(inv, b);\n    if (smaller(inv, BigNumber(0))) inv = add(inv, b);\n    return inv;\n  }\n});"],"mappings":";AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,QAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,WAApB,EAAiC,MAAjC,EAAyC,OAAzC,EAAkD,SAAlD,EAA6D,KAA7D,EAAoE,KAApE,EAA2E,WAA3E,CAAnB;AACA,OAAO,IAAIC,YAAY,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EAC3E,IACEC,KADF,GAUID,IAVJ,CACEC,KADF;EAAA,IAEEC,MAFF,GAUIF,IAVJ,CAEEE,MAFF;EAAA,IAGEC,SAHF,GAUIH,IAVJ,CAGEG,SAHF;EAAA,IAIEC,IAJF,GAUIJ,IAVJ,CAIEI,IAJF;EAAA,IAKEC,KALF,GAUIL,IAVJ,CAKEK,KALF;EAAA,IAMEC,OANF,GAUIN,IAVJ,CAMEM,OANF;EAAA,IAOEC,GAPF,GAUIP,IAVJ,CAOEO,GAPF;EAAA,IAQEC,GARF,GAUIR,IAVJ,CAQEQ,GARF;EAAA,IASEC,SATF,GAUIT,IAVJ,CASES,SATF;EAYA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOR,KAAK,CAACJ,IAAD,EAAO;IACjB,kBAAkBa,MADD;IAEjB,wBAAwBA;EAFP,CAAP,CAAZ;;EAKA,SAASA,MAAT,CAAgBC,CAAhB,EAAmBC,CAAnB,EAAsB;IACpB,IAAI,CAACH,SAAS,CAACE,CAAD,CAAV,IAAiB,CAACF,SAAS,CAACG,CAAD,CAA/B,EAAoC,MAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;IACpCF,CAAC,GAAGJ,GAAG,CAACI,CAAD,EAAIC,CAAJ,CAAP;IACA,IAAIP,KAAK,CAACO,CAAD,EAAI,CAAJ,CAAT,EAAiB,MAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;IACjB,IAAIC,GAAG,GAAGV,IAAI,CAACO,CAAD,EAAIC,CAAJ,CAAd;IACAE,GAAG,GAAGA,GAAG,CAACC,OAAJ,EAAN;;IACA,WAAiBD,GAAjB;IAAA;IAAA,IAAKE,GAAL;IAAA,IAAUC,GAAV;;IACA,IAAI,CAACZ,KAAK,CAACW,GAAD,EAAMb,SAAS,CAAC,CAAD,CAAf,CAAV,EAA+B,OAAOe,GAAP;IAC/BD,GAAG,GAAGV,GAAG,CAACU,GAAD,EAAML,CAAN,CAAT;IACA,IAAIN,OAAO,CAACW,GAAD,EAAMd,SAAS,CAAC,CAAD,CAAf,CAAX,EAAgCc,GAAG,GAAGT,GAAG,CAACS,GAAD,EAAML,CAAN,CAAT;IAChC,OAAOK,GAAP;EACD;AACF,CArD+C,CAAzC"},"metadata":{},"sourceType":"module"}