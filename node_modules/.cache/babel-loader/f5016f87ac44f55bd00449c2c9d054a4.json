{"ast":null,"code":"import { isBigNumber } from '../../utils/is.js';\nimport { isInteger } from '../../utils/number.js';\nimport { resize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'ones';\nvar dependencies = ['typed', 'config', 'matrix', 'BigNumber'];\nexport var createOnes = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      matrix = _ref.matrix,\n      BigNumber = _ref.BigNumber;\n  /**\n   * Create a matrix filled with ones. The created matrix can have one or\n   * multiple dimensions.\n   *\n   * Syntax:\n   *\n   *    math.ones(m)\n   *    math.ones(m, format)\n   *    math.ones(m, n)\n   *    math.ones(m, n, format)\n   *    math.ones([m, n])\n   *    math.ones([m, n], format)\n   *    math.ones([m, n, p, ...])\n   *    math.ones([m, n, p, ...], format)\n   *\n   * Examples:\n   *\n   *    math.ones(3)                   // returns [1, 1, 1]\n   *    math.ones(3, 2)                // returns [[1, 1], [1, 1], [1, 1]]\n   *    math.ones(3, 2, 'dense')       // returns Dense Matrix [[1, 1], [1, 1], [1, 1]]\n   *\n   *    const A = [[1, 2, 3], [4, 5, 6]]\n   *    math.ones(math.size(A))       // returns [[1, 1, 1], [1, 1, 1]]\n   *\n   * See also:\n   *\n   *    zeros, identity, size, range\n   *\n   * @param {...number | Array} size    The size of each dimension of the matrix\n   * @param {string} [format]           The Matrix storage format\n   *\n   * @return {Array | Matrix | number}  A matrix filled with ones\n   */\n\n  return typed('ones', {\n    '': function _() {\n      return config.matrix === 'Array' ? _ones([]) : _ones([], 'default');\n    },\n    // math.ones(m, n, p, ..., format)\n    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this\n    '...number | BigNumber | string': function numberBigNumberString(size) {\n      var last = size[size.length - 1];\n\n      if (typeof last === 'string') {\n        var format = size.pop();\n        return _ones(size, format);\n      } else if (config.matrix === 'Array') {\n        return _ones(size);\n      } else {\n        return _ones(size, 'default');\n      }\n    },\n    Array: _ones,\n    Matrix: function Matrix(size) {\n      var format = size.storage();\n      return _ones(size.valueOf(), format);\n    },\n    'Array | Matrix, string': function ArrayMatrixString(size, format) {\n      return _ones(size.valueOf(), format);\n    }\n  });\n  /**\n   * Create an Array or Matrix with ones\n   * @param {Array} size\n   * @param {string} [format='default']\n   * @return {Array | Matrix}\n   * @private\n   */\n\n  function _ones(size, format) {\n    var hasBigNumbers = _normalize(size);\n\n    var defaultValue = hasBigNumbers ? new BigNumber(1) : 1;\n\n    _validate(size);\n\n    if (format) {\n      // return a matrix\n      var m = matrix(format);\n\n      if (size.length > 0) {\n        return m.resize(size, defaultValue);\n      }\n\n      return m;\n    } else {\n      // return an Array\n      var arr = [];\n\n      if (size.length > 0) {\n        return resize(arr, size, defaultValue);\n      }\n\n      return arr;\n    }\n  } // replace BigNumbers with numbers, returns true if size contained BigNumbers\n\n\n  function _normalize(size) {\n    var hasBigNumbers = false;\n    size.forEach(function (value, index, arr) {\n      if (isBigNumber(value)) {\n        hasBigNumbers = true;\n        arr[index] = value.toNumber();\n      }\n    });\n    return hasBigNumbers;\n  } // validate arguments\n\n\n  function _validate(size) {\n    size.forEach(function (value) {\n      if (typeof value !== 'number' || !isInteger(value) || value < 0) {\n        throw new Error('Parameters in function ones must be positive integers');\n      }\n    });\n  }\n});","map":{"version":3,"names":["isBigNumber","isInteger","resize","factory","name","dependencies","createOnes","_ref","typed","config","matrix","BigNumber","_","_ones","numberBigNumberString","size","last","length","format","pop","Array","Matrix","storage","valueOf","ArrayMatrixString","hasBigNumbers","_normalize","defaultValue","_validate","m","arr","forEach","value","index","toNumber","Error"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/function/matrix/ones.js"],"sourcesContent":["import { isBigNumber } from '../../utils/is.js';\nimport { isInteger } from '../../utils/number.js';\nimport { resize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'ones';\nvar dependencies = ['typed', 'config', 'matrix', 'BigNumber'];\nexport var createOnes = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    BigNumber\n  } = _ref;\n\n  /**\n   * Create a matrix filled with ones. The created matrix can have one or\n   * multiple dimensions.\n   *\n   * Syntax:\n   *\n   *    math.ones(m)\n   *    math.ones(m, format)\n   *    math.ones(m, n)\n   *    math.ones(m, n, format)\n   *    math.ones([m, n])\n   *    math.ones([m, n], format)\n   *    math.ones([m, n, p, ...])\n   *    math.ones([m, n, p, ...], format)\n   *\n   * Examples:\n   *\n   *    math.ones(3)                   // returns [1, 1, 1]\n   *    math.ones(3, 2)                // returns [[1, 1], [1, 1], [1, 1]]\n   *    math.ones(3, 2, 'dense')       // returns Dense Matrix [[1, 1], [1, 1], [1, 1]]\n   *\n   *    const A = [[1, 2, 3], [4, 5, 6]]\n   *    math.ones(math.size(A))       // returns [[1, 1, 1], [1, 1, 1]]\n   *\n   * See also:\n   *\n   *    zeros, identity, size, range\n   *\n   * @param {...number | Array} size    The size of each dimension of the matrix\n   * @param {string} [format]           The Matrix storage format\n   *\n   * @return {Array | Matrix | number}  A matrix filled with ones\n   */\n  return typed('ones', {\n    '': function _() {\n      return config.matrix === 'Array' ? _ones([]) : _ones([], 'default');\n    },\n    // math.ones(m, n, p, ..., format)\n    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this\n    '...number | BigNumber | string': function numberBigNumberString(size) {\n      var last = size[size.length - 1];\n\n      if (typeof last === 'string') {\n        var format = size.pop();\n        return _ones(size, format);\n      } else if (config.matrix === 'Array') {\n        return _ones(size);\n      } else {\n        return _ones(size, 'default');\n      }\n    },\n    Array: _ones,\n    Matrix: function Matrix(size) {\n      var format = size.storage();\n      return _ones(size.valueOf(), format);\n    },\n    'Array | Matrix, string': function ArrayMatrixString(size, format) {\n      return _ones(size.valueOf(), format);\n    }\n  });\n  /**\n   * Create an Array or Matrix with ones\n   * @param {Array} size\n   * @param {string} [format='default']\n   * @return {Array | Matrix}\n   * @private\n   */\n\n  function _ones(size, format) {\n    var hasBigNumbers = _normalize(size);\n\n    var defaultValue = hasBigNumbers ? new BigNumber(1) : 1;\n\n    _validate(size);\n\n    if (format) {\n      // return a matrix\n      var m = matrix(format);\n\n      if (size.length > 0) {\n        return m.resize(size, defaultValue);\n      }\n\n      return m;\n    } else {\n      // return an Array\n      var arr = [];\n\n      if (size.length > 0) {\n        return resize(arr, size, defaultValue);\n      }\n\n      return arr;\n    }\n  } // replace BigNumbers with numbers, returns true if size contained BigNumbers\n\n\n  function _normalize(size) {\n    var hasBigNumbers = false;\n    size.forEach(function (value, index, arr) {\n      if (isBigNumber(value)) {\n        hasBigNumbers = true;\n        arr[index] = value.toNumber();\n      }\n    });\n    return hasBigNumbers;\n  } // validate arguments\n\n\n  function _validate(size) {\n    size.forEach(function (value) {\n      if (typeof value !== 'number' || !isInteger(value) || value < 0) {\n        throw new Error('Parameters in function ones must be positive integers');\n      }\n    });\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}