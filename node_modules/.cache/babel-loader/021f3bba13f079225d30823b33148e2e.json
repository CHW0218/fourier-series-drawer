{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { typeOf } from '../../utils/is.js';\nvar name = 'divideScalar';\nvar dependencies = ['typed', 'numeric'];\nexport var createDivideScalar = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      numeric = _ref.numeric;\n  /**\n   * Divide two scalar values, `x / y`.\n   * This function is meant for internal use: it is used by the public functions\n   * `divide` and `inv`.\n   *\n   * This function does not support collections (Array or Matrix).\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator\n   * @param  {number | BigNumber | Fraction | Complex} y          Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Quotient, `x / y`\n   * @private\n   */\n\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return x / y;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.div(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.div(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.div(y);\n    },\n    'Unit, number | Fraction | BigNumber': function UnitNumberFractionBigNumber(x, y) {\n      var res = x.clone(); // TODO: move the divide function to Unit.js, it uses internals of Unit\n\n      var one = numeric(1, typeOf(y));\n      res.value = this(res.value === null ? res._normalize(one) : res.value, y);\n      return res;\n    },\n    'number | Fraction | BigNumber, Unit': function numberFractionBigNumberUnit(x, y) {\n      var res = y.clone();\n      res = res.pow(-1); // TODO: move the divide function to Unit.js, it uses internals of Unit\n\n      var one = numeric(1, typeOf(x));\n      res.value = this(x, y.value === null ? y._normalize(one) : y.value);\n      return res;\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      return x.divide(y);\n    }\n  });\n});","map":{"version":3,"names":["factory","typeOf","name","dependencies","createDivideScalar","_ref","typed","numeric","numberNumber","x","y","ComplexComplex","div","BigNumberBigNumber","FractionFraction","UnitNumberFractionBigNumber","res","clone","one","value","_normalize","numberFractionBigNumberUnit","pow","UnitUnit","divide"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/function/arithmetic/divideScalar.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { typeOf } from '../../utils/is.js';\nvar name = 'divideScalar';\nvar dependencies = ['typed', 'numeric'];\nexport var createDivideScalar = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    numeric\n  } = _ref;\n\n  /**\n   * Divide two scalar values, `x / y`.\n   * This function is meant for internal use: it is used by the public functions\n   * `divide` and `inv`.\n   *\n   * This function does not support collections (Array or Matrix).\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator\n   * @param  {number | BigNumber | Fraction | Complex} y          Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Quotient, `x / y`\n   * @private\n   */\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return x / y;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.div(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.div(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.div(y);\n    },\n    'Unit, number | Fraction | BigNumber': function UnitNumberFractionBigNumber(x, y) {\n      var res = x.clone(); // TODO: move the divide function to Unit.js, it uses internals of Unit\n\n      var one = numeric(1, typeOf(y));\n      res.value = this(res.value === null ? res._normalize(one) : res.value, y);\n      return res;\n    },\n    'number | Fraction | BigNumber, Unit': function numberFractionBigNumberUnit(x, y) {\n      var res = y.clone();\n      res = res.pow(-1); // TODO: move the divide function to Unit.js, it uses internals of Unit\n\n      var one = numeric(1, typeOf(x));\n      res.value = this(x, y.value === null ? y._normalize(one) : y.value);\n      return res;\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      return x.divide(y);\n    }\n  });\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,IAAIC,IAAI,GAAG,cAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,SAAV,CAAnB;AACA,OAAO,IAAIC,kBAAkB,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EACjF,IACEC,KADF,GAGID,IAHJ,CACEC,KADF;EAAA,IAEEC,OAFF,GAGIF,IAHJ,CAEEE,OAFF;EAKA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOD,KAAK,CAACJ,IAAD,EAAO;IACjB,kBAAkB,SAASM,YAAT,CAAsBC,CAAtB,EAAyBC,CAAzB,EAA4B;MAC5C,OAAOD,CAAC,GAAGC,CAAX;IACD,CAHgB;IAIjB,oBAAoB,SAASC,cAAT,CAAwBF,CAAxB,EAA2BC,CAA3B,EAA8B;MAChD,OAAOD,CAAC,CAACG,GAAF,CAAMF,CAAN,CAAP;IACD,CANgB;IAOjB,wBAAwB,SAASG,kBAAT,CAA4BJ,CAA5B,EAA+BC,CAA/B,EAAkC;MACxD,OAAOD,CAAC,CAACG,GAAF,CAAMF,CAAN,CAAP;IACD,CATgB;IAUjB,sBAAsB,SAASI,gBAAT,CAA0BL,CAA1B,EAA6BC,CAA7B,EAAgC;MACpD,OAAOD,CAAC,CAACG,GAAF,CAAMF,CAAN,CAAP;IACD,CAZgB;IAajB,uCAAuC,SAASK,2BAAT,CAAqCN,CAArC,EAAwCC,CAAxC,EAA2C;MAChF,IAAIM,GAAG,GAAGP,CAAC,CAACQ,KAAF,EAAV,CADgF,CAC3D;;MAErB,IAAIC,GAAG,GAAGX,OAAO,CAAC,CAAD,EAAIN,MAAM,CAACS,CAAD,CAAV,CAAjB;MACAM,GAAG,CAACG,KAAJ,GAAY,KAAKH,GAAG,CAACG,KAAJ,KAAc,IAAd,GAAqBH,GAAG,CAACI,UAAJ,CAAeF,GAAf,CAArB,GAA2CF,GAAG,CAACG,KAApD,EAA2DT,CAA3D,CAAZ;MACA,OAAOM,GAAP;IACD,CAnBgB;IAoBjB,uCAAuC,SAASK,2BAAT,CAAqCZ,CAArC,EAAwCC,CAAxC,EAA2C;MAChF,IAAIM,GAAG,GAAGN,CAAC,CAACO,KAAF,EAAV;MACAD,GAAG,GAAGA,GAAG,CAACM,GAAJ,CAAQ,CAAC,CAAT,CAAN,CAFgF,CAE7D;;MAEnB,IAAIJ,GAAG,GAAGX,OAAO,CAAC,CAAD,EAAIN,MAAM,CAACQ,CAAD,CAAV,CAAjB;MACAO,GAAG,CAACG,KAAJ,GAAY,KAAKV,CAAL,EAAQC,CAAC,CAACS,KAAF,KAAY,IAAZ,GAAmBT,CAAC,CAACU,UAAF,CAAaF,GAAb,CAAnB,GAAuCR,CAAC,CAACS,KAAjD,CAAZ;MACA,OAAOH,GAAP;IACD,CA3BgB;IA4BjB,cAAc,SAASO,QAAT,CAAkBd,CAAlB,EAAqBC,CAArB,EAAwB;MACpC,OAAOD,CAAC,CAACe,MAAF,CAASd,CAAT,CAAP;IACD;EA9BgB,CAAP,CAAZ;AAgCD,CAlDqD,CAA/C"},"metadata":{},"sourceType":"module"}