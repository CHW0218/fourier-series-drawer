{"ast":null,"code":"import _toConsumableArray from \"/Users/ayao/vscode/fourier-series-drawer/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { arraySize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'fft';\nvar dependencies = ['typed', 'matrix', 'addScalar', 'multiplyScalar', 'divideScalar', 'exp', 'tau', 'i'];\nexport var createFft = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      addScalar = _ref.addScalar,\n      multiplyScalar = _ref.multiplyScalar,\n      divideScalar = _ref.divideScalar,\n      exp = _ref.exp,\n      tau = _ref.tau,\n      I = _ref.i;\n  /**\n   * Calculate N-dimensional fourier transform\n   *\n   * Syntax:\n   *\n   *     math.fft(arr)\n   *\n   * Examples:\n   *\n   *    math.fft([[1, 0], [1, 0]]) // returns [[{re:2, im:0}, {re:2, im:0}], [{re:0, im:0}, {re:0, im:0}]]\n   *\n   *\n   * See Also:\n   *\n   *      ifft\n   *\n   * @param {Array | Matrix} arr    An array or matrix\n   * @return {Array | Matrix}       N-dimensional fourier transformation of the array\n   */\n\n  return typed(name, {\n    Array: _ndFft,\n    Matrix: function Matrix(matrix) {\n      return matrix.create(_ndFft(matrix.toArray()));\n    }\n  });\n  /**\n   * Perform an N-dimensional Fourier transform\n   *\n   * @param {Array} arr      The array\n   * @return {Array}         resulting array\n   */\n\n  function _ndFft(arr) {\n    var size = arraySize(arr);\n    if (size.length === 1) return _fft(arr, size[0]); // ndFft along dimension 1,...,N-1 then 1dFft along dimension 0\n\n    return _1dFft(arr.map(function (slice) {\n      return _ndFft(slice, size.slice(1));\n    }), 0);\n  }\n  /**\n   * Perform an 1-dimensional Fourier transform\n   *\n   * @param {Array} arr      The array\n   * @param {number} dim     dimension of the array to perform on\n   * @return {Array}         resulting array\n   */\n\n\n  function _1dFft(arr, dim) {\n    var size = arraySize(arr);\n    if (dim !== 0) return new Array(size[0]).fill(0).map(function (_, i) {\n      return _1dFft(arr[i], dim - 1);\n    });\n    if (size.length === 1) return _fft(arr);\n\n    function _transpose(arr) {\n      // Swap first 2 dimensions\n      var size = arraySize(arr);\n      return new Array(size[1]).fill(0).map(function (_, j) {\n        return new Array(size[0]).fill(0).map(function (_, i) {\n          return arr[i][j];\n        });\n      });\n    }\n\n    return _transpose(_1dFft(_transpose(arr), 1));\n  }\n  /**\n   * Perform an 1-dimensional Fourier transform\n   *\n   * @param {Array} arr      The array\n   * @return {Array}         resulting array\n   */\n\n\n  function _fft(arr) {\n    var len = arr.length;\n    if (len === 1) return [arr[0]];\n\n    if (len % 2 === 0) {\n      var ret = [].concat(_toConsumableArray(_fft(arr.filter(function (_, i) {\n        return i % 2 === 0;\n      }), len / 2)), _toConsumableArray(_fft(arr.filter(function (_, i) {\n        return i % 2 === 1;\n      }), len / 2)));\n\n      for (var k = 0; k < len / 2; k++) {\n        var p = ret[k];\n        var q = multiplyScalar(ret[k + len / 2], exp(multiplyScalar(multiplyScalar(tau, I), divideScalar(-k, len))));\n        ret[k] = addScalar(p, q);\n        ret[k + len / 2] = addScalar(p, multiplyScalar(-1, q));\n      }\n\n      return ret;\n    }\n\n    throw new Error('Can only calculate FFT of power-of-two size');\n  }\n});","map":{"version":3,"names":["arraySize","factory","name","dependencies","createFft","_ref","typed","matrix","addScalar","multiplyScalar","divideScalar","exp","tau","I","i","Array","_ndFft","Matrix","create","toArray","arr","size","length","_fft","_1dFft","map","slice","dim","fill","_","_transpose","j","len","ret","filter","k","p","q","Error"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/function/matrix/fft.js"],"sourcesContent":["import { arraySize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'fft';\nvar dependencies = ['typed', 'matrix', 'addScalar', 'multiplyScalar', 'divideScalar', 'exp', 'tau', 'i'];\nexport var createFft = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    addScalar,\n    multiplyScalar,\n    divideScalar,\n    exp,\n    tau,\n    i: I\n  } = _ref;\n\n  /**\n   * Calculate N-dimensional fourier transform\n   *\n   * Syntax:\n   *\n   *     math.fft(arr)\n   *\n   * Examples:\n   *\n   *    math.fft([[1, 0], [1, 0]]) // returns [[{re:2, im:0}, {re:2, im:0}], [{re:0, im:0}, {re:0, im:0}]]\n   *\n   *\n   * See Also:\n   *\n   *      ifft\n   *\n   * @param {Array | Matrix} arr    An array or matrix\n   * @return {Array | Matrix}       N-dimensional fourier transformation of the array\n   */\n  return typed(name, {\n    Array: _ndFft,\n    Matrix: function Matrix(matrix) {\n      return matrix.create(_ndFft(matrix.toArray()));\n    }\n  });\n  /**\n   * Perform an N-dimensional Fourier transform\n   *\n   * @param {Array} arr      The array\n   * @return {Array}         resulting array\n   */\n\n  function _ndFft(arr) {\n    var size = arraySize(arr);\n    if (size.length === 1) return _fft(arr, size[0]); // ndFft along dimension 1,...,N-1 then 1dFft along dimension 0\n\n    return _1dFft(arr.map(slice => _ndFft(slice, size.slice(1))), 0);\n  }\n  /**\n   * Perform an 1-dimensional Fourier transform\n   *\n   * @param {Array} arr      The array\n   * @param {number} dim     dimension of the array to perform on\n   * @return {Array}         resulting array\n   */\n\n\n  function _1dFft(arr, dim) {\n    var size = arraySize(arr);\n    if (dim !== 0) return new Array(size[0]).fill(0).map((_, i) => _1dFft(arr[i], dim - 1));\n    if (size.length === 1) return _fft(arr);\n\n    function _transpose(arr) {\n      // Swap first 2 dimensions\n      var size = arraySize(arr);\n      return new Array(size[1]).fill(0).map((_, j) => new Array(size[0]).fill(0).map((_, i) => arr[i][j]));\n    }\n\n    return _transpose(_1dFft(_transpose(arr), 1));\n  }\n  /**\n   * Perform an 1-dimensional Fourier transform\n   *\n   * @param {Array} arr      The array\n   * @return {Array}         resulting array\n   */\n\n\n  function _fft(arr) {\n    var len = arr.length;\n    if (len === 1) return [arr[0]];\n\n    if (len % 2 === 0) {\n      var ret = [..._fft(arr.filter((_, i) => i % 2 === 0), len / 2), ..._fft(arr.filter((_, i) => i % 2 === 1), len / 2)];\n\n      for (var k = 0; k < len / 2; k++) {\n        var p = ret[k];\n        var q = multiplyScalar(ret[k + len / 2], exp(multiplyScalar(multiplyScalar(tau, I), divideScalar(-k, len))));\n        ret[k] = addScalar(p, q);\n        ret[k + len / 2] = addScalar(p, multiplyScalar(-1, q));\n      }\n\n      return ret;\n    }\n\n    throw new Error('Can only calculate FFT of power-of-two size');\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}