{"ast":null,"code":"import { isAccessorNode, isIndexNode, isNode, isSymbolNode } from '../../utils/is.js';\nimport { getSafeProperty, setSafeProperty } from '../../utils/customs.js';\nimport { factory } from '../../utils/factory.js';\nimport { accessFactory } from './utils/access.js';\nimport { assignFactory } from './utils/assign.js';\nimport { getPrecedence } from '../operators.js';\nvar name = 'AssignmentNode';\nvar dependencies = ['subset', '?matrix', // FIXME: should not be needed at all, should be handled by subset\n'Node'];\nexport var createAssignmentNode = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var subset = _ref.subset,\n      matrix = _ref.matrix,\n      Node = _ref.Node;\n  var access = accessFactory({\n    subset: subset\n  });\n  var assign = assignFactory({\n    subset: subset,\n    matrix: matrix\n  });\n  /**\n   * @constructor AssignmentNode\n   * @extends {Node}\n   *\n   * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or\n   * replace a subset of a matrix like `A[2,2]=42`.\n   *\n   * Syntax:\n   *\n   *     new AssignmentNode(symbol, value)\n   *     new AssignmentNode(object, index, value)\n   *\n   * Usage:\n   *\n   *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2))                       // a=2\n   *    new AssignmentNode(new SymbolNode('a'), new IndexNode('b'), new ConstantNode(2))   // a.b=2\n   *    new AssignmentNode(new SymbolNode('a'), new IndexNode(1, 2), new ConstantNode(3))  // a[1,2]=3\n   *\n   * @param {SymbolNode | AccessorNode} object  Object on which to assign a value\n   * @param {IndexNode} [index=null]            Index, property name or matrix\n   *                                            index. Optional. If not provided\n   *                                            and `object` is a SymbolNode,\n   *                                            the property is assigned to the\n   *                                            global scope.\n   * @param {Node} value                        The value to be assigned\n   */\n\n  function AssignmentNode(object, index, value) {\n    if (!(this instanceof AssignmentNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.object = object;\n    this.index = value ? index : null;\n    this.value = value || index; // validate input\n\n    if (!isSymbolNode(object) && !isAccessorNode(object)) {\n      throw new TypeError('SymbolNode or AccessorNode expected as \"object\"');\n    }\n\n    if (isSymbolNode(object) && object.name === 'end') {\n      throw new Error('Cannot assign to symbol \"end\"');\n    }\n\n    if (this.index && !isIndexNode(this.index)) {\n      // index is optional\n      throw new TypeError('IndexNode expected as \"index\"');\n    }\n\n    if (!isNode(this.value)) {\n      throw new TypeError('Node expected as \"value\"');\n    } // readonly property name\n\n\n    Object.defineProperty(this, 'name', {\n      get: function () {\n        if (this.index) {\n          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n        } else {\n          return this.object.name || '';\n        }\n      }.bind(this),\n      set: function set() {\n        throw new Error('Cannot assign a new name, name is read-only');\n      }\n    });\n  }\n\n  AssignmentNode.prototype = new Node();\n  AssignmentNode.prototype.type = 'AssignmentNode';\n  AssignmentNode.prototype.isAssignmentNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  AssignmentNode.prototype._compile = function (math, argNames) {\n    var evalObject = this.object._compile(math, argNames);\n\n    var evalIndex = this.index ? this.index._compile(math, argNames) : null;\n\n    var evalValue = this.value._compile(math, argNames);\n\n    var name = this.object.name;\n\n    if (!this.index) {\n      // apply a variable to the scope, for example `a=2`\n      if (!isSymbolNode(this.object)) {\n        throw new TypeError('SymbolNode expected as object');\n      }\n\n      return function evalAssignmentNode(scope, args, context) {\n        var value = evalValue(scope, args, context);\n        scope.set(name, value);\n        return value;\n      };\n    } else if (this.index.isObjectProperty()) {\n      // apply an object property for example `a.b=2`\n      var prop = this.index.getObjectProperty();\n      return function evalAssignmentNode(scope, args, context) {\n        var object = evalObject(scope, args, context);\n        var value = evalValue(scope, args, context);\n        setSafeProperty(object, prop, value);\n        return value;\n      };\n    } else if (isSymbolNode(this.object)) {\n      // update a matrix subset, for example `a[2]=3`\n      return function evalAssignmentNode(scope, args, context) {\n        var childObject = evalObject(scope, args, context);\n        var value = evalValue(scope, args, context);\n        var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context\n\n        scope.set(name, assign(childObject, index, value));\n        return value;\n      };\n    } else {\n      // isAccessorNode(node.object) === true\n      // update a matrix subset, for example `a.b[2]=3`\n      // we will not use the compile function of the AccessorNode, but compile it\n      // ourselves here as we need the parent object of the AccessorNode:\n      // wee need to apply the updated object to parent object\n      var evalParentObject = this.object.object._compile(math, argNames);\n\n      if (this.object.index.isObjectProperty()) {\n        var parentProp = this.object.index.getObjectProperty();\n        return function evalAssignmentNode(scope, args, context) {\n          var parent = evalParentObject(scope, args, context);\n          var childObject = getSafeProperty(parent, parentProp);\n          var index = evalIndex(scope, args, childObject); // Important: we pass childObject instead of context\n\n          var value = evalValue(scope, args, context);\n          setSafeProperty(parent, parentProp, assign(childObject, index, value));\n          return value;\n        };\n      } else {\n        // if some parameters use the 'end' parameter, we need to calculate the size\n        var evalParentIndex = this.object.index._compile(math, argNames);\n\n        return function evalAssignmentNode(scope, args, context) {\n          var parent = evalParentObject(scope, args, context);\n          var parentIndex = evalParentIndex(scope, args, parent); // Important: we pass parent instead of context\n\n          var childObject = access(parent, parentIndex);\n          var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context\n\n          var value = evalValue(scope, args, context);\n          assign(parent, parentIndex, assign(childObject, index, value));\n          return value;\n        };\n      }\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  AssignmentNode.prototype.forEach = function (callback) {\n    callback(this.object, 'object', this);\n\n    if (this.index) {\n      callback(this.index, 'index', this);\n    }\n\n    callback(this.value, 'value', this);\n  };\n  /**\n   * Create a new AssignmentNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {AssignmentNode} Returns a transformed copy of the node\n   */\n\n\n  AssignmentNode.prototype.map = function (callback) {\n    var object = this._ifNode(callback(this.object, 'object', this));\n\n    var index = this.index ? this._ifNode(callback(this.index, 'index', this)) : null;\n\n    var value = this._ifNode(callback(this.value, 'value', this));\n\n    return new AssignmentNode(object, index, value);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {AssignmentNode}\n   */\n\n\n  AssignmentNode.prototype.clone = function () {\n    return new AssignmentNode(this.object, this.index, this.value);\n  };\n  /*\n   * Is parenthesis needed?\n   * @param {node} node\n   * @param {string} [parenthesis='keep']\n   * @private\n   */\n\n\n  function needParenthesis(node, parenthesis) {\n    if (!parenthesis) {\n      parenthesis = 'keep';\n    }\n\n    var precedence = getPrecedence(node, parenthesis);\n    var exprPrecedence = getPrecedence(node.value, parenthesis);\n    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;\n  }\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AssignmentNode.prototype._toString = function (options) {\n    var object = this.object.toString(options);\n    var index = this.index ? this.index.toString(options) : '';\n    var value = this.value.toString(options);\n\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = '(' + value + ')';\n    }\n\n    return object + index + ' = ' + value;\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  AssignmentNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'AssignmentNode',\n      object: this.object,\n      index: this.index,\n      value: this.value\n    };\n  };\n  /**\n   * Instantiate an AssignmentNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"AssignmentNode\", object: ..., index: ..., value: ...}`,\n   *                       where mathjs is optional\n   * @returns {AssignmentNode}\n   */\n\n\n  AssignmentNode.fromJSON = function (json) {\n    return new AssignmentNode(json.object, json.index, json.value);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AssignmentNode.prototype.toHTML = function (options) {\n    var object = this.object.toHTML(options);\n    var index = this.index ? this.index.toHTML(options) : '';\n    var value = this.value.toHTML(options);\n\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = '<span class=\"math-paranthesis math-round-parenthesis\">(</span>' + value + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n    }\n\n    return object + index + '<span class=\"math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator\">=</span>' + value;\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AssignmentNode.prototype._toTex = function (options) {\n    var object = this.object.toTex(options);\n    var index = this.index ? this.index.toTex(options) : '';\n    var value = this.value.toTex(options);\n\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = \"\\\\left(\".concat(value, \"\\\\right)\");\n    }\n\n    return object + index + ':=' + value;\n  };\n\n  return AssignmentNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["isAccessorNode","isIndexNode","isNode","isSymbolNode","getSafeProperty","setSafeProperty","factory","accessFactory","assignFactory","getPrecedence","name","dependencies","createAssignmentNode","_ref","subset","matrix","Node","access","assign","AssignmentNode","object","index","value","SyntaxError","TypeError","Error","Object","defineProperty","get","isObjectProperty","getObjectProperty","bind","set","prototype","type","isAssignmentNode","_compile","math","argNames","evalObject","evalIndex","evalValue","evalAssignmentNode","scope","args","context","prop","childObject","evalParentObject","parentProp","parent","evalParentIndex","parentIndex","forEach","callback","map","_ifNode","clone","needParenthesis","node","parenthesis","precedence","exprPrecedence","_toString","options","toString","toJSON","mathjs","fromJSON","json","toHTML","_toTex","toTex","concat","isClass"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/expression/node/AssignmentNode.js"],"sourcesContent":["import { isAccessorNode, isIndexNode, isNode, isSymbolNode } from '../../utils/is.js';\nimport { getSafeProperty, setSafeProperty } from '../../utils/customs.js';\nimport { factory } from '../../utils/factory.js';\nimport { accessFactory } from './utils/access.js';\nimport { assignFactory } from './utils/assign.js';\nimport { getPrecedence } from '../operators.js';\nvar name = 'AssignmentNode';\nvar dependencies = ['subset', '?matrix', // FIXME: should not be needed at all, should be handled by subset\n'Node'];\nexport var createAssignmentNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    subset,\n    matrix,\n    Node\n  } = _ref;\n  var access = accessFactory({\n    subset\n  });\n  var assign = assignFactory({\n    subset,\n    matrix\n  });\n  /**\n   * @constructor AssignmentNode\n   * @extends {Node}\n   *\n   * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or\n   * replace a subset of a matrix like `A[2,2]=42`.\n   *\n   * Syntax:\n   *\n   *     new AssignmentNode(symbol, value)\n   *     new AssignmentNode(object, index, value)\n   *\n   * Usage:\n   *\n   *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2))                       // a=2\n   *    new AssignmentNode(new SymbolNode('a'), new IndexNode('b'), new ConstantNode(2))   // a.b=2\n   *    new AssignmentNode(new SymbolNode('a'), new IndexNode(1, 2), new ConstantNode(3))  // a[1,2]=3\n   *\n   * @param {SymbolNode | AccessorNode} object  Object on which to assign a value\n   * @param {IndexNode} [index=null]            Index, property name or matrix\n   *                                            index. Optional. If not provided\n   *                                            and `object` is a SymbolNode,\n   *                                            the property is assigned to the\n   *                                            global scope.\n   * @param {Node} value                        The value to be assigned\n   */\n\n  function AssignmentNode(object, index, value) {\n    if (!(this instanceof AssignmentNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.object = object;\n    this.index = value ? index : null;\n    this.value = value || index; // validate input\n\n    if (!isSymbolNode(object) && !isAccessorNode(object)) {\n      throw new TypeError('SymbolNode or AccessorNode expected as \"object\"');\n    }\n\n    if (isSymbolNode(object) && object.name === 'end') {\n      throw new Error('Cannot assign to symbol \"end\"');\n    }\n\n    if (this.index && !isIndexNode(this.index)) {\n      // index is optional\n      throw new TypeError('IndexNode expected as \"index\"');\n    }\n\n    if (!isNode(this.value)) {\n      throw new TypeError('Node expected as \"value\"');\n    } // readonly property name\n\n\n    Object.defineProperty(this, 'name', {\n      get: function () {\n        if (this.index) {\n          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n        } else {\n          return this.object.name || '';\n        }\n      }.bind(this),\n      set: function set() {\n        throw new Error('Cannot assign a new name, name is read-only');\n      }\n    });\n  }\n\n  AssignmentNode.prototype = new Node();\n  AssignmentNode.prototype.type = 'AssignmentNode';\n  AssignmentNode.prototype.isAssignmentNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  AssignmentNode.prototype._compile = function (math, argNames) {\n    var evalObject = this.object._compile(math, argNames);\n\n    var evalIndex = this.index ? this.index._compile(math, argNames) : null;\n\n    var evalValue = this.value._compile(math, argNames);\n\n    var name = this.object.name;\n\n    if (!this.index) {\n      // apply a variable to the scope, for example `a=2`\n      if (!isSymbolNode(this.object)) {\n        throw new TypeError('SymbolNode expected as object');\n      }\n\n      return function evalAssignmentNode(scope, args, context) {\n        var value = evalValue(scope, args, context);\n        scope.set(name, value);\n        return value;\n      };\n    } else if (this.index.isObjectProperty()) {\n      // apply an object property for example `a.b=2`\n      var prop = this.index.getObjectProperty();\n      return function evalAssignmentNode(scope, args, context) {\n        var object = evalObject(scope, args, context);\n        var value = evalValue(scope, args, context);\n        setSafeProperty(object, prop, value);\n        return value;\n      };\n    } else if (isSymbolNode(this.object)) {\n      // update a matrix subset, for example `a[2]=3`\n      return function evalAssignmentNode(scope, args, context) {\n        var childObject = evalObject(scope, args, context);\n        var value = evalValue(scope, args, context);\n        var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context\n\n        scope.set(name, assign(childObject, index, value));\n        return value;\n      };\n    } else {\n      // isAccessorNode(node.object) === true\n      // update a matrix subset, for example `a.b[2]=3`\n      // we will not use the compile function of the AccessorNode, but compile it\n      // ourselves here as we need the parent object of the AccessorNode:\n      // wee need to apply the updated object to parent object\n      var evalParentObject = this.object.object._compile(math, argNames);\n\n      if (this.object.index.isObjectProperty()) {\n        var parentProp = this.object.index.getObjectProperty();\n        return function evalAssignmentNode(scope, args, context) {\n          var parent = evalParentObject(scope, args, context);\n          var childObject = getSafeProperty(parent, parentProp);\n          var index = evalIndex(scope, args, childObject); // Important: we pass childObject instead of context\n\n          var value = evalValue(scope, args, context);\n          setSafeProperty(parent, parentProp, assign(childObject, index, value));\n          return value;\n        };\n      } else {\n        // if some parameters use the 'end' parameter, we need to calculate the size\n        var evalParentIndex = this.object.index._compile(math, argNames);\n\n        return function evalAssignmentNode(scope, args, context) {\n          var parent = evalParentObject(scope, args, context);\n          var parentIndex = evalParentIndex(scope, args, parent); // Important: we pass parent instead of context\n\n          var childObject = access(parent, parentIndex);\n          var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context\n\n          var value = evalValue(scope, args, context);\n          assign(parent, parentIndex, assign(childObject, index, value));\n          return value;\n        };\n      }\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  AssignmentNode.prototype.forEach = function (callback) {\n    callback(this.object, 'object', this);\n\n    if (this.index) {\n      callback(this.index, 'index', this);\n    }\n\n    callback(this.value, 'value', this);\n  };\n  /**\n   * Create a new AssignmentNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {AssignmentNode} Returns a transformed copy of the node\n   */\n\n\n  AssignmentNode.prototype.map = function (callback) {\n    var object = this._ifNode(callback(this.object, 'object', this));\n\n    var index = this.index ? this._ifNode(callback(this.index, 'index', this)) : null;\n\n    var value = this._ifNode(callback(this.value, 'value', this));\n\n    return new AssignmentNode(object, index, value);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {AssignmentNode}\n   */\n\n\n  AssignmentNode.prototype.clone = function () {\n    return new AssignmentNode(this.object, this.index, this.value);\n  };\n  /*\n   * Is parenthesis needed?\n   * @param {node} node\n   * @param {string} [parenthesis='keep']\n   * @private\n   */\n\n\n  function needParenthesis(node, parenthesis) {\n    if (!parenthesis) {\n      parenthesis = 'keep';\n    }\n\n    var precedence = getPrecedence(node, parenthesis);\n    var exprPrecedence = getPrecedence(node.value, parenthesis);\n    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;\n  }\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AssignmentNode.prototype._toString = function (options) {\n    var object = this.object.toString(options);\n    var index = this.index ? this.index.toString(options) : '';\n    var value = this.value.toString(options);\n\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = '(' + value + ')';\n    }\n\n    return object + index + ' = ' + value;\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  AssignmentNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'AssignmentNode',\n      object: this.object,\n      index: this.index,\n      value: this.value\n    };\n  };\n  /**\n   * Instantiate an AssignmentNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"AssignmentNode\", object: ..., index: ..., value: ...}`,\n   *                       where mathjs is optional\n   * @returns {AssignmentNode}\n   */\n\n\n  AssignmentNode.fromJSON = function (json) {\n    return new AssignmentNode(json.object, json.index, json.value);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AssignmentNode.prototype.toHTML = function (options) {\n    var object = this.object.toHTML(options);\n    var index = this.index ? this.index.toHTML(options) : '';\n    var value = this.value.toHTML(options);\n\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = '<span class=\"math-paranthesis math-round-parenthesis\">(</span>' + value + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n    }\n\n    return object + index + '<span class=\"math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator\">=</span>' + value;\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AssignmentNode.prototype._toTex = function (options) {\n    var object = this.object.toTex(options);\n    var index = this.index ? this.index.toTex(options) : '';\n    var value = this.value.toTex(options);\n\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = \"\\\\left(\".concat(value, \"\\\\right)\");\n    }\n\n    return object + index + ':=' + value;\n  };\n\n  return AssignmentNode;\n}, {\n  isClass: true,\n  isNode: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}