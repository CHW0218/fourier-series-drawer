{"ast":null,"code":"import Complex from 'complex.js';\nimport { format } from '../../utils/number.js';\nimport { isNumber, isUnit } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'Complex';\nvar dependencies = [];\nexport var createComplexClass = /* #__PURE__ */factory(name, dependencies, function () {\n  /**\n   * Attach type information\n   */\n  Complex.prototype.type = 'Complex';\n  Complex.prototype.isComplex = true;\n  /**\n   * Get a JSON representation of the complex number\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Complex\", \"re\": 2, \"im\": 3}`\n   */\n\n  Complex.prototype.toJSON = function () {\n    return {\n      mathjs: 'Complex',\n      re: this.re,\n      im: this.im\n    };\n  };\n  /*\n   * Return the value of the complex number in polar notation\n   * The angle phi will be set in the interval of [-pi, pi].\n   * @return {{r: number, phi: number}} Returns and object with properties r and phi.\n   */\n\n\n  Complex.prototype.toPolar = function () {\n    return {\n      r: this.abs(),\n      phi: this.arg()\n    };\n  };\n  /**\n   * Get a string representation of the complex number,\n   * with optional formatting options.\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @return {string} str\n   */\n\n\n  Complex.prototype.format = function (options) {\n    var str = '';\n    var im = this.im;\n    var re = this.re;\n    var strRe = format(this.re, options);\n    var strIm = format(this.im, options); // round either re or im when smaller than the configured precision\n\n    var precision = isNumber(options) ? options : options ? options.precision : null;\n\n    if (precision !== null) {\n      var epsilon = Math.pow(10, -precision);\n\n      if (Math.abs(re / im) < epsilon) {\n        re = 0;\n      }\n\n      if (Math.abs(im / re) < epsilon) {\n        im = 0;\n      }\n    }\n\n    if (im === 0) {\n      // real value\n      str = strRe;\n    } else if (re === 0) {\n      // purely complex value\n      if (im === 1) {\n        str = 'i';\n      } else if (im === -1) {\n        str = '-i';\n      } else {\n        str = strIm + 'i';\n      }\n    } else {\n      // complex value\n      if (im < 0) {\n        if (im === -1) {\n          str = strRe + ' - i';\n        } else {\n          str = strRe + ' - ' + strIm.substring(1) + 'i';\n        }\n      } else {\n        if (im === 1) {\n          str = strRe + ' + i';\n        } else {\n          str = strRe + ' + ' + strIm + 'i';\n        }\n      }\n    }\n\n    return str;\n  };\n  /**\n   * Create a complex number from polar coordinates\n   *\n   * Usage:\n   *\n   *     Complex.fromPolar(r: number, phi: number) : Complex\n   *     Complex.fromPolar({r: number, phi: number}) : Complex\n   *\n   * @param {*} args...\n   * @return {Complex}\n   */\n\n\n  Complex.fromPolar = function (args) {\n    switch (arguments.length) {\n      case 1:\n        {\n          var arg = arguments[0];\n\n          if (typeof arg === 'object') {\n            return Complex(arg);\n          } else {\n            throw new TypeError('Input has to be an object with r and phi keys.');\n          }\n        }\n\n      case 2:\n        {\n          var r = arguments[0];\n          var phi = arguments[1];\n\n          if (isNumber(r)) {\n            if (isUnit(phi) && phi.hasBase('ANGLE')) {\n              // convert unit to a number in radians\n              phi = phi.toNumber('rad');\n            }\n\n            if (isNumber(phi)) {\n              return new Complex({\n                r: r,\n                phi: phi\n              });\n            }\n\n            throw new TypeError('Phi is not a number nor an angle unit.');\n          } else {\n            throw new TypeError('Radius r is not a number.');\n          }\n        }\n\n      default:\n        throw new SyntaxError('Wrong number of arguments in function fromPolar');\n    }\n  };\n\n  Complex.prototype.valueOf = Complex.prototype.toString;\n  /**\n   * Create a Complex number from a JSON object\n   * @param {Object} json  A JSON Object structured as\n   *                       {\"mathjs\": \"Complex\", \"re\": 2, \"im\": 3}\n   *                       All properties are optional, default values\n   *                       for `re` and `im` are 0.\n   * @return {Complex} Returns a new Complex number\n   */\n\n  Complex.fromJSON = function (json) {\n    return new Complex(json);\n  };\n  /**\n   * Compare two complex numbers, `a` and `b`:\n   *\n   * - Returns 1 when the real part of `a` is larger than the real part of `b`\n   * - Returns -1 when the real part of `a` is smaller than the real part of `b`\n   * - Returns 1 when the real parts are equal\n   *   and the imaginary part of `a` is larger than the imaginary part of `b`\n   * - Returns -1 when the real parts are equal\n   *   and the imaginary part of `a` is smaller than the imaginary part of `b`\n   * - Returns 0 when both real and imaginary parts are equal.\n   *\n   * @params {Complex} a\n   * @params {Complex} b\n   * @returns {number} Returns the comparison result: -1, 0, or 1\n   */\n\n\n  Complex.compare = function (a, b) {\n    if (a.re > b.re) {\n      return 1;\n    }\n\n    if (a.re < b.re) {\n      return -1;\n    }\n\n    if (a.im > b.im) {\n      return 1;\n    }\n\n    if (a.im < b.im) {\n      return -1;\n    }\n\n    return 0;\n  };\n\n  return Complex;\n}, {\n  isClass: true\n});","map":{"version":3,"names":["Complex","format","isNumber","isUnit","factory","name","dependencies","createComplexClass","prototype","type","isComplex","toJSON","mathjs","re","im","toPolar","r","abs","phi","arg","options","str","strRe","strIm","precision","epsilon","Math","pow","substring","fromPolar","args","arguments","length","TypeError","hasBase","toNumber","SyntaxError","valueOf","toString","fromJSON","json","compare","a","b","isClass"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/type/complex/Complex.js"],"sourcesContent":["import Complex from 'complex.js';\nimport { format } from '../../utils/number.js';\nimport { isNumber, isUnit } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'Complex';\nvar dependencies = [];\nexport var createComplexClass = /* #__PURE__ */factory(name, dependencies, () => {\n  /**\n   * Attach type information\n   */\n  Complex.prototype.type = 'Complex';\n  Complex.prototype.isComplex = true;\n  /**\n   * Get a JSON representation of the complex number\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Complex\", \"re\": 2, \"im\": 3}`\n   */\n\n  Complex.prototype.toJSON = function () {\n    return {\n      mathjs: 'Complex',\n      re: this.re,\n      im: this.im\n    };\n  };\n  /*\n   * Return the value of the complex number in polar notation\n   * The angle phi will be set in the interval of [-pi, pi].\n   * @return {{r: number, phi: number}} Returns and object with properties r and phi.\n   */\n\n\n  Complex.prototype.toPolar = function () {\n    return {\n      r: this.abs(),\n      phi: this.arg()\n    };\n  };\n  /**\n   * Get a string representation of the complex number,\n   * with optional formatting options.\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @return {string} str\n   */\n\n\n  Complex.prototype.format = function (options) {\n    var str = '';\n    var im = this.im;\n    var re = this.re;\n    var strRe = format(this.re, options);\n    var strIm = format(this.im, options); // round either re or im when smaller than the configured precision\n\n    var precision = isNumber(options) ? options : options ? options.precision : null;\n\n    if (precision !== null) {\n      var epsilon = Math.pow(10, -precision);\n\n      if (Math.abs(re / im) < epsilon) {\n        re = 0;\n      }\n\n      if (Math.abs(im / re) < epsilon) {\n        im = 0;\n      }\n    }\n\n    if (im === 0) {\n      // real value\n      str = strRe;\n    } else if (re === 0) {\n      // purely complex value\n      if (im === 1) {\n        str = 'i';\n      } else if (im === -1) {\n        str = '-i';\n      } else {\n        str = strIm + 'i';\n      }\n    } else {\n      // complex value\n      if (im < 0) {\n        if (im === -1) {\n          str = strRe + ' - i';\n        } else {\n          str = strRe + ' - ' + strIm.substring(1) + 'i';\n        }\n      } else {\n        if (im === 1) {\n          str = strRe + ' + i';\n        } else {\n          str = strRe + ' + ' + strIm + 'i';\n        }\n      }\n    }\n\n    return str;\n  };\n  /**\n   * Create a complex number from polar coordinates\n   *\n   * Usage:\n   *\n   *     Complex.fromPolar(r: number, phi: number) : Complex\n   *     Complex.fromPolar({r: number, phi: number}) : Complex\n   *\n   * @param {*} args...\n   * @return {Complex}\n   */\n\n\n  Complex.fromPolar = function (args) {\n    switch (arguments.length) {\n      case 1:\n        {\n          var arg = arguments[0];\n\n          if (typeof arg === 'object') {\n            return Complex(arg);\n          } else {\n            throw new TypeError('Input has to be an object with r and phi keys.');\n          }\n        }\n\n      case 2:\n        {\n          var r = arguments[0];\n          var phi = arguments[1];\n\n          if (isNumber(r)) {\n            if (isUnit(phi) && phi.hasBase('ANGLE')) {\n              // convert unit to a number in radians\n              phi = phi.toNumber('rad');\n            }\n\n            if (isNumber(phi)) {\n              return new Complex({\n                r,\n                phi\n              });\n            }\n\n            throw new TypeError('Phi is not a number nor an angle unit.');\n          } else {\n            throw new TypeError('Radius r is not a number.');\n          }\n        }\n\n      default:\n        throw new SyntaxError('Wrong number of arguments in function fromPolar');\n    }\n  };\n\n  Complex.prototype.valueOf = Complex.prototype.toString;\n  /**\n   * Create a Complex number from a JSON object\n   * @param {Object} json  A JSON Object structured as\n   *                       {\"mathjs\": \"Complex\", \"re\": 2, \"im\": 3}\n   *                       All properties are optional, default values\n   *                       for `re` and `im` are 0.\n   * @return {Complex} Returns a new Complex number\n   */\n\n  Complex.fromJSON = function (json) {\n    return new Complex(json);\n  };\n  /**\n   * Compare two complex numbers, `a` and `b`:\n   *\n   * - Returns 1 when the real part of `a` is larger than the real part of `b`\n   * - Returns -1 when the real part of `a` is smaller than the real part of `b`\n   * - Returns 1 when the real parts are equal\n   *   and the imaginary part of `a` is larger than the imaginary part of `b`\n   * - Returns -1 when the real parts are equal\n   *   and the imaginary part of `a` is smaller than the imaginary part of `b`\n   * - Returns 0 when both real and imaginary parts are equal.\n   *\n   * @params {Complex} a\n   * @params {Complex} b\n   * @returns {number} Returns the comparison result: -1, 0, or 1\n   */\n\n\n  Complex.compare = function (a, b) {\n    if (a.re > b.re) {\n      return 1;\n    }\n\n    if (a.re < b.re) {\n      return -1;\n    }\n\n    if (a.im > b.im) {\n      return 1;\n    }\n\n    if (a.im < b.im) {\n      return -1;\n    }\n\n    return 0;\n  };\n\n  return Complex;\n}, {\n  isClass: true\n});"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,YAApB;AACA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,QAAT,EAAmBC,MAAnB,QAAiC,mBAAjC;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,SAAX;AACA,IAAIC,YAAY,GAAG,EAAnB;AACA,OAAO,IAAIC,kBAAkB,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,YAAM;EAC/E;AACF;AACA;EACEN,OAAO,CAACQ,SAAR,CAAkBC,IAAlB,GAAyB,SAAzB;EACAT,OAAO,CAACQ,SAAR,CAAkBE,SAAlB,GAA8B,IAA9B;EACA;AACF;AACA;AACA;AACA;;EAEEV,OAAO,CAACQ,SAAR,CAAkBG,MAAlB,GAA2B,YAAY;IACrC,OAAO;MACLC,MAAM,EAAE,SADH;MAELC,EAAE,EAAE,KAAKA,EAFJ;MAGLC,EAAE,EAAE,KAAKA;IAHJ,CAAP;EAKD,CAND;EAOA;AACF;AACA;AACA;AACA;;;EAGEd,OAAO,CAACQ,SAAR,CAAkBO,OAAlB,GAA4B,YAAY;IACtC,OAAO;MACLC,CAAC,EAAE,KAAKC,GAAL,EADE;MAELC,GAAG,EAAE,KAAKC,GAAL;IAFA,CAAP;EAID,CALD;EAMA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EAGEnB,OAAO,CAACQ,SAAR,CAAkBP,MAAlB,GAA2B,UAAUmB,OAAV,EAAmB;IAC5C,IAAIC,GAAG,GAAG,EAAV;IACA,IAAIP,EAAE,GAAG,KAAKA,EAAd;IACA,IAAID,EAAE,GAAG,KAAKA,EAAd;IACA,IAAIS,KAAK,GAAGrB,MAAM,CAAC,KAAKY,EAAN,EAAUO,OAAV,CAAlB;IACA,IAAIG,KAAK,GAAGtB,MAAM,CAAC,KAAKa,EAAN,EAAUM,OAAV,CAAlB,CAL4C,CAKN;;IAEtC,IAAII,SAAS,GAAGtB,QAAQ,CAACkB,OAAD,CAAR,GAAoBA,OAApB,GAA8BA,OAAO,GAAGA,OAAO,CAACI,SAAX,GAAuB,IAA5E;;IAEA,IAAIA,SAAS,KAAK,IAAlB,EAAwB;MACtB,IAAIC,OAAO,GAAGC,IAAI,CAACC,GAAL,CAAS,EAAT,EAAa,CAACH,SAAd,CAAd;;MAEA,IAAIE,IAAI,CAACT,GAAL,CAASJ,EAAE,GAAGC,EAAd,IAAoBW,OAAxB,EAAiC;QAC/BZ,EAAE,GAAG,CAAL;MACD;;MAED,IAAIa,IAAI,CAACT,GAAL,CAASH,EAAE,GAAGD,EAAd,IAAoBY,OAAxB,EAAiC;QAC/BX,EAAE,GAAG,CAAL;MACD;IACF;;IAED,IAAIA,EAAE,KAAK,CAAX,EAAc;MACZ;MACAO,GAAG,GAAGC,KAAN;IACD,CAHD,MAGO,IAAIT,EAAE,KAAK,CAAX,EAAc;MACnB;MACA,IAAIC,EAAE,KAAK,CAAX,EAAc;QACZO,GAAG,GAAG,GAAN;MACD,CAFD,MAEO,IAAIP,EAAE,KAAK,CAAC,CAAZ,EAAe;QACpBO,GAAG,GAAG,IAAN;MACD,CAFM,MAEA;QACLA,GAAG,GAAGE,KAAK,GAAG,GAAd;MACD;IACF,CATM,MASA;MACL;MACA,IAAIT,EAAE,GAAG,CAAT,EAAY;QACV,IAAIA,EAAE,KAAK,CAAC,CAAZ,EAAe;UACbO,GAAG,GAAGC,KAAK,GAAG,MAAd;QACD,CAFD,MAEO;UACLD,GAAG,GAAGC,KAAK,GAAG,KAAR,GAAgBC,KAAK,CAACK,SAAN,CAAgB,CAAhB,CAAhB,GAAqC,GAA3C;QACD;MACF,CAND,MAMO;QACL,IAAId,EAAE,KAAK,CAAX,EAAc;UACZO,GAAG,GAAGC,KAAK,GAAG,MAAd;QACD,CAFD,MAEO;UACLD,GAAG,GAAGC,KAAK,GAAG,KAAR,GAAgBC,KAAhB,GAAwB,GAA9B;QACD;MACF;IACF;;IAED,OAAOF,GAAP;EACD,CAnDD;EAoDA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EAGErB,OAAO,CAAC6B,SAAR,GAAoB,UAAUC,IAAV,EAAgB;IAClC,QAAQC,SAAS,CAACC,MAAlB;MACE,KAAK,CAAL;QACE;UACE,IAAIb,GAAG,GAAGY,SAAS,CAAC,CAAD,CAAnB;;UAEA,IAAI,OAAOZ,GAAP,KAAe,QAAnB,EAA6B;YAC3B,OAAOnB,OAAO,CAACmB,GAAD,CAAd;UACD,CAFD,MAEO;YACL,MAAM,IAAIc,SAAJ,CAAc,gDAAd,CAAN;UACD;QACF;;MAEH,KAAK,CAAL;QACE;UACE,IAAIjB,CAAC,GAAGe,SAAS,CAAC,CAAD,CAAjB;UACA,IAAIb,GAAG,GAAGa,SAAS,CAAC,CAAD,CAAnB;;UAEA,IAAI7B,QAAQ,CAACc,CAAD,CAAZ,EAAiB;YACf,IAAIb,MAAM,CAACe,GAAD,CAAN,IAAeA,GAAG,CAACgB,OAAJ,CAAY,OAAZ,CAAnB,EAAyC;cACvC;cACAhB,GAAG,GAAGA,GAAG,CAACiB,QAAJ,CAAa,KAAb,CAAN;YACD;;YAED,IAAIjC,QAAQ,CAACgB,GAAD,CAAZ,EAAmB;cACjB,OAAO,IAAIlB,OAAJ,CAAY;gBACjBgB,CAAC,EAADA,CADiB;gBAEjBE,GAAG,EAAHA;cAFiB,CAAZ,CAAP;YAID;;YAED,MAAM,IAAIe,SAAJ,CAAc,wCAAd,CAAN;UACD,CAdD,MAcO;YACL,MAAM,IAAIA,SAAJ,CAAc,2BAAd,CAAN;UACD;QACF;;MAEH;QACE,MAAM,IAAIG,WAAJ,CAAgB,iDAAhB,CAAN;IArCJ;EAuCD,CAxCD;;EA0CApC,OAAO,CAACQ,SAAR,CAAkB6B,OAAlB,GAA4BrC,OAAO,CAACQ,SAAR,CAAkB8B,QAA9C;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EAEEtC,OAAO,CAACuC,QAAR,GAAmB,UAAUC,IAAV,EAAgB;IACjC,OAAO,IAAIxC,OAAJ,CAAYwC,IAAZ,CAAP;EACD,CAFD;EAGA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EAGExC,OAAO,CAACyC,OAAR,GAAkB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;IAChC,IAAID,CAAC,CAAC7B,EAAF,GAAO8B,CAAC,CAAC9B,EAAb,EAAiB;MACf,OAAO,CAAP;IACD;;IAED,IAAI6B,CAAC,CAAC7B,EAAF,GAAO8B,CAAC,CAAC9B,EAAb,EAAiB;MACf,OAAO,CAAC,CAAR;IACD;;IAED,IAAI6B,CAAC,CAAC5B,EAAF,GAAO6B,CAAC,CAAC7B,EAAb,EAAiB;MACf,OAAO,CAAP;IACD;;IAED,IAAI4B,CAAC,CAAC5B,EAAF,GAAO6B,CAAC,CAAC7B,EAAb,EAAiB;MACf,OAAO,CAAC,CAAR;IACD;;IAED,OAAO,CAAP;EACD,CAlBD;;EAoBA,OAAOd,OAAP;AACD,CAzMqD,EAyMnD;EACD4C,OAAO,EAAE;AADR,CAzMmD,CAA/C"},"metadata":{},"sourceType":"module"}