{"ast":null,"code":"import { arraySize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { isMatrix } from '../../utils/is.js';\nvar name = 'ifft';\nvar dependencies = ['typed', 'fft', 'dotDivide', 'conj'];\nexport var createIfft = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      fft = _ref.fft,\n      dotDivide = _ref.dotDivide,\n      conj = _ref.conj;\n  /**\n   * Calculate N-dimensional inverse fourier transform\n   *\n   * Syntax:\n   *\n   *     math.ifft(arr)\n   *\n   * Examples:\n   *\n   *    math.ifft([[2, 2], [0, 0]]) // returns [[{re:1, im:0}, {re:0, im:0}], [{re:1, im:0}, {re:0, im:0}]]\n   *\n   * See Also:\n   *\n   *      fft\n   *\n   * @param {Array | Matrix} arr    An array or matrix\n   * @return {Array | Matrix}       N-dimensional fourier transformation of the array\n   */\n\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(arr) {\n      var size = isMatrix(arr) ? arr.size() : arraySize(arr);\n      return dotDivide(conj(fft(conj(arr))), size.reduce(function (acc, curr) {\n        return acc * curr;\n      }, 1));\n    }\n  });\n});","map":{"version":3,"names":["arraySize","factory","isMatrix","name","dependencies","createIfft","_ref","typed","fft","dotDivide","conj","ArrayMatrix","arr","size","reduce","acc","curr"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/function/matrix/ifft.js"],"sourcesContent":["import { arraySize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { isMatrix } from '../../utils/is.js';\nvar name = 'ifft';\nvar dependencies = ['typed', 'fft', 'dotDivide', 'conj'];\nexport var createIfft = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    fft,\n    dotDivide,\n    conj\n  } = _ref;\n\n  /**\n   * Calculate N-dimensional inverse fourier transform\n   *\n   * Syntax:\n   *\n   *     math.ifft(arr)\n   *\n   * Examples:\n   *\n   *    math.ifft([[2, 2], [0, 0]]) // returns [[{re:1, im:0}, {re:0, im:0}], [{re:1, im:0}, {re:0, im:0}]]\n   *\n   * See Also:\n   *\n   *      fft\n   *\n   * @param {Array | Matrix} arr    An array or matrix\n   * @return {Array | Matrix}       N-dimensional fourier transformation of the array\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(arr) {\n      var size = isMatrix(arr) ? arr.size() : arraySize(arr);\n      return dotDivide(conj(fft(conj(arr))), size.reduce((acc, curr) => acc * curr, 1));\n    }\n  });\n});"],"mappings":"AAAA,SAASA,SAAT,QAA0B,sBAA1B;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,KAAV,EAAiB,WAAjB,EAA8B,MAA9B,CAAnB;AACA,OAAO,IAAIC,UAAU,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EACzE,IACEC,KADF,GAKID,IALJ,CACEC,KADF;EAAA,IAEEC,GAFF,GAKIF,IALJ,CAEEE,GAFF;EAAA,IAGEC,SAHF,GAKIH,IALJ,CAGEG,SAHF;EAAA,IAIEC,IAJF,GAKIJ,IALJ,CAIEI,IAJF;EAOA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOH,KAAK,CAACJ,IAAD,EAAO;IACjB,kBAAkB,SAASQ,WAAT,CAAqBC,GAArB,EAA0B;MAC1C,IAAIC,IAAI,GAAGX,QAAQ,CAACU,GAAD,CAAR,GAAgBA,GAAG,CAACC,IAAJ,EAAhB,GAA6Bb,SAAS,CAACY,GAAD,CAAjD;MACA,OAAOH,SAAS,CAACC,IAAI,CAACF,GAAG,CAACE,IAAI,CAACE,GAAD,CAAL,CAAJ,CAAL,EAAuBC,IAAI,CAACC,MAAL,CAAY,UAACC,GAAD,EAAMC,IAAN;QAAA,OAAeD,GAAG,GAAGC,IAArB;MAAA,CAAZ,EAAuC,CAAvC,CAAvB,CAAhB;IACD;EAJgB,CAAP,CAAZ;AAMD,CAhC6C,CAAvC"},"metadata":{},"sourceType":"module"}