{"ast":null,"code":"import { isArray, isMatrix, isDenseMatrix, isSparseMatrix } from '../../../../utils/is.js';\nimport { arraySize } from '../../../../utils/array.js';\nimport { format } from '../../../../utils/string.js';\nexport function createSolveValidation(_ref) {\n  var DenseMatrix = _ref.DenseMatrix;\n  /**\n   * Validates matrix and column vector b for backward/forward substitution algorithms.\n   *\n   * @param {Matrix} m            An N x N matrix\n   * @param {Array | Matrix} b    A column vector\n   * @param {Boolean} copy        Return a copy of vector b\n   *\n   * @return {DenseMatrix}        Dense column vector b\n   */\n\n  return function solveValidation(m, b, copy) {\n    var mSize = m.size();\n\n    if (mSize.length !== 2) {\n      throw new RangeError('Matrix must be two dimensional (size: ' + format(mSize) + ')');\n    }\n\n    var rows = mSize[0];\n    var columns = mSize[1];\n\n    if (rows !== columns) {\n      throw new RangeError('Matrix must be square (size: ' + format(mSize) + ')');\n    }\n\n    var data = [];\n\n    if (isMatrix(b)) {\n      var bSize = b.size();\n      var bdata = b._data; // 1-dim vector\n\n      if (bSize.length === 1) {\n        if (bSize[0] !== rows) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n\n        for (var i = 0; i < rows; i++) {\n          data[i] = [bdata[i]];\n        }\n\n        return new DenseMatrix({\n          data: data,\n          size: [rows, 1],\n          datatype: b._datatype\n        });\n      } // 2-dim column\n\n\n      if (bSize.length === 2) {\n        if (bSize[0] !== rows || bSize[1] !== 1) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n\n        if (isDenseMatrix(b)) {\n          if (copy) {\n            data = [];\n\n            for (var _i = 0; _i < rows; _i++) {\n              data[_i] = [bdata[_i][0]];\n            }\n\n            return new DenseMatrix({\n              data: data,\n              size: [rows, 1],\n              datatype: b._datatype\n            });\n          }\n\n          return b;\n        }\n\n        if (isSparseMatrix(b)) {\n          for (var _i2 = 0; _i2 < rows; _i2++) {\n            data[_i2] = [0];\n          }\n\n          var values = b._values;\n          var index = b._index;\n          var ptr = b._ptr;\n\n          for (var k1 = ptr[1], k = ptr[0]; k < k1; k++) {\n            var _i3 = index[k];\n            data[_i3][0] = values[k];\n          }\n\n          return new DenseMatrix({\n            data: data,\n            size: [rows, 1],\n            datatype: b._datatype\n          });\n        }\n      }\n\n      throw new RangeError('Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.');\n    }\n\n    if (isArray(b)) {\n      var bsize = arraySize(b);\n\n      if (bsize.length === 1) {\n        if (bsize[0] !== rows) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n\n        for (var _i4 = 0; _i4 < rows; _i4++) {\n          data[_i4] = [b[_i4]];\n        }\n\n        return new DenseMatrix({\n          data: data,\n          size: [rows, 1]\n        });\n      }\n\n      if (bsize.length === 2) {\n        if (bsize[0] !== rows || bsize[1] !== 1) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n\n        for (var _i5 = 0; _i5 < rows; _i5++) {\n          data[_i5] = [b[_i5][0]];\n        }\n\n        return new DenseMatrix({\n          data: data,\n          size: [rows, 1]\n        });\n      }\n\n      throw new RangeError('Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.');\n    }\n  };\n}","map":{"version":3,"names":["isArray","isMatrix","isDenseMatrix","isSparseMatrix","arraySize","format","createSolveValidation","_ref","DenseMatrix","solveValidation","m","b","copy","mSize","size","length","RangeError","rows","columns","data","bSize","bdata","_data","i","datatype","_datatype","_i","_i2","values","_values","index","_index","ptr","_ptr","k1","k","_i3","bsize","_i4","_i5"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/function/algebra/solver/utils/solveValidation.js"],"sourcesContent":["import { isArray, isMatrix, isDenseMatrix, isSparseMatrix } from '../../../../utils/is.js';\nimport { arraySize } from '../../../../utils/array.js';\nimport { format } from '../../../../utils/string.js';\nexport function createSolveValidation(_ref) {\n  var {\n    DenseMatrix\n  } = _ref;\n\n  /**\n   * Validates matrix and column vector b for backward/forward substitution algorithms.\n   *\n   * @param {Matrix} m            An N x N matrix\n   * @param {Array | Matrix} b    A column vector\n   * @param {Boolean} copy        Return a copy of vector b\n   *\n   * @return {DenseMatrix}        Dense column vector b\n   */\n  return function solveValidation(m, b, copy) {\n    var mSize = m.size();\n\n    if (mSize.length !== 2) {\n      throw new RangeError('Matrix must be two dimensional (size: ' + format(mSize) + ')');\n    }\n\n    var rows = mSize[0];\n    var columns = mSize[1];\n\n    if (rows !== columns) {\n      throw new RangeError('Matrix must be square (size: ' + format(mSize) + ')');\n    }\n\n    var data = [];\n\n    if (isMatrix(b)) {\n      var bSize = b.size();\n      var bdata = b._data; // 1-dim vector\n\n      if (bSize.length === 1) {\n        if (bSize[0] !== rows) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n\n        for (var i = 0; i < rows; i++) {\n          data[i] = [bdata[i]];\n        }\n\n        return new DenseMatrix({\n          data,\n          size: [rows, 1],\n          datatype: b._datatype\n        });\n      } // 2-dim column\n\n\n      if (bSize.length === 2) {\n        if (bSize[0] !== rows || bSize[1] !== 1) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n\n        if (isDenseMatrix(b)) {\n          if (copy) {\n            data = [];\n\n            for (var _i = 0; _i < rows; _i++) {\n              data[_i] = [bdata[_i][0]];\n            }\n\n            return new DenseMatrix({\n              data,\n              size: [rows, 1],\n              datatype: b._datatype\n            });\n          }\n\n          return b;\n        }\n\n        if (isSparseMatrix(b)) {\n          for (var _i2 = 0; _i2 < rows; _i2++) {\n            data[_i2] = [0];\n          }\n\n          var values = b._values;\n          var index = b._index;\n          var ptr = b._ptr;\n\n          for (var k1 = ptr[1], k = ptr[0]; k < k1; k++) {\n            var _i3 = index[k];\n            data[_i3][0] = values[k];\n          }\n\n          return new DenseMatrix({\n            data,\n            size: [rows, 1],\n            datatype: b._datatype\n          });\n        }\n      }\n\n      throw new RangeError('Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.');\n    }\n\n    if (isArray(b)) {\n      var bsize = arraySize(b);\n\n      if (bsize.length === 1) {\n        if (bsize[0] !== rows) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n\n        for (var _i4 = 0; _i4 < rows; _i4++) {\n          data[_i4] = [b[_i4]];\n        }\n\n        return new DenseMatrix({\n          data,\n          size: [rows, 1]\n        });\n      }\n\n      if (bsize.length === 2) {\n        if (bsize[0] !== rows || bsize[1] !== 1) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n\n        for (var _i5 = 0; _i5 < rows; _i5++) {\n          data[_i5] = [b[_i5][0]];\n        }\n\n        return new DenseMatrix({\n          data,\n          size: [rows, 1]\n        });\n      }\n\n      throw new RangeError('Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.');\n    }\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}