{"ast":null,"code":"import { filter, filterRegExp } from '../../utils/array.js';\nimport { maxArgumentCount } from '../../utils/function.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'filter';\nvar dependencies = ['typed'];\nexport var createFilter = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  /**\n   * Filter the items in an array or one dimensional matrix.\n   *\n   * Syntax:\n   *\n   *    math.filter(x, test)\n   *\n   * Examples:\n   *\n   *    function isPositive (x) {\n   *      return x > 0\n   *    }\n   *    math.filter([6, -2, -1, 4, 3], isPositive) // returns [6, 4, 3]\n   *\n   *    math.filter([\"23\", \"foo\", \"100\", \"55\", \"bar\"], /[0-9]+/) // returns [\"23\", \"100\", \"55\"]\n   *\n   * See also:\n   *\n   *    forEach, map, sort\n   *\n   * @param {Matrix | Array} x    A one dimensional matrix or array to filter\n   * @param {Function | RegExp} test\n   *        A function or regular expression to test items.\n   *        All entries for which `test` returns true are returned.\n   *        When `test` is a function, it is invoked with three parameters:\n   *        the value of the element, the index of the element, and the\n   *        matrix/array being traversed. The function must return a boolean.\n   * @return {Matrix | Array} Returns the filtered matrix.\n   */\n\n  return typed('filter', {\n    'Array, function': _filterCallback,\n    'Matrix, function': function MatrixFunction(x, test) {\n      return x.create(_filterCallback(x.toArray(), test));\n    },\n    'Array, RegExp': filterRegExp,\n    'Matrix, RegExp': function MatrixRegExp(x, test) {\n      return x.create(filterRegExp(x.toArray(), test));\n    }\n  });\n});\n/**\n * Filter values in a callback given a callback function\n * @param {Array} x\n * @param {Function} callback\n * @return {Array} Returns the filtered array\n * @private\n */\n\nfunction _filterCallback(x, callback) {\n  // figure out what number of arguments the callback function expects\n  var args = maxArgumentCount(callback);\n  return filter(x, function (value, index, array) {\n    // invoke the callback function with the right number of arguments\n    if (args === 1) {\n      return callback(value);\n    } else if (args === 2) {\n      return callback(value, [index]);\n    } else {\n      // 3 or -1\n      return callback(value, [index], array);\n    }\n  });\n}","map":{"version":3,"names":["filter","filterRegExp","maxArgumentCount","factory","name","dependencies","createFilter","_ref","typed","_filterCallback","MatrixFunction","x","test","create","toArray","MatrixRegExp","callback","args","value","index","array"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/function/matrix/filter.js"],"sourcesContent":["import { filter, filterRegExp } from '../../utils/array.js';\nimport { maxArgumentCount } from '../../utils/function.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'filter';\nvar dependencies = ['typed'];\nexport var createFilter = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n\n  /**\n   * Filter the items in an array or one dimensional matrix.\n   *\n   * Syntax:\n   *\n   *    math.filter(x, test)\n   *\n   * Examples:\n   *\n   *    function isPositive (x) {\n   *      return x > 0\n   *    }\n   *    math.filter([6, -2, -1, 4, 3], isPositive) // returns [6, 4, 3]\n   *\n   *    math.filter([\"23\", \"foo\", \"100\", \"55\", \"bar\"], /[0-9]+/) // returns [\"23\", \"100\", \"55\"]\n   *\n   * See also:\n   *\n   *    forEach, map, sort\n   *\n   * @param {Matrix | Array} x    A one dimensional matrix or array to filter\n   * @param {Function | RegExp} test\n   *        A function or regular expression to test items.\n   *        All entries for which `test` returns true are returned.\n   *        When `test` is a function, it is invoked with three parameters:\n   *        the value of the element, the index of the element, and the\n   *        matrix/array being traversed. The function must return a boolean.\n   * @return {Matrix | Array} Returns the filtered matrix.\n   */\n  return typed('filter', {\n    'Array, function': _filterCallback,\n    'Matrix, function': function MatrixFunction(x, test) {\n      return x.create(_filterCallback(x.toArray(), test));\n    },\n    'Array, RegExp': filterRegExp,\n    'Matrix, RegExp': function MatrixRegExp(x, test) {\n      return x.create(filterRegExp(x.toArray(), test));\n    }\n  });\n});\n/**\n * Filter values in a callback given a callback function\n * @param {Array} x\n * @param {Function} callback\n * @return {Array} Returns the filtered array\n * @private\n */\n\nfunction _filterCallback(x, callback) {\n  // figure out what number of arguments the callback function expects\n  var args = maxArgumentCount(callback);\n  return filter(x, function (value, index, array) {\n    // invoke the callback function with the right number of arguments\n    if (args === 1) {\n      return callback(value);\n    } else if (args === 2) {\n      return callback(value, [index]);\n    } else {\n      // 3 or -1\n      return callback(value, [index], array);\n    }\n  });\n}"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,YAAjB,QAAqC,sBAArC;AACA,SAASC,gBAAT,QAAiC,yBAAjC;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,QAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,YAAY,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EAC3E,IACEC,KADF,GAEID,IAFJ,CACEC,KADF;EAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOA,KAAK,CAAC,QAAD,EAAW;IACrB,mBAAmBC,eADE;IAErB,oBAAoB,SAASC,cAAT,CAAwBC,CAAxB,EAA2BC,IAA3B,EAAiC;MACnD,OAAOD,CAAC,CAACE,MAAF,CAASJ,eAAe,CAACE,CAAC,CAACG,OAAF,EAAD,EAAcF,IAAd,CAAxB,CAAP;IACD,CAJoB;IAKrB,iBAAiBX,YALI;IAMrB,kBAAkB,SAASc,YAAT,CAAsBJ,CAAtB,EAAyBC,IAAzB,EAA+B;MAC/C,OAAOD,CAAC,CAACE,MAAF,CAASZ,YAAY,CAACU,CAAC,CAACG,OAAF,EAAD,EAAcF,IAAd,CAArB,CAAP;IACD;EARoB,CAAX,CAAZ;AAUD,CA5C+C,CAAzC;AA6CP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASH,eAAT,CAAyBE,CAAzB,EAA4BK,QAA5B,EAAsC;EACpC;EACA,IAAIC,IAAI,GAAGf,gBAAgB,CAACc,QAAD,CAA3B;EACA,OAAOhB,MAAM,CAACW,CAAD,EAAI,UAAUO,KAAV,EAAiBC,KAAjB,EAAwBC,KAAxB,EAA+B;IAC9C;IACA,IAAIH,IAAI,KAAK,CAAb,EAAgB;MACd,OAAOD,QAAQ,CAACE,KAAD,CAAf;IACD,CAFD,MAEO,IAAID,IAAI,KAAK,CAAb,EAAgB;MACrB,OAAOD,QAAQ,CAACE,KAAD,EAAQ,CAACC,KAAD,CAAR,CAAf;IACD,CAFM,MAEA;MACL;MACA,OAAOH,QAAQ,CAACE,KAAD,EAAQ,CAACC,KAAD,CAAR,EAAiBC,KAAjB,CAAf;IACD;EACF,CAVY,CAAb;AAWD"},"metadata":{},"sourceType":"module"}