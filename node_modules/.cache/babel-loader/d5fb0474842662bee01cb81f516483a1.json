{"ast":null,"code":"/**\n * Permutes a sparse matrix C = P * A * Q\n *\n * @param {SparseMatrix}  a         The Matrix A\n * @param {Array}   pinv            The row permutation vector\n * @param {Array}   q               The column permutation vector\n * @param {boolean} values          Create a pattern matrix (false), values and pattern otherwise\n *\n * @return {Matrix}                 C = P * A * Q, null on error\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nexport function csPermute(a, pinv, q, values) {\n  // a arrays\n  var avalues = a._values;\n  var aindex = a._index;\n  var aptr = a._ptr;\n  var asize = a._size;\n  var adt = a._datatype; // rows & columns\n\n  var m = asize[0];\n  var n = asize[1]; // c arrays\n\n  var cvalues = values && a._values ? [] : null;\n  var cindex = []; // (aptr[n])\n\n  var cptr = []; // (n + 1)\n  // initialize vars\n\n  var nz = 0; // loop columns\n\n  for (var k = 0; k < n; k++) {\n    // column k of C is column q[k] of A\n    cptr[k] = nz; // apply column permutation\n\n    var j = q ? q[k] : k; // loop values in column j of A\n\n    for (var t0 = aptr[j], t1 = aptr[j + 1], t = t0; t < t1; t++) {\n      // row i of A is row pinv[i] of C\n      var r = pinv ? pinv[aindex[t]] : aindex[t]; // index\n\n      cindex[nz] = r; // check we need to populate values\n\n      if (cvalues) {\n        cvalues[nz] = avalues[t];\n      } // increment number of nonzero elements\n\n\n      nz++;\n    }\n  } // finalize the last column of C\n\n\n  cptr[n] = nz; // return C matrix\n\n  return a.createSparseMatrix({\n    values: cvalues,\n    index: cindex,\n    ptr: cptr,\n    size: [m, n],\n    datatype: adt\n  });\n}","map":{"version":3,"names":["csPermute","a","pinv","q","values","avalues","_values","aindex","_index","aptr","_ptr","asize","_size","adt","_datatype","m","n","cvalues","cindex","cptr","nz","k","j","t0","t1","t","r","createSparseMatrix","index","ptr","size","datatype"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/function/algebra/sparse/csPermute.js"],"sourcesContent":["/**\n * Permutes a sparse matrix C = P * A * Q\n *\n * @param {SparseMatrix}  a         The Matrix A\n * @param {Array}   pinv            The row permutation vector\n * @param {Array}   q               The column permutation vector\n * @param {boolean} values          Create a pattern matrix (false), values and pattern otherwise\n *\n * @return {Matrix}                 C = P * A * Q, null on error\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nexport function csPermute(a, pinv, q, values) {\n  // a arrays\n  var avalues = a._values;\n  var aindex = a._index;\n  var aptr = a._ptr;\n  var asize = a._size;\n  var adt = a._datatype; // rows & columns\n\n  var m = asize[0];\n  var n = asize[1]; // c arrays\n\n  var cvalues = values && a._values ? [] : null;\n  var cindex = []; // (aptr[n])\n\n  var cptr = []; // (n + 1)\n  // initialize vars\n\n  var nz = 0; // loop columns\n\n  for (var k = 0; k < n; k++) {\n    // column k of C is column q[k] of A\n    cptr[k] = nz; // apply column permutation\n\n    var j = q ? q[k] : k; // loop values in column j of A\n\n    for (var t0 = aptr[j], t1 = aptr[j + 1], t = t0; t < t1; t++) {\n      // row i of A is row pinv[i] of C\n      var r = pinv ? pinv[aindex[t]] : aindex[t]; // index\n\n      cindex[nz] = r; // check we need to populate values\n\n      if (cvalues) {\n        cvalues[nz] = avalues[t];\n      } // increment number of nonzero elements\n\n\n      nz++;\n    }\n  } // finalize the last column of C\n\n\n  cptr[n] = nz; // return C matrix\n\n  return a.createSparseMatrix({\n    values: cvalues,\n    index: cindex,\n    ptr: cptr,\n    size: [m, n],\n    datatype: adt\n  });\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,SAAT,CAAmBC,CAAnB,EAAsBC,IAAtB,EAA4BC,CAA5B,EAA+BC,MAA/B,EAAuC;EAC5C;EACA,IAAIC,OAAO,GAAGJ,CAAC,CAACK,OAAhB;EACA,IAAIC,MAAM,GAAGN,CAAC,CAACO,MAAf;EACA,IAAIC,IAAI,GAAGR,CAAC,CAACS,IAAb;EACA,IAAIC,KAAK,GAAGV,CAAC,CAACW,KAAd;EACA,IAAIC,GAAG,GAAGZ,CAAC,CAACa,SAAZ,CAN4C,CAMrB;;EAEvB,IAAIC,CAAC,GAAGJ,KAAK,CAAC,CAAD,CAAb;EACA,IAAIK,CAAC,GAAGL,KAAK,CAAC,CAAD,CAAb,CAT4C,CAS1B;;EAElB,IAAIM,OAAO,GAAGb,MAAM,IAAIH,CAAC,CAACK,OAAZ,GAAsB,EAAtB,GAA2B,IAAzC;EACA,IAAIY,MAAM,GAAG,EAAb,CAZ4C,CAY3B;;EAEjB,IAAIC,IAAI,GAAG,EAAX,CAd4C,CAc7B;EACf;;EAEA,IAAIC,EAAE,GAAG,CAAT,CAjB4C,CAiBhC;;EAEZ,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,CAApB,EAAuBK,CAAC,EAAxB,EAA4B;IAC1B;IACAF,IAAI,CAACE,CAAD,CAAJ,GAAUD,EAAV,CAF0B,CAEZ;;IAEd,IAAIE,CAAC,GAAGnB,CAAC,GAAGA,CAAC,CAACkB,CAAD,CAAJ,GAAUA,CAAnB,CAJ0B,CAIJ;;IAEtB,KAAK,IAAIE,EAAE,GAAGd,IAAI,CAACa,CAAD,CAAb,EAAkBE,EAAE,GAAGf,IAAI,CAACa,CAAC,GAAG,CAAL,CAA3B,EAAoCG,CAAC,GAAGF,EAA7C,EAAiDE,CAAC,GAAGD,EAArD,EAAyDC,CAAC,EAA1D,EAA8D;MAC5D;MACA,IAAIC,CAAC,GAAGxB,IAAI,GAAGA,IAAI,CAACK,MAAM,CAACkB,CAAD,CAAP,CAAP,GAAqBlB,MAAM,CAACkB,CAAD,CAAvC,CAF4D,CAEhB;;MAE5CP,MAAM,CAACE,EAAD,CAAN,GAAaM,CAAb,CAJ4D,CAI5C;;MAEhB,IAAIT,OAAJ,EAAa;QACXA,OAAO,CAACG,EAAD,CAAP,GAAcf,OAAO,CAACoB,CAAD,CAArB;MACD,CAR2D,CAQ1D;;;MAGFL,EAAE;IACH;EACF,CAtC2C,CAsC1C;;;EAGFD,IAAI,CAACH,CAAD,CAAJ,GAAUI,EAAV,CAzC4C,CAyC9B;;EAEd,OAAOnB,CAAC,CAAC0B,kBAAF,CAAqB;IAC1BvB,MAAM,EAAEa,OADkB;IAE1BW,KAAK,EAAEV,MAFmB;IAG1BW,GAAG,EAAEV,IAHqB;IAI1BW,IAAI,EAAE,CAACf,CAAD,EAAIC,CAAJ,CAJoB;IAK1Be,QAAQ,EAAElB;EALgB,CAArB,CAAP;AAOD"},"metadata":{},"sourceType":"module"}