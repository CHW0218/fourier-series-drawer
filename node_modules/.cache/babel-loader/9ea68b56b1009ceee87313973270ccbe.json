{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { isInteger } from '../../utils/number.js';\nimport { product } from '../../utils/product.js';\nvar name = 'combinationsWithRep';\nvar dependencies = ['typed'];\nexport var createCombinationsWithRep = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  /**\n   * Compute the number of ways of picking `k` unordered outcomes from `n`\n   * possibilities, allowing individual outcomes to be repeated more than once.\n   *\n   * CombinationsWithRep only takes integer arguments.\n   * The following condition must be enforced: k <= n + k -1.\n   *\n   * Syntax:\n   *\n   *     math.combinationsWithRep(n, k)\n   *\n   * Examples:\n   *\n   *    math.combinationsWithRep(7, 5) // returns 462\n   *\n   * See also:\n   *\n   *    combinations, permutations, factorial\n   *\n   * @param {number | BigNumber} n    Total number of objects in the set\n   * @param {number | BigNumber} k    Number of objects in the subset\n   * @return {number | BigNumber}     Number of possible combinations with replacement.\n   */\n\n  return typed(name, {\n    'number, number': function numberNumber(n, k) {\n      if (!isInteger(n) || n < 0) {\n        throw new TypeError('Positive integer value expected in function combinationsWithRep');\n      }\n\n      if (!isInteger(k) || k < 0) {\n        throw new TypeError('Positive integer value expected in function combinationsWithRep');\n      }\n\n      if (n < 1) {\n        throw new TypeError('k must be less than or equal to n + k - 1');\n      }\n\n      if (k < n - 1) {\n        var _prodrange = product(n, n + k - 1);\n\n        return _prodrange / product(1, k);\n      }\n\n      var prodrange = product(k + 1, n + k - 1);\n      return prodrange / product(1, n - 1);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {\n      var BigNumber = n.constructor;\n      var result, i;\n      var one = new BigNumber(1);\n      var nMinusOne = n.minus(one);\n\n      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {\n        throw new TypeError('Positive integer value expected in function combinationsWithRep');\n      }\n\n      if (n.lt(one)) {\n        throw new TypeError('k must be less than or equal to n + k - 1 in function combinationsWithRep');\n      }\n\n      result = one;\n\n      if (k.lt(nMinusOne)) {\n        for (i = one; i.lte(nMinusOne); i = i.plus(one)) {\n          result = result.times(k.plus(i)).dividedBy(i);\n        }\n      } else {\n        for (i = one; i.lte(k); i = i.plus(one)) {\n          result = result.times(nMinusOne.plus(i)).dividedBy(i);\n        }\n      }\n\n      return result;\n    }\n  });\n});\n/**\n * Test whether BigNumber n is a positive integer\n * @param {BigNumber} n\n * @returns {boolean} isPositiveInteger\n */\n\nfunction isPositiveInteger(n) {\n  return n.isInteger() && n.gte(0);\n}","map":{"version":3,"names":["factory","isInteger","product","name","dependencies","createCombinationsWithRep","_ref","typed","numberNumber","n","k","TypeError","_prodrange","prodrange","BigNumberBigNumber","BigNumber","constructor","result","i","one","nMinusOne","minus","isPositiveInteger","lt","lte","plus","times","dividedBy","gte"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/function/probability/combinationsWithRep.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { isInteger } from '../../utils/number.js';\nimport { product } from '../../utils/product.js';\nvar name = 'combinationsWithRep';\nvar dependencies = ['typed'];\nexport var createCombinationsWithRep = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n\n  /**\n   * Compute the number of ways of picking `k` unordered outcomes from `n`\n   * possibilities, allowing individual outcomes to be repeated more than once.\n   *\n   * CombinationsWithRep only takes integer arguments.\n   * The following condition must be enforced: k <= n + k -1.\n   *\n   * Syntax:\n   *\n   *     math.combinationsWithRep(n, k)\n   *\n   * Examples:\n   *\n   *    math.combinationsWithRep(7, 5) // returns 462\n   *\n   * See also:\n   *\n   *    combinations, permutations, factorial\n   *\n   * @param {number | BigNumber} n    Total number of objects in the set\n   * @param {number | BigNumber} k    Number of objects in the subset\n   * @return {number | BigNumber}     Number of possible combinations with replacement.\n   */\n  return typed(name, {\n    'number, number': function numberNumber(n, k) {\n      if (!isInteger(n) || n < 0) {\n        throw new TypeError('Positive integer value expected in function combinationsWithRep');\n      }\n\n      if (!isInteger(k) || k < 0) {\n        throw new TypeError('Positive integer value expected in function combinationsWithRep');\n      }\n\n      if (n < 1) {\n        throw new TypeError('k must be less than or equal to n + k - 1');\n      }\n\n      if (k < n - 1) {\n        var _prodrange = product(n, n + k - 1);\n\n        return _prodrange / product(1, k);\n      }\n\n      var prodrange = product(k + 1, n + k - 1);\n      return prodrange / product(1, n - 1);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {\n      var BigNumber = n.constructor;\n      var result, i;\n      var one = new BigNumber(1);\n      var nMinusOne = n.minus(one);\n\n      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {\n        throw new TypeError('Positive integer value expected in function combinationsWithRep');\n      }\n\n      if (n.lt(one)) {\n        throw new TypeError('k must be less than or equal to n + k - 1 in function combinationsWithRep');\n      }\n\n      result = one;\n\n      if (k.lt(nMinusOne)) {\n        for (i = one; i.lte(nMinusOne); i = i.plus(one)) {\n          result = result.times(k.plus(i)).dividedBy(i);\n        }\n      } else {\n        for (i = one; i.lte(k); i = i.plus(one)) {\n          result = result.times(nMinusOne.plus(i)).dividedBy(i);\n        }\n      }\n\n      return result;\n    }\n  });\n});\n/**\n * Test whether BigNumber n is a positive integer\n * @param {BigNumber} n\n * @returns {boolean} isPositiveInteger\n */\n\nfunction isPositiveInteger(n) {\n  return n.isInteger() && n.gte(0);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}