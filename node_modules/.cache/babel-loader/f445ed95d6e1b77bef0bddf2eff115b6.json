{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createAlgorithm02 } from '../../type/matrix/utils/algorithm02.js';\nimport { createAlgorithm03 } from '../../type/matrix/utils/algorithm03.js';\nimport { createAlgorithm07 } from '../../type/matrix/utils/algorithm07.js';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11.js';\nimport { createAlgorithm12 } from '../../type/matrix/utils/algorithm12.js';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nvar name = 'dotDivide';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'divideScalar', 'DenseMatrix'];\nexport var createDotDivide = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      equalScalar = _ref.equalScalar,\n      divideScalar = _ref.divideScalar,\n      DenseMatrix = _ref.DenseMatrix;\n  var algorithm02 = createAlgorithm02({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm03 = createAlgorithm03({\n    typed: typed\n  });\n  var algorithm07 = createAlgorithm07({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var algorithm11 = createAlgorithm11({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm12 = createAlgorithm12({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var algorithm13 = createAlgorithm13({\n    typed: typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed: typed\n  });\n  /**\n   * Divide two matrices element wise. The function accepts both matrices and\n   * scalar values.\n   *\n   * Syntax:\n   *\n   *    math.dotDivide(x, y)\n   *\n   * Examples:\n   *\n   *    math.dotDivide(2, 4)   // returns 0.5\n   *\n   *    a = [[9, 5], [6, 1]]\n   *    b = [[3, 2], [5, 2]]\n   *\n   *    math.dotDivide(a, b)   // returns [[3, 2.5], [1.2, 0.5]]\n   *    math.divide(a, b)      // returns [[1.75, 0.75], [-1.75, 2.25]]\n   *\n   * See also:\n   *\n   *    divide, multiply, dotMultiply\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Numerator\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Quotient, `x ./ y`\n   */\n\n  return typed(name, {\n    'any, any': divideScalar,\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm07(x, y, divideScalar, false);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm02(y, x, divideScalar, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, divideScalar, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, divideScalar);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return this(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm11(x, y, divideScalar, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, divideScalar, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, divideScalar, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, divideScalar, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, divideScalar, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, divideScalar, true).valueOf();\n    }\n  });\n});","map":{"version":3,"names":["factory","createAlgorithm02","createAlgorithm03","createAlgorithm07","createAlgorithm11","createAlgorithm12","createAlgorithm13","createAlgorithm14","name","dependencies","createDotDivide","_ref","typed","matrix","equalScalar","divideScalar","DenseMatrix","algorithm02","algorithm03","algorithm07","algorithm11","algorithm12","algorithm13","algorithm14","SparseMatrixSparseMatrix","x","y","SparseMatrixDenseMatrix","DenseMatrixSparseMatrix","DenseMatrixDenseMatrix","ArrayArray","valueOf","ArrayMatrix","MatrixArray","SparseMatrixAny","DenseMatrixAny","anySparseMatrix","anyDenseMatrix","ArrayAny","anyArray"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/function/arithmetic/dotDivide.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { createAlgorithm02 } from '../../type/matrix/utils/algorithm02.js';\nimport { createAlgorithm03 } from '../../type/matrix/utils/algorithm03.js';\nimport { createAlgorithm07 } from '../../type/matrix/utils/algorithm07.js';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11.js';\nimport { createAlgorithm12 } from '../../type/matrix/utils/algorithm12.js';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nvar name = 'dotDivide';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'divideScalar', 'DenseMatrix'];\nexport var createDotDivide = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    divideScalar,\n    DenseMatrix\n  } = _ref;\n  var algorithm02 = createAlgorithm02({\n    typed,\n    equalScalar\n  });\n  var algorithm03 = createAlgorithm03({\n    typed\n  });\n  var algorithm07 = createAlgorithm07({\n    typed,\n    DenseMatrix\n  });\n  var algorithm11 = createAlgorithm11({\n    typed,\n    equalScalar\n  });\n  var algorithm12 = createAlgorithm12({\n    typed,\n    DenseMatrix\n  });\n  var algorithm13 = createAlgorithm13({\n    typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Divide two matrices element wise. The function accepts both matrices and\n   * scalar values.\n   *\n   * Syntax:\n   *\n   *    math.dotDivide(x, y)\n   *\n   * Examples:\n   *\n   *    math.dotDivide(2, 4)   // returns 0.5\n   *\n   *    a = [[9, 5], [6, 1]]\n   *    b = [[3, 2], [5, 2]]\n   *\n   *    math.dotDivide(a, b)   // returns [[3, 2.5], [1.2, 0.5]]\n   *    math.divide(a, b)      // returns [[1.75, 0.75], [-1.75, 2.25]]\n   *\n   * See also:\n   *\n   *    divide, multiply, dotMultiply\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Numerator\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Quotient, `x ./ y`\n   */\n\n  return typed(name, {\n    'any, any': divideScalar,\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm07(x, y, divideScalar, false);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm02(y, x, divideScalar, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, divideScalar, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, divideScalar);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return this(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm11(x, y, divideScalar, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, divideScalar, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, divideScalar, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, divideScalar, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, divideScalar, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, divideScalar, true).valueOf();\n    }\n  });\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}