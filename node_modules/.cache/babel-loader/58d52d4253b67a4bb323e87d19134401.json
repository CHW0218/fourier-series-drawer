{"ast":null,"code":"import { csTdfs } from './csTdfs.js';\n/**\n * Post order a tree of forest\n *\n * @param {Array}   parent          The tree or forest\n * @param {Number}  n               Number of columns\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\n\nexport function csPost(parent, n) {\n  // check inputs\n  if (!parent) {\n    return null;\n  } // vars\n\n\n  var k = 0;\n  var j; // allocate result\n\n  var post = []; // (n)\n  // workspace, head: first n entries, next: next n entries, stack: last n entries\n\n  var w = []; // (3 * n)\n\n  var head = 0;\n  var next = n;\n  var stack = 2 * n; // initialize workspace\n\n  for (j = 0; j < n; j++) {\n    // empty linked lists\n    w[head + j] = -1;\n  } // traverse nodes in reverse order\n\n\n  for (j = n - 1; j >= 0; j--) {\n    // check j is a root\n    if (parent[j] === -1) {\n      continue;\n    } // add j to list of its parent\n\n\n    w[next + j] = w[head + parent[j]];\n    w[head + parent[j]] = j;\n  } // loop nodes\n\n\n  for (j = 0; j < n; j++) {\n    // skip j if it is not a root\n    if (parent[j] !== -1) {\n      continue;\n    } // depth-first search\n\n\n    k = csTdfs(j, k, w, head, next, post, stack);\n  }\n\n  return post;\n}","map":{"version":3,"names":["csTdfs","csPost","parent","n","k","j","post","w","head","next","stack"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/function/algebra/sparse/csPost.js"],"sourcesContent":["import { csTdfs } from './csTdfs.js';\n/**\n * Post order a tree of forest\n *\n * @param {Array}   parent          The tree or forest\n * @param {Number}  n               Number of columns\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\n\nexport function csPost(parent, n) {\n  // check inputs\n  if (!parent) {\n    return null;\n  } // vars\n\n\n  var k = 0;\n  var j; // allocate result\n\n  var post = []; // (n)\n  // workspace, head: first n entries, next: next n entries, stack: last n entries\n\n  var w = []; // (3 * n)\n\n  var head = 0;\n  var next = n;\n  var stack = 2 * n; // initialize workspace\n\n  for (j = 0; j < n; j++) {\n    // empty linked lists\n    w[head + j] = -1;\n  } // traverse nodes in reverse order\n\n\n  for (j = n - 1; j >= 0; j--) {\n    // check j is a root\n    if (parent[j] === -1) {\n      continue;\n    } // add j to list of its parent\n\n\n    w[next + j] = w[head + parent[j]];\n    w[head + parent[j]] = j;\n  } // loop nodes\n\n\n  for (j = 0; j < n; j++) {\n    // skip j if it is not a root\n    if (parent[j] !== -1) {\n      continue;\n    } // depth-first search\n\n\n    k = csTdfs(j, k, w, head, next, post, stack);\n  }\n\n  return post;\n}"],"mappings":"AAAA,SAASA,MAAT,QAAuB,aAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,MAAT,CAAgBC,MAAhB,EAAwBC,CAAxB,EAA2B;EAChC;EACA,IAAI,CAACD,MAAL,EAAa;IACX,OAAO,IAAP;EACD,CAJ+B,CAI9B;;;EAGF,IAAIE,CAAC,GAAG,CAAR;EACA,IAAIC,CAAJ,CARgC,CAQzB;;EAEP,IAAIC,IAAI,GAAG,EAAX,CAVgC,CAUjB;EACf;;EAEA,IAAIC,CAAC,GAAG,EAAR,CAbgC,CAapB;;EAEZ,IAAIC,IAAI,GAAG,CAAX;EACA,IAAIC,IAAI,GAAGN,CAAX;EACA,IAAIO,KAAK,GAAG,IAAIP,CAAhB,CAjBgC,CAiBb;;EAEnB,KAAKE,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGF,CAAhB,EAAmBE,CAAC,EAApB,EAAwB;IACtB;IACAE,CAAC,CAACC,IAAI,GAAGH,CAAR,CAAD,GAAc,CAAC,CAAf;EACD,CAtB+B,CAsB9B;;;EAGF,KAAKA,CAAC,GAAGF,CAAC,GAAG,CAAb,EAAgBE,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;IAC3B;IACA,IAAIH,MAAM,CAACG,CAAD,CAAN,KAAc,CAAC,CAAnB,EAAsB;MACpB;IACD,CAJ0B,CAIzB;;;IAGFE,CAAC,CAACE,IAAI,GAAGJ,CAAR,CAAD,GAAcE,CAAC,CAACC,IAAI,GAAGN,MAAM,CAACG,CAAD,CAAd,CAAf;IACAE,CAAC,CAACC,IAAI,GAAGN,MAAM,CAACG,CAAD,CAAd,CAAD,GAAsBA,CAAtB;EACD,CAlC+B,CAkC9B;;;EAGF,KAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGF,CAAhB,EAAmBE,CAAC,EAApB,EAAwB;IACtB;IACA,IAAIH,MAAM,CAACG,CAAD,CAAN,KAAc,CAAC,CAAnB,EAAsB;MACpB;IACD,CAJqB,CAIpB;;;IAGFD,CAAC,GAAGJ,MAAM,CAACK,CAAD,EAAID,CAAJ,EAAOG,CAAP,EAAUC,IAAV,EAAgBC,IAAhB,EAAsBH,IAAtB,EAA4BI,KAA5B,CAAV;EACD;;EAED,OAAOJ,IAAP;AACD"},"metadata":{},"sourceType":"module"}