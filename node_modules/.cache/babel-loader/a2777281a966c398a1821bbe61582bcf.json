{"ast":null,"code":"import { arraySize, squeeze } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'cross';\nvar dependencies = ['typed', 'matrix', 'subtract', 'multiply'];\nexport var createCross = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      subtract = _ref.subtract,\n      multiply = _ref.multiply;\n  /**\n   * Calculate the cross product for two vectors in three dimensional space.\n   * The cross product of `A = [a1, a2, a3]` and `B = [b1, b2, b3]` is defined\n   * as:\n   *\n   *    cross(A, B) = [\n   *      a2 * b3 - a3 * b2,\n   *      a3 * b1 - a1 * b3,\n   *      a1 * b2 - a2 * b1\n   *    ]\n   *\n   * If one of the input vectors has a dimension greater than 1, the output\n   * vector will be a 1x3 (2-dimensional) matrix.\n   *\n   * Syntax:\n   *\n   *    math.cross(x, y)\n   *\n   * Examples:\n   *\n   *    math.cross([1, 1, 0],   [0, 1, 1])       // Returns [1, -1, 1]\n   *    math.cross([3, -3, 1],  [4, 9, 2])       // Returns [-15, -2, 39]\n   *    math.cross([2, 3, 4],   [5, 6, 7])       // Returns [-3, 6, -3]\n   *    math.cross([[1, 2, 3]], [[4], [5], [6]]) // Returns [[-3, 6, -3]]\n   *\n   * See also:\n   *\n   *    dot, multiply\n   *\n   * @param  {Array | Matrix} x   First vector\n   * @param  {Array | Matrix} y   Second vector\n   * @return {Array | Matrix}     Returns the cross product of `x` and `y`\n   */\n\n  return typed(name, {\n    'Matrix, Matrix': function MatrixMatrix(x, y) {\n      return matrix(_cross(x.toArray(), y.toArray()));\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      return matrix(_cross(x.toArray(), y));\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      return matrix(_cross(x, y.toArray()));\n    },\n    'Array, Array': _cross\n  });\n  /**\n   * Calculate the cross product for two arrays\n   * @param {Array} x  First vector\n   * @param {Array} y  Second vector\n   * @returns {Array} Returns the cross product of x and y\n   * @private\n   */\n\n  function _cross(x, y) {\n    var highestDimension = Math.max(arraySize(x).length, arraySize(y).length);\n    x = squeeze(x);\n    y = squeeze(y);\n    var xSize = arraySize(x);\n    var ySize = arraySize(y);\n\n    if (xSize.length !== 1 || ySize.length !== 1 || xSize[0] !== 3 || ySize[0] !== 3) {\n      throw new RangeError('Vectors with length 3 expected ' + '(Size A = [' + xSize.join(', ') + '], B = [' + ySize.join(', ') + '])');\n    }\n\n    var product = [subtract(multiply(x[1], y[2]), multiply(x[2], y[1])), subtract(multiply(x[2], y[0]), multiply(x[0], y[2])), subtract(multiply(x[0], y[1]), multiply(x[1], y[0]))];\n\n    if (highestDimension > 1) {\n      return [product];\n    } else {\n      return product;\n    }\n  }\n});","map":{"version":3,"names":["arraySize","squeeze","factory","name","dependencies","createCross","_ref","typed","matrix","subtract","multiply","MatrixMatrix","x","y","_cross","toArray","MatrixArray","ArrayMatrix","highestDimension","Math","max","length","xSize","ySize","RangeError","join","product"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/function/matrix/cross.js"],"sourcesContent":["import { arraySize, squeeze } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'cross';\nvar dependencies = ['typed', 'matrix', 'subtract', 'multiply'];\nexport var createCross = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    subtract,\n    multiply\n  } = _ref;\n\n  /**\n   * Calculate the cross product for two vectors in three dimensional space.\n   * The cross product of `A = [a1, a2, a3]` and `B = [b1, b2, b3]` is defined\n   * as:\n   *\n   *    cross(A, B) = [\n   *      a2 * b3 - a3 * b2,\n   *      a3 * b1 - a1 * b3,\n   *      a1 * b2 - a2 * b1\n   *    ]\n   *\n   * If one of the input vectors has a dimension greater than 1, the output\n   * vector will be a 1x3 (2-dimensional) matrix.\n   *\n   * Syntax:\n   *\n   *    math.cross(x, y)\n   *\n   * Examples:\n   *\n   *    math.cross([1, 1, 0],   [0, 1, 1])       // Returns [1, -1, 1]\n   *    math.cross([3, -3, 1],  [4, 9, 2])       // Returns [-15, -2, 39]\n   *    math.cross([2, 3, 4],   [5, 6, 7])       // Returns [-3, 6, -3]\n   *    math.cross([[1, 2, 3]], [[4], [5], [6]]) // Returns [[-3, 6, -3]]\n   *\n   * See also:\n   *\n   *    dot, multiply\n   *\n   * @param  {Array | Matrix} x   First vector\n   * @param  {Array | Matrix} y   Second vector\n   * @return {Array | Matrix}     Returns the cross product of `x` and `y`\n   */\n  return typed(name, {\n    'Matrix, Matrix': function MatrixMatrix(x, y) {\n      return matrix(_cross(x.toArray(), y.toArray()));\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      return matrix(_cross(x.toArray(), y));\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      return matrix(_cross(x, y.toArray()));\n    },\n    'Array, Array': _cross\n  });\n  /**\n   * Calculate the cross product for two arrays\n   * @param {Array} x  First vector\n   * @param {Array} y  Second vector\n   * @returns {Array} Returns the cross product of x and y\n   * @private\n   */\n\n  function _cross(x, y) {\n    var highestDimension = Math.max(arraySize(x).length, arraySize(y).length);\n    x = squeeze(x);\n    y = squeeze(y);\n    var xSize = arraySize(x);\n    var ySize = arraySize(y);\n\n    if (xSize.length !== 1 || ySize.length !== 1 || xSize[0] !== 3 || ySize[0] !== 3) {\n      throw new RangeError('Vectors with length 3 expected ' + '(Size A = [' + xSize.join(', ') + '], B = [' + ySize.join(', ') + '])');\n    }\n\n    var product = [subtract(multiply(x[1], y[2]), multiply(x[2], y[1])), subtract(multiply(x[2], y[0]), multiply(x[0], y[2])), subtract(multiply(x[0], y[1]), multiply(x[1], y[0]))];\n\n    if (highestDimension > 1) {\n      return [product];\n    } else {\n      return product;\n    }\n  }\n});"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,OAApB,QAAmC,sBAAnC;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,OAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,UAApB,EAAgC,UAAhC,CAAnB;AACA,OAAO,IAAIC,WAAW,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EAC1E,IACEC,KADF,GAKID,IALJ,CACEC,KADF;EAAA,IAEEC,MAFF,GAKIF,IALJ,CAEEE,MAFF;EAAA,IAGEC,QAHF,GAKIH,IALJ,CAGEG,QAHF;EAAA,IAIEC,QAJF,GAKIJ,IALJ,CAIEI,QAJF;EAOA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOH,KAAK,CAACJ,IAAD,EAAO;IACjB,kBAAkB,SAASQ,YAAT,CAAsBC,CAAtB,EAAyBC,CAAzB,EAA4B;MAC5C,OAAOL,MAAM,CAACM,MAAM,CAACF,CAAC,CAACG,OAAF,EAAD,EAAcF,CAAC,CAACE,OAAF,EAAd,CAAP,CAAb;IACD,CAHgB;IAIjB,iBAAiB,SAASC,WAAT,CAAqBJ,CAArB,EAAwBC,CAAxB,EAA2B;MAC1C,OAAOL,MAAM,CAACM,MAAM,CAACF,CAAC,CAACG,OAAF,EAAD,EAAcF,CAAd,CAAP,CAAb;IACD,CANgB;IAOjB,iBAAiB,SAASI,WAAT,CAAqBL,CAArB,EAAwBC,CAAxB,EAA2B;MAC1C,OAAOL,MAAM,CAACM,MAAM,CAACF,CAAD,EAAIC,CAAC,CAACE,OAAF,EAAJ,CAAP,CAAb;IACD,CATgB;IAUjB,gBAAgBD;EAVC,CAAP,CAAZ;EAYA;AACF;AACA;AACA;AACA;AACA;AACA;;EAEE,SAASA,MAAT,CAAgBF,CAAhB,EAAmBC,CAAnB,EAAsB;IACpB,IAAIK,gBAAgB,GAAGC,IAAI,CAACC,GAAL,CAASpB,SAAS,CAACY,CAAD,CAAT,CAAaS,MAAtB,EAA8BrB,SAAS,CAACa,CAAD,CAAT,CAAaQ,MAA3C,CAAvB;IACAT,CAAC,GAAGX,OAAO,CAACW,CAAD,CAAX;IACAC,CAAC,GAAGZ,OAAO,CAACY,CAAD,CAAX;IACA,IAAIS,KAAK,GAAGtB,SAAS,CAACY,CAAD,CAArB;IACA,IAAIW,KAAK,GAAGvB,SAAS,CAACa,CAAD,CAArB;;IAEA,IAAIS,KAAK,CAACD,MAAN,KAAiB,CAAjB,IAAsBE,KAAK,CAACF,MAAN,KAAiB,CAAvC,IAA4CC,KAAK,CAAC,CAAD,CAAL,KAAa,CAAzD,IAA8DC,KAAK,CAAC,CAAD,CAAL,KAAa,CAA/E,EAAkF;MAChF,MAAM,IAAIC,UAAJ,CAAe,oCAAoC,aAApC,GAAoDF,KAAK,CAACG,IAAN,CAAW,IAAX,CAApD,GAAuE,UAAvE,GAAoFF,KAAK,CAACE,IAAN,CAAW,IAAX,CAApF,GAAuG,IAAtH,CAAN;IACD;;IAED,IAAIC,OAAO,GAAG,CAACjB,QAAQ,CAACC,QAAQ,CAACE,CAAC,CAAC,CAAD,CAAF,EAAOC,CAAC,CAAC,CAAD,CAAR,CAAT,EAAuBH,QAAQ,CAACE,CAAC,CAAC,CAAD,CAAF,EAAOC,CAAC,CAAC,CAAD,CAAR,CAA/B,CAAT,EAAuDJ,QAAQ,CAACC,QAAQ,CAACE,CAAC,CAAC,CAAD,CAAF,EAAOC,CAAC,CAAC,CAAD,CAAR,CAAT,EAAuBH,QAAQ,CAACE,CAAC,CAAC,CAAD,CAAF,EAAOC,CAAC,CAAC,CAAD,CAAR,CAA/B,CAA/D,EAA6GJ,QAAQ,CAACC,QAAQ,CAACE,CAAC,CAAC,CAAD,CAAF,EAAOC,CAAC,CAAC,CAAD,CAAR,CAAT,EAAuBH,QAAQ,CAACE,CAAC,CAAC,CAAD,CAAF,EAAOC,CAAC,CAAC,CAAD,CAAR,CAA/B,CAArH,CAAd;;IAEA,IAAIK,gBAAgB,GAAG,CAAvB,EAA0B;MACxB,OAAO,CAACQ,OAAD,CAAP;IACD,CAFD,MAEO;MACL,OAAOA,OAAP;IACD;EACF;AACF,CAhF8C,CAAxC"},"metadata":{},"sourceType":"module"}