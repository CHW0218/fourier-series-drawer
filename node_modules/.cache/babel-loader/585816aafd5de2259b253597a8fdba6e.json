{"ast":null,"code":"import { createMap, isMap } from '../../utils/map.js';\nimport { isFunctionNode, isNode, isOperatorNode, isParenthesisNode, isSymbolNode } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'resolve';\nvar dependencies = ['parse', 'ConstantNode', 'FunctionNode', 'OperatorNode', 'ParenthesisNode'];\nexport var createResolve = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var parse = _ref.parse,\n      ConstantNode = _ref.ConstantNode,\n      FunctionNode = _ref.FunctionNode,\n      OperatorNode = _ref.OperatorNode,\n      ParenthesisNode = _ref.ParenthesisNode;\n  /**\n   * resolve(expr, scope) replaces variable nodes with their scoped values\n   *\n   * Syntax:\n   *\n   *     resolve(expr, scope)\n   *\n   * Examples:\n   *\n   *     math.resolve('x + y', {x:1, y:2})           // Node {1 + 2}\n   *     math.resolve(math.parse('x+y'), {x:1, y:2}) // Node {1 + 2}\n   *     math.simplify('x+y', {x:2, y:'x+x'}).toString()      // \"6\"\n   *\n   * See also:\n   *\n   *     simplify, evaluate\n   *\n   * @param {Node | Node[]} node\n   *     The expression tree (or trees) to be simplified\n   * @param {Object} scope\n   *     Scope specifying variables to be resolved\n   * @return {Node | Node[]} Returns `node` with variables recursively substituted.\n   * @throws {ReferenceError}\n   *     If there is a cyclic dependency among the variables in `scope`,\n   *     resolution is impossible and a ReferenceError is thrown.\n   */\n\n  function resolve(node, scope) {\n    var within = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Set(); // note `within`:\n    // `within` is not documented, since it is for internal cycle\n    // detection only\n\n    if (!scope) {\n      return node;\n    }\n\n    if (!isMap(scope)) {\n      scope = createMap(scope);\n    }\n\n    if (isSymbolNode(node)) {\n      if (within.has(node.name)) {\n        var variables = Array.from(within).join(', ');\n        throw new ReferenceError(\"recursive loop of variable definitions among {\".concat(variables, \"}\"));\n      }\n\n      var value = scope.get(node.name);\n\n      if (isNode(value)) {\n        var nextWithin = new Set(within);\n        nextWithin.add(node.name);\n        return resolve(value, scope, nextWithin);\n      } else if (typeof value === 'number') {\n        return parse(String(value));\n      } else if (value !== undefined) {\n        return new ConstantNode(value);\n      } else {\n        return node;\n      }\n    } else if (isOperatorNode(node)) {\n      var args = node.args.map(function (arg) {\n        return resolve(arg, scope, within);\n      });\n      return new OperatorNode(node.op, node.fn, args, node.implicit);\n    } else if (isParenthesisNode(node)) {\n      return new ParenthesisNode(resolve(node.content, scope, within));\n    } else if (isFunctionNode(node)) {\n      var _args = node.args.map(function (arg) {\n        return resolve(arg, scope, within);\n      });\n\n      return new FunctionNode(node.name, _args);\n    } // Otherwise just recursively resolve any children (might also work\n    // for some of the above special cases)\n\n\n    return node.map(function (child) {\n      return resolve(child, scope, within);\n    });\n  }\n\n  return resolve;\n});","map":{"version":3,"names":["createMap","isMap","isFunctionNode","isNode","isOperatorNode","isParenthesisNode","isSymbolNode","factory","name","dependencies","createResolve","_ref","parse","ConstantNode","FunctionNode","OperatorNode","ParenthesisNode","resolve","node","scope","within","arguments","length","undefined","Set","has","variables","Array","from","join","ReferenceError","concat","value","get","nextWithin","add","String","args","map","arg","op","fn","implicit","content","_args","child"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/function/algebra/resolve.js"],"sourcesContent":["import { createMap, isMap } from '../../utils/map.js';\nimport { isFunctionNode, isNode, isOperatorNode, isParenthesisNode, isSymbolNode } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'resolve';\nvar dependencies = ['parse', 'ConstantNode', 'FunctionNode', 'OperatorNode', 'ParenthesisNode'];\nexport var createResolve = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    parse,\n    ConstantNode,\n    FunctionNode,\n    OperatorNode,\n    ParenthesisNode\n  } = _ref;\n\n  /**\n   * resolve(expr, scope) replaces variable nodes with their scoped values\n   *\n   * Syntax:\n   *\n   *     resolve(expr, scope)\n   *\n   * Examples:\n   *\n   *     math.resolve('x + y', {x:1, y:2})           // Node {1 + 2}\n   *     math.resolve(math.parse('x+y'), {x:1, y:2}) // Node {1 + 2}\n   *     math.simplify('x+y', {x:2, y:'x+x'}).toString()      // \"6\"\n   *\n   * See also:\n   *\n   *     simplify, evaluate\n   *\n   * @param {Node | Node[]} node\n   *     The expression tree (or trees) to be simplified\n   * @param {Object} scope\n   *     Scope specifying variables to be resolved\n   * @return {Node | Node[]} Returns `node` with variables recursively substituted.\n   * @throws {ReferenceError}\n   *     If there is a cyclic dependency among the variables in `scope`,\n   *     resolution is impossible and a ReferenceError is thrown.\n   */\n  function resolve(node, scope) {\n    var within = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Set();\n\n    // note `within`:\n    // `within` is not documented, since it is for internal cycle\n    // detection only\n    if (!scope) {\n      return node;\n    }\n\n    if (!isMap(scope)) {\n      scope = createMap(scope);\n    }\n\n    if (isSymbolNode(node)) {\n      if (within.has(node.name)) {\n        var variables = Array.from(within).join(', ');\n        throw new ReferenceError(\"recursive loop of variable definitions among {\".concat(variables, \"}\"));\n      }\n\n      var value = scope.get(node.name);\n\n      if (isNode(value)) {\n        var nextWithin = new Set(within);\n        nextWithin.add(node.name);\n        return resolve(value, scope, nextWithin);\n      } else if (typeof value === 'number') {\n        return parse(String(value));\n      } else if (value !== undefined) {\n        return new ConstantNode(value);\n      } else {\n        return node;\n      }\n    } else if (isOperatorNode(node)) {\n      var args = node.args.map(function (arg) {\n        return resolve(arg, scope, within);\n      });\n      return new OperatorNode(node.op, node.fn, args, node.implicit);\n    } else if (isParenthesisNode(node)) {\n      return new ParenthesisNode(resolve(node.content, scope, within));\n    } else if (isFunctionNode(node)) {\n      var _args = node.args.map(function (arg) {\n        return resolve(arg, scope, within);\n      });\n\n      return new FunctionNode(node.name, _args);\n    } // Otherwise just recursively resolve any children (might also work\n    // for some of the above special cases)\n\n\n    return node.map(child => resolve(child, scope, within));\n  }\n\n  return resolve;\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}