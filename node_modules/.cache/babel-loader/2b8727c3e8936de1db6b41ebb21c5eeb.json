{"ast":null,"code":"import { typeOf } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { noBignumber, noFraction } from '../../utils/noop.js';\nvar name = 'numeric';\nvar dependencies = ['number', '?bignumber', '?fraction'];\nexport var createNumeric = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var _number = _ref.number,\n      bignumber = _ref.bignumber,\n      fraction = _ref.fraction;\n  var validInputTypes = {\n    string: true,\n    number: true,\n    BigNumber: true,\n    Fraction: true\n  }; // Load the conversion functions for each output type\n\n  var validOutputTypes = {\n    number: function number(x) {\n      return _number(x);\n    },\n    BigNumber: bignumber ? function (x) {\n      return bignumber(x);\n    } : noBignumber,\n    Fraction: fraction ? function (x) {\n      return fraction(x);\n    } : noFraction\n  };\n  /**\n   * Convert a numeric input to a specific numeric type: number, BigNumber, or Fraction.\n   *\n   * Syntax:\n   *\n   *    math.numeric(x)\n   *\n   * Examples:\n   *\n   *    math.numeric('4')                           // returns number 4\n   *    math.numeric('4', 'number')                 // returns number 4\n   *    math.numeric('4', 'BigNumber')              // returns BigNumber 4\n   *    math.numeric('4', 'Fraction')               // returns Fraction 4\n   *    math.numeric(4, 'Fraction')                 // returns Fraction 4\n   *    math.numeric(math.fraction(2, 5), 'number') // returns number 0.4\n   *\n   * See also:\n   *\n   *    number, fraction, bignumber, string, format\n   *\n   * @param {string | number | BigNumber | Fraction } value\n   *              A numeric value or a string containing a numeric value\n   * @param {string} outputType\n   *              Desired numeric output type.\n   *              Available values: 'number', 'BigNumber', or 'Fraction'\n   * @return {number | BigNumber | Fraction}\n   *              Returns an instance of the numeric in the requested type\n   */\n\n  return function numeric(value, outputType) {\n    var inputType = typeOf(value);\n\n    if (!(inputType in validInputTypes)) {\n      throw new TypeError('Cannot convert ' + value + ' of type \"' + inputType + '\"; valid input types are ' + Object.keys(validInputTypes).join(', '));\n    }\n\n    if (!(outputType in validOutputTypes)) {\n      throw new TypeError('Cannot convert ' + value + ' to type \"' + outputType + '\"; valid output types are ' + Object.keys(validOutputTypes).join(', '));\n    }\n\n    if (outputType === inputType) {\n      return value;\n    } else {\n      return validOutputTypes[outputType](value);\n    }\n  };\n});","map":{"version":3,"names":["typeOf","factory","noBignumber","noFraction","name","dependencies","createNumeric","_ref","_number","number","bignumber","fraction","validInputTypes","string","BigNumber","Fraction","validOutputTypes","x","numeric","value","outputType","inputType","TypeError","Object","keys","join"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/function/utils/numeric.js"],"sourcesContent":["import { typeOf } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { noBignumber, noFraction } from '../../utils/noop.js';\nvar name = 'numeric';\nvar dependencies = ['number', '?bignumber', '?fraction'];\nexport var createNumeric = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    number: _number,\n    bignumber,\n    fraction\n  } = _ref;\n  var validInputTypes = {\n    string: true,\n    number: true,\n    BigNumber: true,\n    Fraction: true\n  }; // Load the conversion functions for each output type\n\n  var validOutputTypes = {\n    number: x => _number(x),\n    BigNumber: bignumber ? x => bignumber(x) : noBignumber,\n    Fraction: fraction ? x => fraction(x) : noFraction\n  };\n  /**\n   * Convert a numeric input to a specific numeric type: number, BigNumber, or Fraction.\n   *\n   * Syntax:\n   *\n   *    math.numeric(x)\n   *\n   * Examples:\n   *\n   *    math.numeric('4')                           // returns number 4\n   *    math.numeric('4', 'number')                 // returns number 4\n   *    math.numeric('4', 'BigNumber')              // returns BigNumber 4\n   *    math.numeric('4', 'Fraction')               // returns Fraction 4\n   *    math.numeric(4, 'Fraction')                 // returns Fraction 4\n   *    math.numeric(math.fraction(2, 5), 'number') // returns number 0.4\n   *\n   * See also:\n   *\n   *    number, fraction, bignumber, string, format\n   *\n   * @param {string | number | BigNumber | Fraction } value\n   *              A numeric value or a string containing a numeric value\n   * @param {string} outputType\n   *              Desired numeric output type.\n   *              Available values: 'number', 'BigNumber', or 'Fraction'\n   * @return {number | BigNumber | Fraction}\n   *              Returns an instance of the numeric in the requested type\n   */\n\n  return function numeric(value, outputType) {\n    var inputType = typeOf(value);\n\n    if (!(inputType in validInputTypes)) {\n      throw new TypeError('Cannot convert ' + value + ' of type \"' + inputType + '\"; valid input types are ' + Object.keys(validInputTypes).join(', '));\n    }\n\n    if (!(outputType in validOutputTypes)) {\n      throw new TypeError('Cannot convert ' + value + ' to type \"' + outputType + '\"; valid output types are ' + Object.keys(validOutputTypes).join(', '));\n    }\n\n    if (outputType === inputType) {\n      return value;\n    } else {\n      return validOutputTypes[outputType](value);\n    }\n  };\n});"],"mappings":"AAAA,SAASA,MAAT,QAAuB,mBAAvB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,qBAAxC;AACA,IAAIC,IAAI,GAAG,SAAX;AACA,IAAIC,YAAY,GAAG,CAAC,QAAD,EAAW,YAAX,EAAyB,WAAzB,CAAnB;AACA,OAAO,IAAIC,aAAa,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EAC5E,IACUC,OADV,GAIID,IAJJ,CACEE,MADF;EAAA,IAEEC,SAFF,GAIIH,IAJJ,CAEEG,SAFF;EAAA,IAGEC,QAHF,GAIIJ,IAJJ,CAGEI,QAHF;EAKA,IAAIC,eAAe,GAAG;IACpBC,MAAM,EAAE,IADY;IAEpBJ,MAAM,EAAE,IAFY;IAGpBK,SAAS,EAAE,IAHS;IAIpBC,QAAQ,EAAE;EAJU,CAAtB,CAN4E,CAWzE;;EAEH,IAAIC,gBAAgB,GAAG;IACrBP,MAAM,EAAE,gBAAAQ,CAAC;MAAA,OAAIT,OAAO,CAACS,CAAD,CAAX;IAAA,CADY;IAErBH,SAAS,EAAEJ,SAAS,GAAG,UAAAO,CAAC;MAAA,OAAIP,SAAS,CAACO,CAAD,CAAb;IAAA,CAAJ,GAAuBf,WAFtB;IAGrBa,QAAQ,EAAEJ,QAAQ,GAAG,UAAAM,CAAC;MAAA,OAAIN,QAAQ,CAACM,CAAD,CAAZ;IAAA,CAAJ,GAAsBd;EAHnB,CAAvB;EAKA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE,OAAO,SAASe,OAAT,CAAiBC,KAAjB,EAAwBC,UAAxB,EAAoC;IACzC,IAAIC,SAAS,GAAGrB,MAAM,CAACmB,KAAD,CAAtB;;IAEA,IAAI,EAAEE,SAAS,IAAIT,eAAf,CAAJ,EAAqC;MACnC,MAAM,IAAIU,SAAJ,CAAc,oBAAoBH,KAApB,GAA4B,YAA5B,GAA2CE,SAA3C,GAAuD,2BAAvD,GAAqFE,MAAM,CAACC,IAAP,CAAYZ,eAAZ,EAA6Ba,IAA7B,CAAkC,IAAlC,CAAnG,CAAN;IACD;;IAED,IAAI,EAAEL,UAAU,IAAIJ,gBAAhB,CAAJ,EAAuC;MACrC,MAAM,IAAIM,SAAJ,CAAc,oBAAoBH,KAApB,GAA4B,YAA5B,GAA2CC,UAA3C,GAAwD,4BAAxD,GAAuFG,MAAM,CAACC,IAAP,CAAYR,gBAAZ,EAA8BS,IAA9B,CAAmC,IAAnC,CAArG,CAAN;IACD;;IAED,IAAIL,UAAU,KAAKC,SAAnB,EAA8B;MAC5B,OAAOF,KAAP;IACD,CAFD,MAEO;MACL,OAAOH,gBAAgB,CAACI,UAAD,CAAhB,CAA6BD,KAA7B,CAAP;IACD;EACF,CAhBD;AAiBD,CAhEgD,CAA1C"},"metadata":{},"sourceType":"module"}