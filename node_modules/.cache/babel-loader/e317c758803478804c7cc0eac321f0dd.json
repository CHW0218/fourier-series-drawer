{"ast":null,"code":"import { containsCollections } from '../../utils/collection.js';\nimport { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'median';\nvar dependencies = ['typed', 'add', 'divide', 'compare', 'partitionSelect'];\nexport var createMedian = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      add = _ref.add,\n      divide = _ref.divide,\n      compare = _ref.compare,\n      partitionSelect = _ref.partitionSelect;\n  /**\n   * Recursively calculate the median of an n-dimensional array\n   * @param {Array} array\n   * @return {Number} median\n   * @private\n   */\n\n  function _median(array) {\n    try {\n      array = flatten(array.valueOf());\n      var num = array.length;\n\n      if (num === 0) {\n        throw new Error('Cannot calculate median of an empty array');\n      }\n\n      if (num % 2 === 0) {\n        // even: return the average of the two middle values\n        var mid = num / 2 - 1;\n        var right = partitionSelect(array, mid + 1); // array now partitioned at mid + 1, take max of left part\n\n        var left = array[mid];\n\n        for (var i = 0; i < mid; ++i) {\n          if (compare(array[i], left) > 0) {\n            left = array[i];\n          }\n        }\n\n        return middle2(left, right);\n      } else {\n        // odd: return the middle value\n        var m = partitionSelect(array, (num - 1) / 2);\n        return middle(m);\n      }\n    } catch (err) {\n      throw improveErrorMessage(err, 'median');\n    }\n  } // helper function to type check the middle value of the array\n\n\n  var middle = typed({\n    'number | BigNumber | Complex | Unit': function numberBigNumberComplexUnit(value) {\n      return value;\n    }\n  }); // helper function to type check the two middle value of the array\n\n  var middle2 = typed({\n    'number | BigNumber | Complex | Unit, number | BigNumber | Complex | Unit': function numberBigNumberComplexUnitNumberBigNumberComplexUnit(left, right) {\n      return divide(add(left, right), 2);\n    }\n  });\n  /**\n   * Compute the median of a matrix or a list with values. The values are\n   * sorted and the middle value is returned. In case of an even number of\n   * values, the average of the two middle values is returned.\n   * Supported types of values are: Number, BigNumber, Unit\n   *\n   * In case of a (multi dimensional) array or matrix, the median of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.median(a, b, c, ...)\n   *     math.median(A)\n   *\n   * Examples:\n   *\n   *     math.median(5, 2, 7)        // returns 5\n   *     math.median([3, -1, 5, 7])  // returns 4\n   *\n   * See also:\n   *\n   *     mean, min, max, sum, prod, std, variance, quantileSeq\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The median\n   */\n\n  return typed(name, {\n    // median([a, b, c, d, ...])\n    'Array | Matrix': _median,\n    // median([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      // TODO: implement median(A, dim)\n      throw new Error('median(A, dim) is not yet supported'); // return reduce(arguments[0], arguments[1], ...)\n    },\n    // median(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function median');\n      }\n\n      return _median(args);\n    }\n  });\n});","map":{"version":3,"names":["containsCollections","flatten","factory","improveErrorMessage","name","dependencies","createMedian","_ref","typed","add","divide","compare","partitionSelect","_median","array","valueOf","num","length","Error","mid","right","left","i","middle2","m","middle","err","numberBigNumberComplexUnit","value","numberBigNumberComplexUnitNumberBigNumberComplexUnit","ArrayMatrixNumberBigNumber","dim","_","args","TypeError"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/function/statistics/median.js"],"sourcesContent":["import { containsCollections } from '../../utils/collection.js';\nimport { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'median';\nvar dependencies = ['typed', 'add', 'divide', 'compare', 'partitionSelect'];\nexport var createMedian = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    add,\n    divide,\n    compare,\n    partitionSelect\n  } = _ref;\n\n  /**\n   * Recursively calculate the median of an n-dimensional array\n   * @param {Array} array\n   * @return {Number} median\n   * @private\n   */\n  function _median(array) {\n    try {\n      array = flatten(array.valueOf());\n      var num = array.length;\n\n      if (num === 0) {\n        throw new Error('Cannot calculate median of an empty array');\n      }\n\n      if (num % 2 === 0) {\n        // even: return the average of the two middle values\n        var mid = num / 2 - 1;\n        var right = partitionSelect(array, mid + 1); // array now partitioned at mid + 1, take max of left part\n\n        var left = array[mid];\n\n        for (var i = 0; i < mid; ++i) {\n          if (compare(array[i], left) > 0) {\n            left = array[i];\n          }\n        }\n\n        return middle2(left, right);\n      } else {\n        // odd: return the middle value\n        var m = partitionSelect(array, (num - 1) / 2);\n        return middle(m);\n      }\n    } catch (err) {\n      throw improveErrorMessage(err, 'median');\n    }\n  } // helper function to type check the middle value of the array\n\n\n  var middle = typed({\n    'number | BigNumber | Complex | Unit': function numberBigNumberComplexUnit(value) {\n      return value;\n    }\n  }); // helper function to type check the two middle value of the array\n\n  var middle2 = typed({\n    'number | BigNumber | Complex | Unit, number | BigNumber | Complex | Unit': function numberBigNumberComplexUnitNumberBigNumberComplexUnit(left, right) {\n      return divide(add(left, right), 2);\n    }\n  });\n  /**\n   * Compute the median of a matrix or a list with values. The values are\n   * sorted and the middle value is returned. In case of an even number of\n   * values, the average of the two middle values is returned.\n   * Supported types of values are: Number, BigNumber, Unit\n   *\n   * In case of a (multi dimensional) array or matrix, the median of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.median(a, b, c, ...)\n   *     math.median(A)\n   *\n   * Examples:\n   *\n   *     math.median(5, 2, 7)        // returns 5\n   *     math.median([3, -1, 5, 7])  // returns 4\n   *\n   * See also:\n   *\n   *     mean, min, max, sum, prod, std, variance, quantileSeq\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The median\n   */\n\n  return typed(name, {\n    // median([a, b, c, d, ...])\n    'Array | Matrix': _median,\n    // median([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      // TODO: implement median(A, dim)\n      throw new Error('median(A, dim) is not yet supported'); // return reduce(arguments[0], arguments[1], ...)\n    },\n    // median(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function median');\n      }\n\n      return _median(args);\n    }\n  });\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}