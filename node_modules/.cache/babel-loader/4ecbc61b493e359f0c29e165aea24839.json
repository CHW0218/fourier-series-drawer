{"ast":null,"code":"import { format } from '../../utils/string.js';\nimport { typeOf } from '../../utils/is.js';\nimport { escapeLatex } from '../../utils/latex.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'ConstantNode';\nvar dependencies = ['Node'];\nexport var createConstantNode = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var Node = _ref.Node;\n  /**\n   * A ConstantNode holds a constant value like a number or string.\n   *\n   * Usage:\n   *\n   *     new ConstantNode(2.3)\n   *     new ConstantNode('hello')\n   *\n   * @param {*} value    Value can be any type (number, BigNumber, string, ...)\n   * @constructor ConstantNode\n   * @extends {Node}\n   */\n\n  function ConstantNode(value) {\n    if (!(this instanceof ConstantNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.value = value;\n  }\n\n  ConstantNode.prototype = new Node();\n  ConstantNode.prototype.type = 'ConstantNode';\n  ConstantNode.prototype.isConstantNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  ConstantNode.prototype._compile = function (math, argNames) {\n    var value = this.value;\n    return function evalConstantNode() {\n      return value;\n    };\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  ConstantNode.prototype.forEach = function (callback) {// nothing to do, we don't have childs\n  };\n  /**\n   * Create a new ConstantNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node) : Node} callback\n   * @returns {ConstantNode} Returns a clone of the node\n   */\n\n\n  ConstantNode.prototype.map = function (callback) {\n    return this.clone();\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ConstantNode}\n   */\n\n\n  ConstantNode.prototype.clone = function () {\n    return new ConstantNode(this.value);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ConstantNode.prototype._toString = function (options) {\n    return format(this.value, options);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ConstantNode.prototype.toHTML = function (options) {\n    var value = this._toString(options);\n\n    switch (typeOf(this.value)) {\n      case 'number':\n      case 'BigNumber':\n      case 'Fraction':\n        return '<span class=\"math-number\">' + value + '</span>';\n\n      case 'string':\n        return '<span class=\"math-string\">' + value + '</span>';\n\n      case 'boolean':\n        return '<span class=\"math-boolean\">' + value + '</span>';\n\n      case 'null':\n        return '<span class=\"math-null-symbol\">' + value + '</span>';\n\n      case 'undefined':\n        return '<span class=\"math-undefined\">' + value + '</span>';\n\n      default:\n        return '<span class=\"math-symbol\">' + value + '</span>';\n    }\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  ConstantNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'ConstantNode',\n      value: this.value\n    };\n  };\n  /**\n   * Instantiate a ConstantNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"SymbolNode\", value: 2.3}`,\n   *                       where mathjs is optional\n   * @returns {ConstantNode}\n   */\n\n\n  ConstantNode.fromJSON = function (json) {\n    return new ConstantNode(json.value);\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ConstantNode.prototype._toTex = function (options) {\n    var value = this._toString(options);\n\n    switch (typeOf(this.value)) {\n      case 'string':\n        return '\\\\mathtt{' + escapeLatex(value) + '}';\n\n      case 'number':\n      case 'BigNumber':\n        {\n          if (!isFinite(this.value)) {\n            return this.value.valueOf() < 0 ? '-\\\\infty' : '\\\\infty';\n          }\n\n          var index = value.toLowerCase().indexOf('e');\n\n          if (index !== -1) {\n            return value.substring(0, index) + '\\\\cdot10^{' + value.substring(index + 1) + '}';\n          }\n        }\n        return value;\n\n      case 'Fraction':\n        return this.value.toLatex();\n\n      default:\n        return value;\n    }\n  };\n\n  return ConstantNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["format","typeOf","escapeLatex","factory","name","dependencies","createConstantNode","_ref","Node","ConstantNode","value","SyntaxError","prototype","type","isConstantNode","_compile","math","argNames","evalConstantNode","forEach","callback","map","clone","_toString","options","toHTML","toJSON","mathjs","fromJSON","json","_toTex","isFinite","valueOf","index","toLowerCase","indexOf","substring","toLatex","isClass","isNode"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/expression/node/ConstantNode.js"],"sourcesContent":["import { format } from '../../utils/string.js';\nimport { typeOf } from '../../utils/is.js';\nimport { escapeLatex } from '../../utils/latex.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'ConstantNode';\nvar dependencies = ['Node'];\nexport var createConstantNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Node\n  } = _ref;\n\n  /**\n   * A ConstantNode holds a constant value like a number or string.\n   *\n   * Usage:\n   *\n   *     new ConstantNode(2.3)\n   *     new ConstantNode('hello')\n   *\n   * @param {*} value    Value can be any type (number, BigNumber, string, ...)\n   * @constructor ConstantNode\n   * @extends {Node}\n   */\n  function ConstantNode(value) {\n    if (!(this instanceof ConstantNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.value = value;\n  }\n\n  ConstantNode.prototype = new Node();\n  ConstantNode.prototype.type = 'ConstantNode';\n  ConstantNode.prototype.isConstantNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  ConstantNode.prototype._compile = function (math, argNames) {\n    var value = this.value;\n    return function evalConstantNode() {\n      return value;\n    };\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  ConstantNode.prototype.forEach = function (callback) {// nothing to do, we don't have childs\n  };\n  /**\n   * Create a new ConstantNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node) : Node} callback\n   * @returns {ConstantNode} Returns a clone of the node\n   */\n\n\n  ConstantNode.prototype.map = function (callback) {\n    return this.clone();\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ConstantNode}\n   */\n\n\n  ConstantNode.prototype.clone = function () {\n    return new ConstantNode(this.value);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ConstantNode.prototype._toString = function (options) {\n    return format(this.value, options);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ConstantNode.prototype.toHTML = function (options) {\n    var value = this._toString(options);\n\n    switch (typeOf(this.value)) {\n      case 'number':\n      case 'BigNumber':\n      case 'Fraction':\n        return '<span class=\"math-number\">' + value + '</span>';\n\n      case 'string':\n        return '<span class=\"math-string\">' + value + '</span>';\n\n      case 'boolean':\n        return '<span class=\"math-boolean\">' + value + '</span>';\n\n      case 'null':\n        return '<span class=\"math-null-symbol\">' + value + '</span>';\n\n      case 'undefined':\n        return '<span class=\"math-undefined\">' + value + '</span>';\n\n      default:\n        return '<span class=\"math-symbol\">' + value + '</span>';\n    }\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  ConstantNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'ConstantNode',\n      value: this.value\n    };\n  };\n  /**\n   * Instantiate a ConstantNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"SymbolNode\", value: 2.3}`,\n   *                       where mathjs is optional\n   * @returns {ConstantNode}\n   */\n\n\n  ConstantNode.fromJSON = function (json) {\n    return new ConstantNode(json.value);\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ConstantNode.prototype._toTex = function (options) {\n    var value = this._toString(options);\n\n    switch (typeOf(this.value)) {\n      case 'string':\n        return '\\\\mathtt{' + escapeLatex(value) + '}';\n\n      case 'number':\n      case 'BigNumber':\n        {\n          if (!isFinite(this.value)) {\n            return this.value.valueOf() < 0 ? '-\\\\infty' : '\\\\infty';\n          }\n\n          var index = value.toLowerCase().indexOf('e');\n\n          if (index !== -1) {\n            return value.substring(0, index) + '\\\\cdot10^{' + value.substring(index + 1) + '}';\n          }\n        }\n        return value;\n\n      case 'Fraction':\n        return this.value.toLatex();\n\n      default:\n        return value;\n    }\n  };\n\n  return ConstantNode;\n}, {\n  isClass: true,\n  isNode: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}