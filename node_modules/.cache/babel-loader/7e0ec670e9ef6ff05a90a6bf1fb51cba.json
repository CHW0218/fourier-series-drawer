{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createAlgorithm03 } from '../../type/matrix/utils/algorithm03.js';\nimport { createAlgorithm07 } from '../../type/matrix/utils/algorithm07.js';\nimport { createAlgorithm12 } from '../../type/matrix/utils/algorithm12.js';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nvar name = 'equal';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];\nexport var createEqual = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      equalScalar = _ref.equalScalar,\n      DenseMatrix = _ref.DenseMatrix;\n  var algorithm03 = createAlgorithm03({\n    typed: typed\n  });\n  var algorithm07 = createAlgorithm07({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var algorithm12 = createAlgorithm12({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var algorithm13 = createAlgorithm13({\n    typed: typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed: typed\n  });\n  /**\n   * Test whether two values are equal.\n   *\n   * The function tests whether the relative difference between x and y is\n   * smaller than the configured epsilon. The function cannot be used to\n   * compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * In case of complex numbers, x.re must equal y.re, and x.im must equal y.im.\n   *\n   * Values `null` and `undefined` are compared strictly, thus `null` is only\n   * equal to `null` and nothing else, and `undefined` is only equal to\n   * `undefined` and nothing else. Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.equal(x, y)\n   *\n   * Examples:\n   *\n   *    math.equal(2 + 2, 3)         // returns false\n   *    math.equal(2 + 2, 4)         // returns true\n   *\n   *    const a = math.unit('50 cm')\n   *    const b = math.unit('5 m')\n   *    math.equal(a, b)             // returns true\n   *\n   *    const c = [2, 5, 1]\n   *    const d = [2, 7, 1]\n   *\n   *    math.equal(c, d)             // returns [true, false, true]\n   *    math.deepEqual(c, d)         // returns false\n   *\n   *    math.equal(\"1000\", \"1e3\")    // returns true\n   *    math.equal(0, null)          // returns false\n   *\n   * See also:\n   *\n   *    unequal, smaller, smallerEq, larger, largerEq, compare, deepEqual, equalText\n   *\n   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the compared values are equal, else returns false\n   */\n\n  return typed(name, {\n    'any, any': function anyAny(x, y) {\n      // strict equality for null and undefined?\n      if (x === null) {\n        return y === null;\n      }\n\n      if (y === null) {\n        return x === null;\n      }\n\n      if (x === undefined) {\n        return y === undefined;\n      }\n\n      if (y === undefined) {\n        return x === undefined;\n      }\n\n      return equalScalar(x, y);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm07(x, y, equalScalar);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm03(y, x, equalScalar, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, equalScalar, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, equalScalar);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return this(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm12(x, y, equalScalar, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, equalScalar, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, equalScalar, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, equalScalar, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, equalScalar, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, equalScalar, true).valueOf();\n    }\n  });\n});\nexport var createEqualNumber = factory(name, ['typed', 'equalScalar'], function (_ref2) {\n  var typed = _ref2.typed,\n      equalScalar = _ref2.equalScalar;\n  return typed(name, {\n    'any, any': function anyAny(x, y) {\n      // strict equality for null and undefined?\n      if (x === null) {\n        return y === null;\n      }\n\n      if (y === null) {\n        return x === null;\n      }\n\n      if (x === undefined) {\n        return y === undefined;\n      }\n\n      if (y === undefined) {\n        return x === undefined;\n      }\n\n      return equalScalar(x, y);\n    }\n  });\n});","map":{"version":3,"names":["factory","createAlgorithm03","createAlgorithm07","createAlgorithm12","createAlgorithm13","createAlgorithm14","name","dependencies","createEqual","_ref","typed","matrix","equalScalar","DenseMatrix","algorithm03","algorithm07","algorithm12","algorithm13","algorithm14","anyAny","x","y","undefined","SparseMatrixSparseMatrix","SparseMatrixDenseMatrix","DenseMatrixSparseMatrix","DenseMatrixDenseMatrix","ArrayArray","valueOf","ArrayMatrix","MatrixArray","SparseMatrixAny","DenseMatrixAny","anySparseMatrix","anyDenseMatrix","ArrayAny","anyArray","createEqualNumber","_ref2"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/function/relational/equal.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { createAlgorithm03 } from '../../type/matrix/utils/algorithm03.js';\nimport { createAlgorithm07 } from '../../type/matrix/utils/algorithm07.js';\nimport { createAlgorithm12 } from '../../type/matrix/utils/algorithm12.js';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nvar name = 'equal';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];\nexport var createEqual = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    DenseMatrix\n  } = _ref;\n  var algorithm03 = createAlgorithm03({\n    typed\n  });\n  var algorithm07 = createAlgorithm07({\n    typed,\n    DenseMatrix\n  });\n  var algorithm12 = createAlgorithm12({\n    typed,\n    DenseMatrix\n  });\n  var algorithm13 = createAlgorithm13({\n    typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Test whether two values are equal.\n   *\n   * The function tests whether the relative difference between x and y is\n   * smaller than the configured epsilon. The function cannot be used to\n   * compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * In case of complex numbers, x.re must equal y.re, and x.im must equal y.im.\n   *\n   * Values `null` and `undefined` are compared strictly, thus `null` is only\n   * equal to `null` and nothing else, and `undefined` is only equal to\n   * `undefined` and nothing else. Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.equal(x, y)\n   *\n   * Examples:\n   *\n   *    math.equal(2 + 2, 3)         // returns false\n   *    math.equal(2 + 2, 4)         // returns true\n   *\n   *    const a = math.unit('50 cm')\n   *    const b = math.unit('5 m')\n   *    math.equal(a, b)             // returns true\n   *\n   *    const c = [2, 5, 1]\n   *    const d = [2, 7, 1]\n   *\n   *    math.equal(c, d)             // returns [true, false, true]\n   *    math.deepEqual(c, d)         // returns false\n   *\n   *    math.equal(\"1000\", \"1e3\")    // returns true\n   *    math.equal(0, null)          // returns false\n   *\n   * See also:\n   *\n   *    unequal, smaller, smallerEq, larger, largerEq, compare, deepEqual, equalText\n   *\n   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the compared values are equal, else returns false\n   */\n\n  return typed(name, {\n    'any, any': function anyAny(x, y) {\n      // strict equality for null and undefined?\n      if (x === null) {\n        return y === null;\n      }\n\n      if (y === null) {\n        return x === null;\n      }\n\n      if (x === undefined) {\n        return y === undefined;\n      }\n\n      if (y === undefined) {\n        return x === undefined;\n      }\n\n      return equalScalar(x, y);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm07(x, y, equalScalar);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm03(y, x, equalScalar, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, equalScalar, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, equalScalar);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return this(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm12(x, y, equalScalar, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, equalScalar, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, equalScalar, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, equalScalar, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, equalScalar, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, equalScalar, true).valueOf();\n    }\n  });\n});\nexport var createEqualNumber = factory(name, ['typed', 'equalScalar'], _ref2 => {\n  var {\n    typed,\n    equalScalar\n  } = _ref2;\n  return typed(name, {\n    'any, any': function anyAny(x, y) {\n      // strict equality for null and undefined?\n      if (x === null) {\n        return y === null;\n      }\n\n      if (y === null) {\n        return x === null;\n      }\n\n      if (x === undefined) {\n        return y === undefined;\n      }\n\n      if (y === undefined) {\n        return x === undefined;\n      }\n\n      return equalScalar(x, y);\n    }\n  });\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}