{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'ctranspose';\nvar dependencies = ['typed', 'transpose', 'conj'];\nexport var createCtranspose = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      transpose = _ref.transpose,\n      conj = _ref.conj;\n  /**\n   * Transpose and complex conjugate a matrix. All values of the matrix are\n   * reflected over its main diagonal and then the complex conjugate is\n   * taken. This is equivalent to complex conjugation for scalars and\n   * vectors.\n   *\n   * Syntax:\n   *\n   *     math.ctranspose(x)\n   *\n   * Examples:\n   *\n   *     const A = [[1, 2, 3], [4, 5, math.complex(6,7)]]\n   *     math.ctranspose(A)               // returns [[1, 4], [2, 5], [3, {re:6,im:7}]]\n   *\n   * See also:\n   *\n   *     transpose, diag, inv, subset, squeeze\n   *\n   * @param {Array | Matrix} x  Matrix to be ctransposed\n   * @return {Array | Matrix}   The ctransposed matrix\n   */\n\n  return typed(name, {\n    any: function any(x) {\n      return conj(transpose(x));\n    }\n  });\n});","map":{"version":3,"names":["factory","name","dependencies","createCtranspose","_ref","typed","transpose","conj","any","x"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/function/matrix/ctranspose.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'ctranspose';\nvar dependencies = ['typed', 'transpose', 'conj'];\nexport var createCtranspose = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    transpose,\n    conj\n  } = _ref;\n\n  /**\n   * Transpose and complex conjugate a matrix. All values of the matrix are\n   * reflected over its main diagonal and then the complex conjugate is\n   * taken. This is equivalent to complex conjugation for scalars and\n   * vectors.\n   *\n   * Syntax:\n   *\n   *     math.ctranspose(x)\n   *\n   * Examples:\n   *\n   *     const A = [[1, 2, 3], [4, 5, math.complex(6,7)]]\n   *     math.ctranspose(A)               // returns [[1, 4], [2, 5], [3, {re:6,im:7}]]\n   *\n   * See also:\n   *\n   *     transpose, diag, inv, subset, squeeze\n   *\n   * @param {Array | Matrix} x  Matrix to be ctransposed\n   * @return {Array | Matrix}   The ctransposed matrix\n   */\n  return typed(name, {\n    any: function any(x) {\n      return conj(transpose(x));\n    }\n  });\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,YAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,WAAV,EAAuB,MAAvB,CAAnB;AACA,OAAO,IAAIC,gBAAgB,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EAC/E,IACEC,KADF,GAIID,IAJJ,CACEC,KADF;EAAA,IAEEC,SAFF,GAIIF,IAJJ,CAEEE,SAFF;EAAA,IAGEC,IAHF,GAIIH,IAJJ,CAGEG,IAHF;EAMA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOF,KAAK,CAACJ,IAAD,EAAO;IACjBO,GAAG,EAAE,SAASA,GAAT,CAAaC,CAAb,EAAgB;MACnB,OAAOF,IAAI,CAACD,SAAS,CAACG,CAAD,CAAV,CAAX;IACD;EAHgB,CAAP,CAAZ;AAKD,CAlCmD,CAA7C"},"metadata":{},"sourceType":"module"}