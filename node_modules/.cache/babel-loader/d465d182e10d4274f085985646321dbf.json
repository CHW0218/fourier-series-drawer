{"ast":null,"code":"import { factory } from '../../../utils/factory.js';\nimport { isBigNumber, isMatrix } from '../../../utils/is.js';\nvar name = 'index';\nvar dependencies = ['typed', 'Index'];\nexport var createIndex = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      Index = _ref.Index;\n  /**\n   * Create an index. An Index can store ranges having start, step, and end\n   * for multiple dimensions.\n   * Matrix.get, Matrix.set, and math.subset accept an Index as input.\n   *\n   * Syntax:\n   *\n   *     math.index(range1, range2, ...)\n   *\n   * Where each range can be any of:\n   *\n   * - A number\n   * - A string for getting/setting an object property\n   * - An instance of `Range`\n   * - A one-dimensional Array or a Matrix with numbers\n   *\n   * Indexes must be zero-based, integer numbers.\n   *\n   * Examples:\n   *\n   *    const b = [1, 2, 3, 4, 5]\n   *    math.subset(b, math.index([1, 2, 3]))     // returns [2, 3, 4]\n   *\n   *    const a = math.matrix([[1, 2], [3, 4]])\n   *    a.subset(math.index(0, 1))             // returns 2\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, matrix, number, string, unit\n   *\n   * @param {...*} ranges   Zero or more ranges or numbers.\n   * @return {Index}        Returns the created index\n   */\n\n  return typed(name, {\n    '...number | string | BigNumber | Range | Array | Matrix': function numberStringBigNumberRangeArrayMatrix(args) {\n      var ranges = args.map(function (arg) {\n        if (isBigNumber(arg)) {\n          return arg.toNumber(); // convert BigNumber to Number\n        } else if (Array.isArray(arg) || isMatrix(arg)) {\n          return arg.map(function (elem) {\n            // convert BigNumber to Number\n            return isBigNumber(elem) ? elem.toNumber() : elem;\n          });\n        } else {\n          return arg;\n        }\n      });\n      var res = new Index();\n      Index.apply(res, ranges);\n      return res;\n    }\n  });\n});","map":{"version":3,"names":["factory","isBigNumber","isMatrix","name","dependencies","createIndex","_ref","typed","Index","numberStringBigNumberRangeArrayMatrix","args","ranges","map","arg","toNumber","Array","isArray","elem","res","apply"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/type/matrix/function/index.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\nimport { isBigNumber, isMatrix } from '../../../utils/is.js';\nvar name = 'index';\nvar dependencies = ['typed', 'Index'];\nexport var createIndex = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Index\n  } = _ref;\n\n  /**\n   * Create an index. An Index can store ranges having start, step, and end\n   * for multiple dimensions.\n   * Matrix.get, Matrix.set, and math.subset accept an Index as input.\n   *\n   * Syntax:\n   *\n   *     math.index(range1, range2, ...)\n   *\n   * Where each range can be any of:\n   *\n   * - A number\n   * - A string for getting/setting an object property\n   * - An instance of `Range`\n   * - A one-dimensional Array or a Matrix with numbers\n   *\n   * Indexes must be zero-based, integer numbers.\n   *\n   * Examples:\n   *\n   *    const b = [1, 2, 3, 4, 5]\n   *    math.subset(b, math.index([1, 2, 3]))     // returns [2, 3, 4]\n   *\n   *    const a = math.matrix([[1, 2], [3, 4]])\n   *    a.subset(math.index(0, 1))             // returns 2\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, matrix, number, string, unit\n   *\n   * @param {...*} ranges   Zero or more ranges or numbers.\n   * @return {Index}        Returns the created index\n   */\n  return typed(name, {\n    '...number | string | BigNumber | Range | Array | Matrix': function numberStringBigNumberRangeArrayMatrix(args) {\n      var ranges = args.map(function (arg) {\n        if (isBigNumber(arg)) {\n          return arg.toNumber(); // convert BigNumber to Number\n        } else if (Array.isArray(arg) || isMatrix(arg)) {\n          return arg.map(function (elem) {\n            // convert BigNumber to Number\n            return isBigNumber(elem) ? elem.toNumber() : elem;\n          });\n        } else {\n          return arg;\n        }\n      });\n      var res = new Index();\n      Index.apply(res, ranges);\n      return res;\n    }\n  });\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,2BAAxB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,sBAAtC;AACA,IAAIC,IAAI,GAAG,OAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,OAAV,CAAnB;AACA,OAAO,IAAIC,WAAW,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EAC1E,IACEC,KADF,GAGID,IAHJ,CACEC,KADF;EAAA,IAEEC,KAFF,GAGIF,IAHJ,CAEEE,KAFF;EAKA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOD,KAAK,CAACJ,IAAD,EAAO;IACjB,2DAA2D,SAASM,qCAAT,CAA+CC,IAA/C,EAAqD;MAC9G,IAAIC,MAAM,GAAGD,IAAI,CAACE,GAAL,CAAS,UAAUC,GAAV,EAAe;QACnC,IAAIZ,WAAW,CAACY,GAAD,CAAf,EAAsB;UACpB,OAAOA,GAAG,CAACC,QAAJ,EAAP,CADoB,CACG;QACxB,CAFD,MAEO,IAAIC,KAAK,CAACC,OAAN,CAAcH,GAAd,KAAsBX,QAAQ,CAACW,GAAD,CAAlC,EAAyC;UAC9C,OAAOA,GAAG,CAACD,GAAJ,CAAQ,UAAUK,IAAV,EAAgB;YAC7B;YACA,OAAOhB,WAAW,CAACgB,IAAD,CAAX,GAAoBA,IAAI,CAACH,QAAL,EAApB,GAAsCG,IAA7C;UACD,CAHM,CAAP;QAID,CALM,MAKA;UACL,OAAOJ,GAAP;QACD;MACF,CAXY,CAAb;MAYA,IAAIK,GAAG,GAAG,IAAIV,KAAJ,EAAV;MACAA,KAAK,CAACW,KAAN,CAAYD,GAAZ,EAAiBP,MAAjB;MACA,OAAOO,GAAP;IACD;EAjBgB,CAAP,CAAZ;AAmBD,CA1D8C,CAAxC"},"metadata":{},"sourceType":"module"}