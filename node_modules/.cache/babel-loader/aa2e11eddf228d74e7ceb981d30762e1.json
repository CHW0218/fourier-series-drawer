{"ast":null,"code":"/*\r\n * Natural Sort algorithm for Javascript - Version 0.7 - Released under MIT license\r\n * Author: Jim Palmer (based on chunking idea from Dave Koelle)\r\n */\n\n/*jshint unused:false */\nmodule.exports = function naturalSort(a, b) {\n  \"use strict\";\n\n  var re = /(^([+\\-]?(?:0|[1-9]\\d*)(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)?$|^0x[0-9a-f]+$|\\d+)/gi,\n      sre = /(^[ ]*|[ ]*$)/g,\n      dre = /(^([\\w ]+,?[\\w ]+)?[\\w ]+,?[\\w ]+\\d+:\\d+(:\\d+)?[\\w ]?|^\\d{1,4}[\\/\\-]\\d{1,4}[\\/\\-]\\d{1,4}|^\\w+, \\w+ \\d+, \\d{4})/,\n      hre = /^0x[0-9a-f]+$/i,\n      ore = /^0/,\n      i = function i(s) {\n    return naturalSort.insensitive && ('' + s).toLowerCase() || '' + s;\n  },\n      // convert all to strings strip whitespace\n  x = i(a).replace(sre, '') || '',\n      y = i(b).replace(sre, '') || '',\n      // chunk/tokenize\n  xN = x.replace(re, '\\0$1\\0').replace(/\\0$/, '').replace(/^\\0/, '').split('\\0'),\n      yN = y.replace(re, '\\0$1\\0').replace(/\\0$/, '').replace(/^\\0/, '').split('\\0'),\n      // numeric, hex or date detection\n  xD = parseInt(x.match(hre), 16) || xN.length !== 1 && x.match(dre) && Date.parse(x),\n      yD = parseInt(y.match(hre), 16) || xD && y.match(dre) && Date.parse(y) || null,\n      oFxNcL,\n      oFyNcL; // first try and sort Hex codes or Dates\n\n\n  if (yD) {\n    if (xD < yD) {\n      return -1;\n    } else if (xD > yD) {\n      return 1;\n    }\n  } // natural sorting through split numeric strings and default strings\n\n\n  for (var cLoc = 0, numS = Math.max(xN.length, yN.length); cLoc < numS; cLoc++) {\n    // find floats not starting with '0', string or 0 if not defined (Clint Priest)\n    oFxNcL = !(xN[cLoc] || '').match(ore) && parseFloat(xN[cLoc]) || xN[cLoc] || 0;\n    oFyNcL = !(yN[cLoc] || '').match(ore) && parseFloat(yN[cLoc]) || yN[cLoc] || 0; // handle numeric vs string comparison - number < string - (Kyle Adams)\n\n    if (isNaN(oFxNcL) !== isNaN(oFyNcL)) {\n      return isNaN(oFxNcL) ? 1 : -1;\n    } // rely on string comparison if different types - i.e. '02' < 2 != '02' < '2'\n    else if (typeof oFxNcL !== typeof oFyNcL) {\n      oFxNcL += '';\n      oFyNcL += '';\n    }\n\n    if (oFxNcL < oFyNcL) {\n      return -1;\n    }\n\n    if (oFxNcL > oFyNcL) {\n      return 1;\n    }\n  }\n\n  return 0;\n};","map":{"version":3,"names":["module","exports","naturalSort","a","b","re","sre","dre","hre","ore","i","s","insensitive","toLowerCase","x","replace","y","xN","split","yN","xD","parseInt","match","length","Date","parse","yD","oFxNcL","oFyNcL","cLoc","numS","Math","max","parseFloat","isNaN"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/javascript-natural-sort/naturalSort.js"],"sourcesContent":["/*\r\n * Natural Sort algorithm for Javascript - Version 0.7 - Released under MIT license\r\n * Author: Jim Palmer (based on chunking idea from Dave Koelle)\r\n */\r\n/*jshint unused:false */\r\nmodule.exports = function naturalSort (a, b) {\r\n\t\"use strict\";\r\n\tvar re = /(^([+\\-]?(?:0|[1-9]\\d*)(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)?$|^0x[0-9a-f]+$|\\d+)/gi,\r\n\t\tsre = /(^[ ]*|[ ]*$)/g,\r\n\t\tdre = /(^([\\w ]+,?[\\w ]+)?[\\w ]+,?[\\w ]+\\d+:\\d+(:\\d+)?[\\w ]?|^\\d{1,4}[\\/\\-]\\d{1,4}[\\/\\-]\\d{1,4}|^\\w+, \\w+ \\d+, \\d{4})/,\r\n\t\thre = /^0x[0-9a-f]+$/i,\r\n\t\tore = /^0/,\r\n\t\ti = function(s) { return naturalSort.insensitive && ('' + s).toLowerCase() || '' + s; },\r\n\t\t// convert all to strings strip whitespace\r\n\t\tx = i(a).replace(sre, '') || '',\r\n\t\ty = i(b).replace(sre, '') || '',\r\n\t\t// chunk/tokenize\r\n\t\txN = x.replace(re, '\\0$1\\0').replace(/\\0$/,'').replace(/^\\0/,'').split('\\0'),\r\n\t\tyN = y.replace(re, '\\0$1\\0').replace(/\\0$/,'').replace(/^\\0/,'').split('\\0'),\r\n\t\t// numeric, hex or date detection\r\n\t\txD = parseInt(x.match(hre), 16) || (xN.length !== 1 && x.match(dre) && Date.parse(x)),\r\n\t\tyD = parseInt(y.match(hre), 16) || xD && y.match(dre) && Date.parse(y) || null,\r\n\t\toFxNcL, oFyNcL;\r\n\t// first try and sort Hex codes or Dates\r\n\tif (yD) {\r\n\t\tif ( xD < yD ) { return -1; }\r\n\t\telse if ( xD > yD ) { return 1; }\r\n\t}\r\n\t// natural sorting through split numeric strings and default strings\r\n\tfor(var cLoc=0, numS=Math.max(xN.length, yN.length); cLoc < numS; cLoc++) {\r\n\t\t// find floats not starting with '0', string or 0 if not defined (Clint Priest)\r\n\t\toFxNcL = !(xN[cLoc] || '').match(ore) && parseFloat(xN[cLoc]) || xN[cLoc] || 0;\r\n\t\toFyNcL = !(yN[cLoc] || '').match(ore) && parseFloat(yN[cLoc]) || yN[cLoc] || 0;\r\n\t\t// handle numeric vs string comparison - number < string - (Kyle Adams)\r\n\t\tif (isNaN(oFxNcL) !== isNaN(oFyNcL)) { return (isNaN(oFxNcL)) ? 1 : -1; }\r\n\t\t// rely on string comparison if different types - i.e. '02' < 2 != '02' < '2'\r\n\t\telse if (typeof oFxNcL !== typeof oFyNcL) {\r\n\t\t\toFxNcL += '';\r\n\t\t\toFyNcL += '';\r\n\t\t}\r\n\t\tif (oFxNcL < oFyNcL) { return -1; }\r\n\t\tif (oFxNcL > oFyNcL) { return 1; }\r\n\t}\r\n\treturn 0;\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACAA,MAAM,CAACC,OAAP,GAAiB,SAASC,WAAT,CAAsBC,CAAtB,EAAyBC,CAAzB,EAA4B;EAC5C;;EACA,IAAIC,EAAE,GAAG,6EAAT;EAAA,IACCC,GAAG,GAAG,gBADP;EAAA,IAECC,GAAG,GAAG,gHAFP;EAAA,IAGCC,GAAG,GAAG,gBAHP;EAAA,IAICC,GAAG,GAAG,IAJP;EAAA,IAKCC,CAAC,GAAG,SAAJA,CAAI,CAASC,CAAT,EAAY;IAAE,OAAOT,WAAW,CAACU,WAAZ,IAA2B,CAAC,KAAKD,CAAN,EAASE,WAAT,EAA3B,IAAqD,KAAKF,CAAjE;EAAqE,CALxF;EAAA,IAMC;EACAG,CAAC,GAAGJ,CAAC,CAACP,CAAD,CAAD,CAAKY,OAAL,CAAaT,GAAb,EAAkB,EAAlB,KAAyB,EAP9B;EAAA,IAQCU,CAAC,GAAGN,CAAC,CAACN,CAAD,CAAD,CAAKW,OAAL,CAAaT,GAAb,EAAkB,EAAlB,KAAyB,EAR9B;EAAA,IASC;EACAW,EAAE,GAAGH,CAAC,CAACC,OAAF,CAAUV,EAAV,EAAc,QAAd,EAAwBU,OAAxB,CAAgC,KAAhC,EAAsC,EAAtC,EAA0CA,OAA1C,CAAkD,KAAlD,EAAwD,EAAxD,EAA4DG,KAA5D,CAAkE,IAAlE,CAVN;EAAA,IAWCC,EAAE,GAAGH,CAAC,CAACD,OAAF,CAAUV,EAAV,EAAc,QAAd,EAAwBU,OAAxB,CAAgC,KAAhC,EAAsC,EAAtC,EAA0CA,OAA1C,CAAkD,KAAlD,EAAwD,EAAxD,EAA4DG,KAA5D,CAAkE,IAAlE,CAXN;EAAA,IAYC;EACAE,EAAE,GAAGC,QAAQ,CAACP,CAAC,CAACQ,KAAF,CAAQd,GAAR,CAAD,EAAe,EAAf,CAAR,IAA+BS,EAAE,CAACM,MAAH,KAAc,CAAd,IAAmBT,CAAC,CAACQ,KAAF,CAAQf,GAAR,CAAnB,IAAmCiB,IAAI,CAACC,KAAL,CAAWX,CAAX,CAbxE;EAAA,IAcCY,EAAE,GAAGL,QAAQ,CAACL,CAAC,CAACM,KAAF,CAAQd,GAAR,CAAD,EAAe,EAAf,CAAR,IAA8BY,EAAE,IAAIJ,CAAC,CAACM,KAAF,CAAQf,GAAR,CAAN,IAAsBiB,IAAI,CAACC,KAAL,CAAWT,CAAX,CAApD,IAAqE,IAd3E;EAAA,IAeCW,MAfD;EAAA,IAeSC,MAfT,CAF4C,CAkB5C;;;EACA,IAAIF,EAAJ,EAAQ;IACP,IAAKN,EAAE,GAAGM,EAAV,EAAe;MAAE,OAAO,CAAC,CAAR;IAAY,CAA7B,MACK,IAAKN,EAAE,GAAGM,EAAV,EAAe;MAAE,OAAO,CAAP;IAAW;EACjC,CAtB2C,CAuB5C;;;EACA,KAAI,IAAIG,IAAI,GAAC,CAAT,EAAYC,IAAI,GAACC,IAAI,CAACC,GAAL,CAASf,EAAE,CAACM,MAAZ,EAAoBJ,EAAE,CAACI,MAAvB,CAArB,EAAqDM,IAAI,GAAGC,IAA5D,EAAkED,IAAI,EAAtE,EAA0E;IACzE;IACAF,MAAM,GAAG,CAAC,CAACV,EAAE,CAACY,IAAD,CAAF,IAAY,EAAb,EAAiBP,KAAjB,CAAuBb,GAAvB,CAAD,IAAgCwB,UAAU,CAAChB,EAAE,CAACY,IAAD,CAAH,CAA1C,IAAwDZ,EAAE,CAACY,IAAD,CAA1D,IAAoE,CAA7E;IACAD,MAAM,GAAG,CAAC,CAACT,EAAE,CAACU,IAAD,CAAF,IAAY,EAAb,EAAiBP,KAAjB,CAAuBb,GAAvB,CAAD,IAAgCwB,UAAU,CAACd,EAAE,CAACU,IAAD,CAAH,CAA1C,IAAwDV,EAAE,CAACU,IAAD,CAA1D,IAAoE,CAA7E,CAHyE,CAIzE;;IACA,IAAIK,KAAK,CAACP,MAAD,CAAL,KAAkBO,KAAK,CAACN,MAAD,CAA3B,EAAqC;MAAE,OAAQM,KAAK,CAACP,MAAD,CAAN,GAAkB,CAAlB,GAAsB,CAAC,CAA9B;IAAkC,CAAzE,CACA;IADA,KAEK,IAAI,OAAOA,MAAP,KAAkB,OAAOC,MAA7B,EAAqC;MACzCD,MAAM,IAAI,EAAV;MACAC,MAAM,IAAI,EAAV;IACA;;IACD,IAAID,MAAM,GAAGC,MAAb,EAAqB;MAAE,OAAO,CAAC,CAAR;IAAY;;IACnC,IAAID,MAAM,GAAGC,MAAb,EAAqB;MAAE,OAAO,CAAP;IAAW;EAClC;;EACD,OAAO,CAAP;AACA,CAvCD"},"metadata":{},"sourceType":"script"}