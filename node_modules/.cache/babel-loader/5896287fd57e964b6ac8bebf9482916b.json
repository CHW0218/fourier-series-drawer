{"ast":null,"code":";\n\n(function (globalScope) {\n  'use strict';\n  /*\r\n   *  decimal.js v10.3.1\r\n   *  An arbitrary-precision Decimal type for JavaScript.\r\n   *  https://github.com/MikeMcl/decimal.js\r\n   *  Copyright (c) 2021 Michael Mclaughlin <M8ch88l@gmail.com>\r\n   *  MIT Licence\r\n   */\n  // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\n  // The maximum exponent magnitude.\n  // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\n\n  var EXP_LIMIT = 9e15,\n      // 0 to 9e15\n  // The limit on the value of `precision`, and on the value of the first argument to\n  // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\n  MAX_DIGITS = 1e9,\n      // 0 to 1e9\n  // Base conversion alphabet.\n  NUMERALS = '0123456789abcdef',\n      // The natural logarithm of 10 (1025 digits).\n  LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\n      // Pi (1025 digits).\n  PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\n      // The initial configuration properties of the Decimal constructor.\n  DEFAULTS = {\n    // These values must be integers within the stated ranges (inclusive).\n    // Most of these values can be changed at run-time using the `Decimal.config` method.\n    // The maximum number of significant digits of the result of a calculation or base conversion.\n    // E.g. `Decimal.config({ precision: 20 });`\n    precision: 20,\n    // 1 to MAX_DIGITS\n    // The rounding mode used when rounding to `precision`.\n    //\n    // ROUND_UP         0 Away from zero.\n    // ROUND_DOWN       1 Towards zero.\n    // ROUND_CEIL       2 Towards +Infinity.\n    // ROUND_FLOOR      3 Towards -Infinity.\n    // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n    // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n    // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n    // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n    // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n    //\n    // E.g.\n    // `Decimal.rounding = 4;`\n    // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\n    rounding: 4,\n    // 0 to 8\n    // The modulo mode used when calculating the modulus: a mod n.\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\n    // The remainder (r) is calculated as: r = a - n * q.\n    //\n    // UP         0 The remainder is positive if the dividend is negative, else is negative.\n    // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\n    // FLOOR      3 The remainder has the same sign as the divisor (Python %).\n    // HALF_EVEN  6 The IEEE 754 remainder function.\n    // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\n    //\n    // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\n    // division (9) are commonly used for the modulus operation. The other rounding modes can also\n    // be used, but they may not give useful results.\n    modulo: 1,\n    // 0 to 9\n    // The exponent value at and beneath which `toString` returns exponential notation.\n    // JavaScript numbers: -7\n    toExpNeg: -7,\n    // 0 to -EXP_LIMIT\n    // The exponent value at and above which `toString` returns exponential notation.\n    // JavaScript numbers: 21\n    toExpPos: 21,\n    // 0 to EXP_LIMIT\n    // The minimum exponent value, beneath which underflow to zero occurs.\n    // JavaScript numbers: -324  (5e-324)\n    minE: -EXP_LIMIT,\n    // -1 to -EXP_LIMIT\n    // The maximum exponent value, above which overflow to Infinity occurs.\n    // JavaScript numbers: 308  (1.7976931348623157e+308)\n    maxE: EXP_LIMIT,\n    // 1 to EXP_LIMIT\n    // Whether to use cryptographically-secure random number generation, if available.\n    crypto: false // true/false\n\n  },\n      // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\n  Decimal,\n      inexact,\n      noConflict,\n      quadrant,\n      external = true,\n      decimalError = '[DecimalError] ',\n      invalidArgument = decimalError + 'Invalid argument: ',\n      precisionLimitExceeded = decimalError + 'Precision limit exceeded',\n      cryptoUnavailable = decimalError + 'crypto unavailable',\n      tag = '[object Decimal]',\n      mathfloor = Math.floor,\n      mathpow = Math.pow,\n      isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\n      isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\n      isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\n      isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\n      BASE = 1e7,\n      LOG_BASE = 7,\n      MAX_SAFE_INTEGER = 9007199254740991,\n      LN10_PRECISION = LN10.length - 1,\n      PI_PRECISION = PI.length - 1,\n      // Decimal.prototype object\n  P = {\n    toStringTag: tag\n  }; // Decimal prototype methods\n\n  /*\r\n   *  absoluteValue             abs\r\n   *  ceil\r\n   *  clampedTo                 clamp\r\n   *  comparedTo                cmp\r\n   *  cosine                    cos\r\n   *  cubeRoot                  cbrt\r\n   *  decimalPlaces             dp\r\n   *  dividedBy                 div\r\n   *  dividedToIntegerBy        divToInt\r\n   *  equals                    eq\r\n   *  floor\r\n   *  greaterThan               gt\r\n   *  greaterThanOrEqualTo      gte\r\n   *  hyperbolicCosine          cosh\r\n   *  hyperbolicSine            sinh\r\n   *  hyperbolicTangent         tanh\r\n   *  inverseCosine             acos\r\n   *  inverseHyperbolicCosine   acosh\r\n   *  inverseHyperbolicSine     asinh\r\n   *  inverseHyperbolicTangent  atanh\r\n   *  inverseSine               asin\r\n   *  inverseTangent            atan\r\n   *  isFinite\r\n   *  isInteger                 isInt\r\n   *  isNaN\r\n   *  isNegative                isNeg\r\n   *  isPositive                isPos\r\n   *  isZero\r\n   *  lessThan                  lt\r\n   *  lessThanOrEqualTo         lte\r\n   *  logarithm                 log\r\n   *  [maximum]                 [max]\r\n   *  [minimum]                 [min]\r\n   *  minus                     sub\r\n   *  modulo                    mod\r\n   *  naturalExponential        exp\r\n   *  naturalLogarithm          ln\r\n   *  negated                   neg\r\n   *  plus                      add\r\n   *  precision                 sd\r\n   *  round\r\n   *  sine                      sin\r\n   *  squareRoot                sqrt\r\n   *  tangent                   tan\r\n   *  times                     mul\r\n   *  toBinary\r\n   *  toDecimalPlaces           toDP\r\n   *  toExponential\r\n   *  toFixed\r\n   *  toFraction\r\n   *  toHexadecimal             toHex\r\n   *  toNearest\r\n   *  toNumber\r\n   *  toOctal\r\n   *  toPower                   pow\r\n   *  toPrecision\r\n   *  toSignificantDigits       toSD\r\n   *  toString\r\n   *  truncated                 trunc\r\n   *  valueOf                   toJSON\r\n   */\n\n  /*\r\n   * Return a new Decimal whose value is the absolute value of this Decimal.\r\n   *\r\n   */\n\n  P.absoluteValue = P.abs = function () {\n    var x = new this.constructor(this);\n    if (x.s < 0) x.s = 1;\n    return finalise(x);\n  };\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of positive Infinity.\r\n   *\r\n   */\n\n\n  P.ceil = function () {\n    return finalise(new this.constructor(this), this.e + 1, 2);\n  };\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal clamped to the range\r\n   * delineated by `min` and `max`.\r\n   *\r\n   * min {number|string|Decimal}\r\n   * max {number|string|Decimal}\r\n   *\r\n   */\n\n\n  P.clampedTo = P.clamp = function (min, max) {\n    var k,\n        x = this,\n        Ctor = x.constructor;\n    min = new Ctor(min);\n    max = new Ctor(max);\n    if (!min.s || !max.s) return new Ctor(NaN);\n    if (min.gt(max)) throw Error(invalidArgument + max);\n    k = x.cmp(min);\n    return k < 0 ? min : x.cmp(max) > 0 ? max : new Ctor(x);\n  };\n  /*\r\n   * Return\r\n   *   1    if the value of this Decimal is greater than the value of `y`,\r\n   *  -1    if the value of this Decimal is less than the value of `y`,\r\n   *   0    if they have the same value,\r\n   *   NaN  if the value of either Decimal is NaN.\r\n   *\r\n   */\n\n\n  P.comparedTo = P.cmp = function (y) {\n    var i,\n        j,\n        xdL,\n        ydL,\n        x = this,\n        xd = x.d,\n        yd = (y = new x.constructor(y)).d,\n        xs = x.s,\n        ys = y.s; // Either NaN or ±Infinity?\n\n    if (!xd || !yd) {\n      return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\n    } // Either zero?\n\n\n    if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0; // Signs differ?\n\n    if (xs !== ys) return xs; // Compare exponents.\n\n    if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\n    xdL = xd.length;\n    ydL = yd.length; // Compare digit by digit.\n\n    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\n      if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\n    } // Compare lengths.\n\n\n    return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\n  };\n  /*\r\n   * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * cos(0)         = 1\r\n   * cos(-0)        = 1\r\n   * cos(Infinity)  = NaN\r\n   * cos(-Infinity) = NaN\r\n   * cos(NaN)       = NaN\r\n   *\r\n   */\n\n\n  P.cosine = P.cos = function () {\n    var pr,\n        rm,\n        x = this,\n        Ctor = x.constructor;\n    if (!x.d) return new Ctor(NaN); // cos(0) = cos(-0) = 1\n\n    if (!x.d[0]) return new Ctor(1);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\n    Ctor.rounding = 1;\n    x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\n  };\n  /*\r\n   *\r\n   * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   *  cbrt(0)  =  0\r\n   *  cbrt(-0) = -0\r\n   *  cbrt(1)  =  1\r\n   *  cbrt(-1) = -1\r\n   *  cbrt(N)  =  N\r\n   *  cbrt(-I) = -I\r\n   *  cbrt(I)  =  I\r\n   *\r\n   * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n   *\r\n   */\n\n\n  P.cubeRoot = P.cbrt = function () {\n    var e,\n        m,\n        n,\n        r,\n        rep,\n        s,\n        sd,\n        t,\n        t3,\n        t3plusx,\n        x = this,\n        Ctor = x.constructor;\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\n    external = false; // Initial estimate.\n\n    s = x.s * mathpow(x.s * x, 1 / 3); // Math.cbrt underflow/overflow?\n    // Pass x to Math.pow as integer, then adjust the exponent of the result.\n\n    if (!s || Math.abs(s) == 1 / 0) {\n      n = digitsToString(x.d);\n      e = x.e; // Adjust n exponent so it is a multiple of 3 away from x exponent.\n\n      if (s = (e - n.length + 1) % 3) n += s == 1 || s == -2 ? '0' : '00';\n      s = mathpow(n, 1 / 3); // Rarely, e may be one less than the result exponent value.\n\n      e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\n\n      if (s == 1 / 0) {\n        n = '5e' + e;\n      } else {\n        n = s.toExponential();\n        n = n.slice(0, n.indexOf('e') + 1) + e;\n      }\n\n      r = new Ctor(n);\n      r.s = x.s;\n    } else {\n      r = new Ctor(s.toString());\n    }\n\n    sd = (e = Ctor.precision) + 3; // Halley's method.\n    // TODO? Compare Newton's method.\n\n    for (;;) {\n      t = r;\n      t3 = t.times(t).times(t);\n      t3plusx = t3.plus(x);\n      r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1); // TODO? Replace with for-loop and checkRoundingDigits.\n\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\n        n = n.slice(sd - 3, sd + 1); // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\n        // , i.e. approaching a rounding boundary, continue the iteration.\n\n        if (n == '9999' || !rep && n == '4999') {\n          // On the first iteration only, check to see if rounding up gives the exact result as the\n          // nines may infinitely repeat.\n          if (!rep) {\n            finalise(t, e + 1, 0);\n\n            if (t.times(t).times(t).eq(x)) {\n              r = t;\n              break;\n            }\n          }\n\n          sd += 4;\n          rep = 1;\n        } else {\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\n          // If not, then there are further digits and m will be truthy.\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n            // Truncate to the first rounding digit.\n            finalise(r, e + 1, 1);\n            m = !r.times(r).times(r).eq(x);\n          }\n\n          break;\n        }\n      }\n    }\n\n    external = true;\n    return finalise(r, e, Ctor.rounding, m);\n  };\n  /*\r\n   * Return the number of decimal places of the value of this Decimal.\r\n   *\r\n   */\n\n\n  P.decimalPlaces = P.dp = function () {\n    var w,\n        d = this.d,\n        n = NaN;\n\n    if (d) {\n      w = d.length - 1;\n      n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE; // Subtract the number of trailing zeros of the last word.\n\n      w = d[w];\n      if (w) for (; w % 10 == 0; w /= 10) {\n        n--;\n      }\n      if (n < 0) n = 0;\n    }\n\n    return n;\n  };\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\n\n\n  P.dividedBy = P.div = function (y) {\n    return divide(this, new this.constructor(y));\n  };\n  /*\r\n   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n   * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\n\n\n  P.dividedToIntegerBy = P.divToInt = function (y) {\n    var x = this,\n        Ctor = x.constructor;\n    return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\n  };\n  /*\r\n   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n   *\r\n   */\n\n\n  P.equals = P.eq = function (y) {\n    return this.cmp(y) === 0;\n  };\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of negative Infinity.\r\n   *\r\n   */\n\n\n  P.floor = function () {\n    return finalise(new this.constructor(this), this.e + 1, 3);\n  };\n  /*\r\n   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n   * false.\r\n   *\r\n   */\n\n\n  P.greaterThan = P.gt = function (y) {\n    return this.cmp(y) > 0;\n  };\n  /*\r\n   * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n   * otherwise return false.\r\n   *\r\n   */\n\n\n  P.greaterThanOrEqualTo = P.gte = function (y) {\n    var k = this.cmp(y);\n    return k == 1 || k === 0;\n  };\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [1, Infinity]\r\n   *\r\n   * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n   *\r\n   * cosh(0)         = 1\r\n   * cosh(-0)        = 1\r\n   * cosh(Infinity)  = Infinity\r\n   * cosh(-Infinity) = Infinity\r\n   * cosh(NaN)       = NaN\r\n   *\r\n   *  x        time taken (ms)   result\r\n   * 1000      9                 9.8503555700852349694e+433\r\n   * 10000     25                4.4034091128314607936e+4342\r\n   * 100000    171               1.4033316802130615897e+43429\r\n   * 1000000   3817              1.5166076984010437725e+434294\r\n   * 10000000  abandoned after 2 minute wait\r\n   *\r\n   * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n   *\r\n   */\n\n\n  P.hyperbolicCosine = P.cosh = function () {\n    var k,\n        n,\n        pr,\n        rm,\n        len,\n        x = this,\n        Ctor = x.constructor,\n        one = new Ctor(1);\n    if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\n    if (x.isZero()) return one;\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\n    Ctor.rounding = 1;\n    len = x.d.length; // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\n    // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\n    // Estimate the optimum number of times to use the argument reduction.\n    // TODO? Estimation reused from cosine() and may not be optimal here.\n\n    if (len < 32) {\n      k = Math.ceil(len / 3);\n      n = (1 / tinyPow(4, k)).toString();\n    } else {\n      k = 16;\n      n = '2.3283064365386962890625e-10';\n    }\n\n    x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true); // Reverse argument reduction\n\n    var cosh2_x,\n        i = k,\n        d8 = new Ctor(8);\n\n    for (; i--;) {\n      cosh2_x = x.times(x);\n      x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\n    }\n\n    return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\n  };\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n   *\r\n   * sinh(0)         = 0\r\n   * sinh(-0)        = -0\r\n   * sinh(Infinity)  = Infinity\r\n   * sinh(-Infinity) = -Infinity\r\n   * sinh(NaN)       = NaN\r\n   *\r\n   * x        time taken (ms)\r\n   * 10       2 ms\r\n   * 100      5 ms\r\n   * 1000     14 ms\r\n   * 10000    82 ms\r\n   * 100000   886 ms            1.4033316802130615897e+43429\r\n   * 200000   2613 ms\r\n   * 300000   5407 ms\r\n   * 400000   8824 ms\r\n   * 500000   13026 ms          8.7080643612718084129e+217146\r\n   * 1000000  48543 ms\r\n   *\r\n   * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n   *\r\n   */\n\n\n  P.hyperbolicSine = P.sinh = function () {\n    var k,\n        pr,\n        rm,\n        len,\n        x = this,\n        Ctor = x.constructor;\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\n    Ctor.rounding = 1;\n    len = x.d.length;\n\n    if (len < 3) {\n      x = taylorSeries(Ctor, 2, x, x, true);\n    } else {\n      // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\n      // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\n      // 3 multiplications and 1 addition\n      // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\n      // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\n      // 4 multiplications and 2 additions\n      // Estimate the optimum number of times to use the argument reduction.\n      k = 1.4 * Math.sqrt(len);\n      k = k > 16 ? 16 : k | 0;\n      x = x.times(1 / tinyPow(5, k));\n      x = taylorSeries(Ctor, 2, x, x, true); // Reverse argument reduction\n\n      var sinh2_x,\n          d5 = new Ctor(5),\n          d16 = new Ctor(16),\n          d20 = new Ctor(20);\n\n      for (; k--;) {\n        sinh2_x = x.times(x);\n        x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\n      }\n    }\n\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return finalise(x, pr, rm, true);\n  };\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * tanh(x) = sinh(x) / cosh(x)\r\n   *\r\n   * tanh(0)         = 0\r\n   * tanh(-0)        = -0\r\n   * tanh(Infinity)  = 1\r\n   * tanh(-Infinity) = -1\r\n   * tanh(NaN)       = NaN\r\n   *\r\n   */\n\n\n  P.hyperbolicTangent = P.tanh = function () {\n    var pr,\n        rm,\n        x = this,\n        Ctor = x.constructor;\n    if (!x.isFinite()) return new Ctor(x.s);\n    if (x.isZero()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + 7;\n    Ctor.rounding = 1;\n    return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\n  };\n  /*\r\n   * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n   * this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [0, pi]\r\n   *\r\n   * acos(x) = pi/2 - asin(x)\r\n   *\r\n   * acos(0)       = pi/2\r\n   * acos(-0)      = pi/2\r\n   * acos(1)       = 0\r\n   * acos(-1)      = pi\r\n   * acos(1/2)     = pi/3\r\n   * acos(-1/2)    = 2*pi/3\r\n   * acos(|x| > 1) = NaN\r\n   * acos(NaN)     = NaN\r\n   *\r\n   */\n\n\n  P.inverseCosine = P.acos = function () {\n    var halfPi,\n        x = this,\n        Ctor = x.constructor,\n        k = x.abs().cmp(1),\n        pr = Ctor.precision,\n        rm = Ctor.rounding;\n\n    if (k !== -1) {\n      return k === 0 // |x| is 1\n      ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0) // |x| > 1 or x is NaN\n      : new Ctor(NaN);\n    }\n\n    if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5); // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\n\n    Ctor.precision = pr + 6;\n    Ctor.rounding = 1;\n    x = x.asin();\n    halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return halfPi.minus(x);\n  };\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [1, Infinity]\r\n   * Range: [0, Infinity]\r\n   *\r\n   * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n   *\r\n   * acosh(x < 1)     = NaN\r\n   * acosh(NaN)       = NaN\r\n   * acosh(Infinity)  = Infinity\r\n   * acosh(-Infinity) = NaN\r\n   * acosh(0)         = NaN\r\n   * acosh(-0)        = NaN\r\n   * acosh(1)         = 0\r\n   * acosh(-1)        = NaN\r\n   *\r\n   */\n\n\n  P.inverseHyperbolicCosine = P.acosh = function () {\n    var pr,\n        rm,\n        x = this,\n        Ctor = x.constructor;\n    if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\n    if (!x.isFinite()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\n    Ctor.rounding = 1;\n    external = false;\n    x = x.times(x).minus(1).sqrt().plus(x);\n    external = true;\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return x.ln();\n  };\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n   *\r\n   * asinh(NaN)       = NaN\r\n   * asinh(Infinity)  = Infinity\r\n   * asinh(-Infinity) = -Infinity\r\n   * asinh(0)         = 0\r\n   * asinh(-0)        = -0\r\n   *\r\n   */\n\n\n  P.inverseHyperbolicSine = P.asinh = function () {\n    var pr,\n        rm,\n        x = this,\n        Ctor = x.constructor;\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\n    Ctor.rounding = 1;\n    external = false;\n    x = x.times(x).plus(1).sqrt().plus(x);\n    external = true;\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return x.ln();\n  };\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n   *\r\n   * atanh(|x| > 1)   = NaN\r\n   * atanh(NaN)       = NaN\r\n   * atanh(Infinity)  = NaN\r\n   * atanh(-Infinity) = NaN\r\n   * atanh(0)         = 0\r\n   * atanh(-0)        = -0\r\n   * atanh(1)         = Infinity\r\n   * atanh(-1)        = -Infinity\r\n   *\r\n   */\n\n\n  P.inverseHyperbolicTangent = P.atanh = function () {\n    var pr,\n        rm,\n        wpr,\n        xsd,\n        x = this,\n        Ctor = x.constructor;\n    if (!x.isFinite()) return new Ctor(NaN);\n    if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    xsd = x.sd();\n    if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\n    Ctor.precision = wpr = xsd - x.e;\n    x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\n    Ctor.precision = pr + 4;\n    Ctor.rounding = 1;\n    x = x.ln();\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return x.times(0.5);\n  };\n  /*\r\n   * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n   *\r\n   * asin(0)       = 0\r\n   * asin(-0)      = -0\r\n   * asin(1/2)     = pi/6\r\n   * asin(-1/2)    = -pi/6\r\n   * asin(1)       = pi/2\r\n   * asin(-1)      = -pi/2\r\n   * asin(|x| > 1) = NaN\r\n   * asin(NaN)     = NaN\r\n   *\r\n   * TODO? Compare performance of Taylor series.\r\n   *\r\n   */\n\n\n  P.inverseSine = P.asin = function () {\n    var halfPi,\n        k,\n        pr,\n        rm,\n        x = this,\n        Ctor = x.constructor;\n    if (x.isZero()) return new Ctor(x);\n    k = x.abs().cmp(1);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n\n    if (k !== -1) {\n      // |x| is 1\n      if (k === 0) {\n        halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\n        halfPi.s = x.s;\n        return halfPi;\n      } // |x| > 1 or x is NaN\n\n\n      return new Ctor(NaN);\n    } // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\n\n\n    Ctor.precision = pr + 6;\n    Ctor.rounding = 1;\n    x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return x.times(2);\n  };\n  /*\r\n   * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n   *\r\n   * atan(0)         = 0\r\n   * atan(-0)        = -0\r\n   * atan(1)         = pi/4\r\n   * atan(-1)        = -pi/4\r\n   * atan(Infinity)  = pi/2\r\n   * atan(-Infinity) = -pi/2\r\n   * atan(NaN)       = NaN\r\n   *\r\n   */\n\n\n  P.inverseTangent = P.atan = function () {\n    var i,\n        j,\n        k,\n        n,\n        px,\n        t,\n        r,\n        wpr,\n        x2,\n        x = this,\n        Ctor = x.constructor,\n        pr = Ctor.precision,\n        rm = Ctor.rounding;\n\n    if (!x.isFinite()) {\n      if (!x.s) return new Ctor(NaN);\n\n      if (pr + 4 <= PI_PRECISION) {\n        r = getPi(Ctor, pr + 4, rm).times(0.5);\n        r.s = x.s;\n        return r;\n      }\n    } else if (x.isZero()) {\n      return new Ctor(x);\n    } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\n      r = getPi(Ctor, pr + 4, rm).times(0.25);\n      r.s = x.s;\n      return r;\n    }\n\n    Ctor.precision = wpr = pr + 10;\n    Ctor.rounding = 1; // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\n    // Argument reduction\n    // Ensure |x| < 0.42\n    // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\n\n    k = Math.min(28, wpr / LOG_BASE + 2 | 0);\n\n    for (i = k; i; --i) {\n      x = x.div(x.times(x).plus(1).sqrt().plus(1));\n    }\n\n    external = false;\n    j = Math.ceil(wpr / LOG_BASE);\n    n = 1;\n    x2 = x.times(x);\n    r = new Ctor(x);\n    px = x; // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\n\n    for (; i !== -1;) {\n      px = px.times(x2);\n      t = r.minus(px.div(n += 2));\n      px = px.times(x2);\n      r = t.plus(px.div(n += 2));\n      if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;) {\n        ;\n      }\n    }\n\n    if (k) r = r.times(2 << k - 1);\n    external = true;\n    return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\n  };\n  /*\r\n   * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n   *\r\n   */\n\n\n  P.isFinite = function () {\n    return !!this.d;\n  };\n  /*\r\n   * Return true if the value of this Decimal is an integer, otherwise return false.\r\n   *\r\n   */\n\n\n  P.isInteger = P.isInt = function () {\n    return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\n  };\n  /*\r\n   * Return true if the value of this Decimal is NaN, otherwise return false.\r\n   *\r\n   */\n\n\n  P.isNaN = function () {\n    return !this.s;\n  };\n  /*\r\n   * Return true if the value of this Decimal is negative, otherwise return false.\r\n   *\r\n   */\n\n\n  P.isNegative = P.isNeg = function () {\n    return this.s < 0;\n  };\n  /*\r\n   * Return true if the value of this Decimal is positive, otherwise return false.\r\n   *\r\n   */\n\n\n  P.isPositive = P.isPos = function () {\n    return this.s > 0;\n  };\n  /*\r\n   * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n   *\r\n   */\n\n\n  P.isZero = function () {\n    return !!this.d && this.d[0] === 0;\n  };\n  /*\r\n   * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n   *\r\n   */\n\n\n  P.lessThan = P.lt = function (y) {\n    return this.cmp(y) < 0;\n  };\n  /*\r\n   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n   *\r\n   */\n\n\n  P.lessThanOrEqualTo = P.lte = function (y) {\n    return this.cmp(y) < 1;\n  };\n  /*\r\n   * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * If no base is specified, return log[10](arg).\r\n   *\r\n   * log[base](arg) = ln(arg) / ln(base)\r\n   *\r\n   * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n   * otherwise:\r\n   *\r\n   * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n   * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n   * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n   *\r\n   * log[-b](a)       = NaN\r\n   * log[0](a)        = NaN\r\n   * log[1](a)        = NaN\r\n   * log[NaN](a)      = NaN\r\n   * log[Infinity](a) = NaN\r\n   * log[b](0)        = -Infinity\r\n   * log[b](-0)       = -Infinity\r\n   * log[b](-a)       = NaN\r\n   * log[b](1)        = 0\r\n   * log[b](Infinity) = Infinity\r\n   * log[b](NaN)      = NaN\r\n   *\r\n   * [base] {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\n\n\n  P.logarithm = P.log = function (base) {\n    var isBase10,\n        d,\n        denominator,\n        k,\n        inf,\n        num,\n        sd,\n        r,\n        arg = this,\n        Ctor = arg.constructor,\n        pr = Ctor.precision,\n        rm = Ctor.rounding,\n        guard = 5; // Default base is 10.\n\n    if (base == null) {\n      base = new Ctor(10);\n      isBase10 = true;\n    } else {\n      base = new Ctor(base);\n      d = base.d; // Return NaN if base is negative, or non-finite, or is 0 or 1.\n\n      if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\n      isBase10 = base.eq(10);\n    }\n\n    d = arg.d; // Is arg negative, non-finite, 0 or 1?\n\n    if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\n      return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\n    } // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\n    // integer power of 10.\n\n\n    if (isBase10) {\n      if (d.length > 1) {\n        inf = true;\n      } else {\n        for (k = d[0]; k % 10 === 0;) {\n          k /= 10;\n        }\n\n        inf = k !== 1;\n      }\n    }\n\n    external = false;\n    sd = pr + guard;\n    num = naturalLogarithm(arg, sd);\n    denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd); // The result will have 5 rounding digits.\n\n    r = divide(num, denominator, sd, 1); // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\n    // calculate 10 further digits.\n    //\n    // If the result is known to have an infinite decimal expansion, repeat this until it is clear\n    // that the result is above or below the boundary. Otherwise, if after calculating the 10\n    // further digits, the last 14 are nines, round up and assume the result is exact.\n    // Also assume the result is exact if the last 14 are zero.\n    //\n    // Example of a result that will be incorrectly rounded:\n    // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\n    // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\n    // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\n    // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\n    // place is still 2.6.\n\n    if (checkRoundingDigits(r.d, k = pr, rm)) {\n      do {\n        sd += 10;\n        num = naturalLogarithm(arg, sd);\n        denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\n        r = divide(num, denominator, sd, 1);\n\n        if (!inf) {\n          // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\n          if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\n            r = finalise(r, pr + 1, 0);\n          }\n\n          break;\n        }\n      } while (checkRoundingDigits(r.d, k += 10, rm));\n    }\n\n    external = true;\n    return finalise(r, pr, rm);\n  };\n  /*\r\n   * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n  P.max = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, 'lt');\r\n  };\r\n   */\n\n  /*\r\n   * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n  P.min = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, 'gt');\r\n  };\r\n   */\n\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\n\n\n  P.minus = P.sub = function (y) {\n    var d,\n        e,\n        i,\n        j,\n        k,\n        len,\n        pr,\n        rm,\n        xd,\n        xe,\n        xLTy,\n        yd,\n        x = this,\n        Ctor = x.constructor;\n    y = new Ctor(y); // If either is not finite...\n\n    if (!x.d || !y.d) {\n      // Return NaN if either is NaN.\n      if (!x.s || !y.s) y = new Ctor(NaN); // Return y negated if x is finite and y is ±Infinity.\n      else if (x.d) y.s = -y.s; // Return x if y is finite and x is ±Infinity.\n      // Return x if both are ±Infinity with different signs.\n      // Return NaN if both are ±Infinity with the same sign.\n      else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\n      return y;\n    } // If signs differ...\n\n\n    if (x.s != y.s) {\n      y.s = -y.s;\n      return x.plus(y);\n    }\n\n    xd = x.d;\n    yd = y.d;\n    pr = Ctor.precision;\n    rm = Ctor.rounding; // If either is zero...\n\n    if (!xd[0] || !yd[0]) {\n      // Return y negated if x is zero and y is non-zero.\n      if (yd[0]) y.s = -y.s; // Return x if y is zero and x is non-zero.\n      else if (xd[0]) y = new Ctor(x); // Return zero if both are zero.\n      // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\n      else return new Ctor(rm === 3 ? -0 : 0);\n      return external ? finalise(y, pr, rm) : y;\n    } // x and y are finite, non-zero numbers with the same sign.\n    // Calculate base 1e7 exponents.\n\n\n    e = mathfloor(y.e / LOG_BASE);\n    xe = mathfloor(x.e / LOG_BASE);\n    xd = xd.slice();\n    k = xe - e; // If base 1e7 exponents differ...\n\n    if (k) {\n      xLTy = k < 0;\n\n      if (xLTy) {\n        d = xd;\n        k = -k;\n        len = yd.length;\n      } else {\n        d = yd;\n        e = xe;\n        len = xd.length;\n      } // Numbers with massively different exponents would result in a very high number of\n      // zeros needing to be prepended, but this can be avoided while still ensuring correct\n      // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\n\n\n      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\n\n      if (k > i) {\n        k = i;\n        d.length = 1;\n      } // Prepend zeros to equalise exponents.\n\n\n      d.reverse();\n\n      for (i = k; i--;) {\n        d.push(0);\n      }\n\n      d.reverse(); // Base 1e7 exponents equal.\n    } else {\n      // Check digits to determine which is the bigger number.\n      i = xd.length;\n      len = yd.length;\n      xLTy = i < len;\n      if (xLTy) len = i;\n\n      for (i = 0; i < len; i++) {\n        if (xd[i] != yd[i]) {\n          xLTy = xd[i] < yd[i];\n          break;\n        }\n      }\n\n      k = 0;\n    }\n\n    if (xLTy) {\n      d = xd;\n      xd = yd;\n      yd = d;\n      y.s = -y.s;\n    }\n\n    len = xd.length; // Append zeros to `xd` if shorter.\n    // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\n\n    for (i = yd.length - len; i > 0; --i) {\n      xd[len++] = 0;\n    } // Subtract yd from xd.\n\n\n    for (i = yd.length; i > k;) {\n      if (xd[--i] < yd[i]) {\n        for (j = i; j && xd[--j] === 0;) {\n          xd[j] = BASE - 1;\n        }\n\n        --xd[j];\n        xd[i] += BASE;\n      }\n\n      xd[i] -= yd[i];\n    } // Remove trailing zeros.\n\n\n    for (; xd[--len] === 0;) {\n      xd.pop();\n    } // Remove leading zeros and adjust exponent accordingly.\n\n\n    for (; xd[0] === 0; xd.shift()) {\n      --e;\n    } // Zero?\n\n\n    if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\n    y.d = xd;\n    y.e = getBase10Exponent(xd, e);\n    return external ? finalise(y, pr, rm) : y;\n  };\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * The result depends on the modulo mode.\r\n   *\r\n   */\n\n\n  P.modulo = P.mod = function (y) {\n    var q,\n        x = this,\n        Ctor = x.constructor;\n    y = new Ctor(y); // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\n\n    if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN); // Return x if y is ±Infinity or x is ±0.\n\n    if (!y.d || x.d && !x.d[0]) {\n      return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\n    } // Prevent rounding of intermediate calculations.\n\n\n    external = false;\n\n    if (Ctor.modulo == 9) {\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\n      // result = x - q * y    where  0 <= result < abs(y)\n      q = divide(x, y.abs(), 0, 3, 1);\n      q.s *= y.s;\n    } else {\n      q = divide(x, y, 0, Ctor.modulo, 1);\n    }\n\n    q = q.times(y);\n    external = true;\n    return x.minus(q);\n  };\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n   * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\n\n\n  P.naturalExponential = P.exp = function () {\n    return naturalExponential(this);\n  };\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\n\n\n  P.naturalLogarithm = P.ln = function () {\n    return naturalLogarithm(this);\n  };\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n   * -1.\r\n   *\r\n   */\n\n\n  P.negated = P.neg = function () {\n    var x = new this.constructor(this);\n    x.s = -x.s;\n    return finalise(x);\n  };\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\n\n\n  P.plus = P.add = function (y) {\n    var carry,\n        d,\n        e,\n        i,\n        k,\n        len,\n        pr,\n        rm,\n        xd,\n        yd,\n        x = this,\n        Ctor = x.constructor;\n    y = new Ctor(y); // If either is not finite...\n\n    if (!x.d || !y.d) {\n      // Return NaN if either is NaN.\n      if (!x.s || !y.s) y = new Ctor(NaN); // Return x if y is finite and x is ±Infinity.\n      // Return x if both are ±Infinity with the same sign.\n      // Return NaN if both are ±Infinity with different signs.\n      // Return y if x is finite and y is ±Infinity.\n      else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\n      return y;\n    } // If signs differ...\n\n\n    if (x.s != y.s) {\n      y.s = -y.s;\n      return x.minus(y);\n    }\n\n    xd = x.d;\n    yd = y.d;\n    pr = Ctor.precision;\n    rm = Ctor.rounding; // If either is zero...\n\n    if (!xd[0] || !yd[0]) {\n      // Return x if y is zero.\n      // Return y if y is non-zero.\n      if (!yd[0]) y = new Ctor(x);\n      return external ? finalise(y, pr, rm) : y;\n    } // x and y are finite, non-zero numbers with the same sign.\n    // Calculate base 1e7 exponents.\n\n\n    k = mathfloor(x.e / LOG_BASE);\n    e = mathfloor(y.e / LOG_BASE);\n    xd = xd.slice();\n    i = k - e; // If base 1e7 exponents differ...\n\n    if (i) {\n      if (i < 0) {\n        d = xd;\n        i = -i;\n        len = yd.length;\n      } else {\n        d = yd;\n        e = k;\n        len = xd.length;\n      } // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\n\n\n      k = Math.ceil(pr / LOG_BASE);\n      len = k > len ? k + 1 : len + 1;\n\n      if (i > len) {\n        i = len;\n        d.length = 1;\n      } // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\n\n\n      d.reverse();\n\n      for (; i--;) {\n        d.push(0);\n      }\n\n      d.reverse();\n    }\n\n    len = xd.length;\n    i = yd.length; // If yd is longer than xd, swap xd and yd so xd points to the longer array.\n\n    if (len - i < 0) {\n      i = len;\n      d = yd;\n      yd = xd;\n      xd = d;\n    } // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\n\n\n    for (carry = 0; i;) {\n      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\n      xd[i] %= BASE;\n    }\n\n    if (carry) {\n      xd.unshift(carry);\n      ++e;\n    } // Remove trailing zeros.\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n\n\n    for (len = xd.length; xd[--len] == 0;) {\n      xd.pop();\n    }\n\n    y.d = xd;\n    y.e = getBase10Exponent(xd, e);\n    return external ? finalise(y, pr, rm) : y;\n  };\n  /*\r\n   * Return the number of significant digits of the value of this Decimal.\r\n   *\r\n   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n   *\r\n   */\n\n\n  P.precision = P.sd = function (z) {\n    var k,\n        x = this;\n    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\n\n    if (x.d) {\n      k = getPrecision(x.d);\n      if (z && x.e + 1 > k) k = x.e + 1;\n    } else {\n      k = NaN;\n    }\n\n    return k;\n  };\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n   * rounding mode `rounding`.\r\n   *\r\n   */\n\n\n  P.round = function () {\n    var x = this,\n        Ctor = x.constructor;\n    return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\n  };\n  /*\r\n   * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   *\r\n   * sin(0)         = 0\r\n   * sin(-0)        = -0\r\n   * sin(Infinity)  = NaN\r\n   * sin(-Infinity) = NaN\r\n   * sin(NaN)       = NaN\r\n   *\r\n   */\n\n\n  P.sine = P.sin = function () {\n    var pr,\n        rm,\n        x = this,\n        Ctor = x.constructor;\n    if (!x.isFinite()) return new Ctor(NaN);\n    if (x.isZero()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\n    Ctor.rounding = 1;\n    x = sine(Ctor, toLessThanHalfPi(Ctor, x));\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\n  };\n  /*\r\n   * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N)  =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I)  =  I\r\n   *  sqrt(0)  =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   */\n\n\n  P.squareRoot = P.sqrt = function () {\n    var m,\n        n,\n        sd,\n        r,\n        rep,\n        t,\n        x = this,\n        d = x.d,\n        e = x.e,\n        s = x.s,\n        Ctor = x.constructor; // Negative/NaN/Infinity/zero?\n\n    if (s !== 1 || !d || !d[0]) {\n      return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\n    }\n\n    external = false; // Initial estimate.\n\n    s = Math.sqrt(+x); // Math.sqrt underflow/overflow?\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n\n    if (s == 0 || s == 1 / 0) {\n      n = digitsToString(d);\n      if ((n.length + e) % 2 == 0) n += '0';\n      s = Math.sqrt(n);\n      e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\n\n      if (s == 1 / 0) {\n        n = '5e' + e;\n      } else {\n        n = s.toExponential();\n        n = n.slice(0, n.indexOf('e') + 1) + e;\n      }\n\n      r = new Ctor(n);\n    } else {\n      r = new Ctor(s.toString());\n    }\n\n    sd = (e = Ctor.precision) + 3; // Newton-Raphson iteration.\n\n    for (;;) {\n      t = r;\n      r = t.plus(divide(x, t, sd + 2, 1)).times(0.5); // TODO? Replace with for-loop and checkRoundingDigits.\n\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\n        n = n.slice(sd - 3, sd + 1); // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\n        // 4999, i.e. approaching a rounding boundary, continue the iteration.\n\n        if (n == '9999' || !rep && n == '4999') {\n          // On the first iteration only, check to see if rounding up gives the exact result as the\n          // nines may infinitely repeat.\n          if (!rep) {\n            finalise(t, e + 1, 0);\n\n            if (t.times(t).eq(x)) {\n              r = t;\n              break;\n            }\n          }\n\n          sd += 4;\n          rep = 1;\n        } else {\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\n          // If not, then there are further digits and m will be truthy.\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n            // Truncate to the first rounding digit.\n            finalise(r, e + 1, 1);\n            m = !r.times(r).eq(x);\n          }\n\n          break;\n        }\n      }\n    }\n\n    external = true;\n    return finalise(r, e, Ctor.rounding, m);\n  };\n  /*\r\n   * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * tan(0)         = 0\r\n   * tan(-0)        = -0\r\n   * tan(Infinity)  = NaN\r\n   * tan(-Infinity) = NaN\r\n   * tan(NaN)       = NaN\r\n   *\r\n   */\n\n\n  P.tangent = P.tan = function () {\n    var pr,\n        rm,\n        x = this,\n        Ctor = x.constructor;\n    if (!x.isFinite()) return new Ctor(NaN);\n    if (x.isZero()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + 10;\n    Ctor.rounding = 1;\n    x = x.sin();\n    x.s = 1;\n    x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\n  };\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   */\n\n\n  P.times = P.mul = function (y) {\n    var carry,\n        e,\n        i,\n        k,\n        r,\n        rL,\n        t,\n        xdL,\n        ydL,\n        x = this,\n        Ctor = x.constructor,\n        xd = x.d,\n        yd = (y = new Ctor(y)).d;\n    y.s *= x.s; // If either is NaN, ±Infinity or ±0...\n\n    if (!xd || !xd[0] || !yd || !yd[0]) {\n      return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd // Return NaN if either is NaN.\n      // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\n      ? NaN // Return ±Infinity if either is ±Infinity.\n      // Return ±0 if either is ±0.\n      : !xd || !yd ? y.s / 0 : y.s * 0);\n    }\n\n    e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\n    xdL = xd.length;\n    ydL = yd.length; // Ensure xd points to the longer array.\n\n    if (xdL < ydL) {\n      r = xd;\n      xd = yd;\n      yd = r;\n      rL = xdL;\n      xdL = ydL;\n      ydL = rL;\n    } // Initialise the result array with zeros.\n\n\n    r = [];\n    rL = xdL + ydL;\n\n    for (i = rL; i--;) {\n      r.push(0);\n    } // Multiply!\n\n\n    for (i = ydL; --i >= 0;) {\n      carry = 0;\n\n      for (k = xdL + i; k > i;) {\n        t = r[k] + yd[i] * xd[k - i - 1] + carry;\n        r[k--] = t % BASE | 0;\n        carry = t / BASE | 0;\n      }\n\n      r[k] = (r[k] + carry) % BASE | 0;\n    } // Remove trailing zeros.\n\n\n    for (; !r[--rL];) {\n      r.pop();\n    }\n\n    if (carry) ++e;else r.shift();\n    y.d = r;\n    y.e = getBase10Exponent(r, e);\n    return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\n  };\n  /*\r\n   * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\n\n\n  P.toBinary = function (sd, rm) {\n    return toStringBinary(this, 2, sd, rm);\n  };\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n   *\r\n   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\n\n\n  P.toDecimalPlaces = P.toDP = function (dp, rm) {\n    var x = this,\n        Ctor = x.constructor;\n    x = new Ctor(x);\n    if (dp === void 0) return x;\n    checkInt32(dp, 0, MAX_DIGITS);\n    if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);\n    return finalise(x, dp + x.e + 1, rm);\n  };\n  /*\r\n   * Return a string representing the value of this Decimal in exponential notation rounded to\r\n   * `dp` fixed decimal places using rounding mode `rounding`.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\n\n\n  P.toExponential = function (dp, rm) {\n    var str,\n        x = this,\n        Ctor = x.constructor;\n\n    if (dp === void 0) {\n      str = finiteToString(x, true);\n    } else {\n      checkInt32(dp, 0, MAX_DIGITS);\n      if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);\n      x = finalise(new Ctor(x), dp + 1, rm);\n      str = finiteToString(x, true, dp + 1);\n    }\n\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\n  };\n  /*\r\n   * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n   * omitted.\r\n   *\r\n   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   * (-0).toFixed(3) is '0.000'.\r\n   * (-0.5).toFixed(0) is '-0'.\r\n   *\r\n   */\n\n\n  P.toFixed = function (dp, rm) {\n    var str,\n        y,\n        x = this,\n        Ctor = x.constructor;\n\n    if (dp === void 0) {\n      str = finiteToString(x);\n    } else {\n      checkInt32(dp, 0, MAX_DIGITS);\n      if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);\n      y = finalise(new Ctor(x), dp + x.e + 1, rm);\n      str = finiteToString(y, false, dp + y.e + 1);\n    } // To determine whether to add the minus sign look at the value before it was rounded,\n    // i.e. look at `x` rather than `y`.\n\n\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\n  };\n  /*\r\n   * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n   * numerator and an integer denominator.\r\n   *\r\n   * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n   * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n   * value necessary to represent the number exactly.\r\n   *\r\n   * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n   *\r\n   */\n\n\n  P.toFraction = function (maxD) {\n    var d,\n        d0,\n        d1,\n        d2,\n        e,\n        k,\n        n,\n        n0,\n        n1,\n        pr,\n        q,\n        r,\n        x = this,\n        xd = x.d,\n        Ctor = x.constructor;\n    if (!xd) return new Ctor(x);\n    n1 = d0 = new Ctor(1);\n    d1 = n0 = new Ctor(0);\n    d = new Ctor(d1);\n    e = d.e = getPrecision(xd) - x.e - 1;\n    k = e % LOG_BASE;\n    d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\n\n    if (maxD == null) {\n      // d is 10**e, the minimum max-denominator needed.\n      maxD = e > 0 ? d : n1;\n    } else {\n      n = new Ctor(maxD);\n      if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\n      maxD = n.gt(d) ? e > 0 ? d : n1 : n;\n    }\n\n    external = false;\n    n = new Ctor(digitsToString(xd));\n    pr = Ctor.precision;\n    Ctor.precision = e = xd.length * LOG_BASE * 2;\n\n    for (;;) {\n      q = divide(n, d, 0, 1, 1);\n      d2 = d0.plus(q.times(d1));\n      if (d2.cmp(maxD) == 1) break;\n      d0 = d1;\n      d1 = d2;\n      d2 = n1;\n      n1 = n0.plus(q.times(d2));\n      n0 = d2;\n      d2 = d;\n      d = n.minus(q.times(d2));\n      n = d2;\n    }\n\n    d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\n    n0 = n0.plus(d2.times(n1));\n    d0 = d0.plus(d2.times(d1));\n    n0.s = n1.s = x.s; // Determine which fraction is closer to x, n0/d0 or n1/d1?\n\n    r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\n    Ctor.precision = pr;\n    external = true;\n    return r;\n  };\n  /*\r\n   * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\n\n\n  P.toHexadecimal = P.toHex = function (sd, rm) {\n    return toStringBinary(this, 16, sd, rm);\n  };\n  /*\r\n   * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding\r\n   * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.\r\n   *\r\n   * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n   * or `y` is NaN, in which case the return value will be also be NaN.\r\n   *\r\n   * The return value is not affected by the value of `precision`.\r\n   *\r\n   * y {number|string|Decimal} The magnitude to round to a multiple of.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toNearest() rounding mode not an integer: {rm}'\r\n   * 'toNearest() rounding mode out of range: {rm}'\r\n   *\r\n   */\n\n\n  P.toNearest = function (y, rm) {\n    var x = this,\n        Ctor = x.constructor;\n    x = new Ctor(x);\n\n    if (y == null) {\n      // If x is not finite, return x.\n      if (!x.d) return x;\n      y = new Ctor(1);\n      rm = Ctor.rounding;\n    } else {\n      y = new Ctor(y);\n\n      if (rm === void 0) {\n        rm = Ctor.rounding;\n      } else {\n        checkInt32(rm, 0, 8);\n      } // If x is not finite, return x if y is not NaN, else NaN.\n\n\n      if (!x.d) return y.s ? x : y; // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\n\n      if (!y.d) {\n        if (y.s) y.s = x.s;\n        return y;\n      }\n    } // If y is not zero, calculate the nearest multiple of y to x.\n\n\n    if (y.d[0]) {\n      external = false;\n      x = divide(x, y, 0, rm, 1).times(y);\n      external = true;\n      finalise(x); // If y is zero, return zero with the sign of x.\n    } else {\n      y.s = x.s;\n      x = y;\n    }\n\n    return x;\n  };\n  /*\r\n   * Return the value of this Decimal converted to a number primitive.\r\n   * Zero keeps its sign.\r\n   *\r\n   */\n\n\n  P.toNumber = function () {\n    return +this;\n  };\n  /*\r\n   * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\n\n\n  P.toOctal = function (sd, rm) {\n    return toStringBinary(this, 8, sd, rm);\n  };\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n   * to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * ECMAScript compliant.\r\n   *\r\n   *   pow(x, NaN)                           = NaN\r\n   *   pow(x, ±0)                            = 1\r\n     *   pow(NaN, non-zero)                    = NaN\r\n   *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n   *   pow(abs(x) > 1, -Infinity)            = +0\r\n   *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n   *   pow(abs(x) < 1, +Infinity)            = +0\r\n   *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n   *   pow(+Infinity, y > 0)                 = +Infinity\r\n   *   pow(+Infinity, y < 0)                 = +0\r\n   *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n   *   pow(-Infinity, even integer > 0)      = +Infinity\r\n   *   pow(-Infinity, odd integer < 0)       = -0\r\n   *   pow(-Infinity, even integer < 0)      = +0\r\n   *   pow(+0, y > 0)                        = +0\r\n   *   pow(+0, y < 0)                        = +Infinity\r\n   *   pow(-0, odd integer > 0)              = -0\r\n   *   pow(-0, even integer > 0)             = +0\r\n   *   pow(-0, odd integer < 0)              = -Infinity\r\n   *   pow(-0, even integer < 0)             = +Infinity\r\n   *   pow(finite x < 0, finite non-integer) = NaN\r\n   *\r\n   * For non-integer or very large exponents pow(x, y) is calculated using\r\n   *\r\n   *   x^y = exp(y*ln(x))\r\n   *\r\n   * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n   * probability of an incorrectly rounded result\r\n   * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n   * i.e. 1 in 250,000,000,000,000\r\n   *\r\n   * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n   *\r\n   * y {number|string|Decimal} The power to which to raise this Decimal.\r\n   *\r\n   */\n\n\n  P.toPower = P.pow = function (y) {\n    var e,\n        k,\n        pr,\n        r,\n        rm,\n        s,\n        x = this,\n        Ctor = x.constructor,\n        yn = +(y = new Ctor(y)); // Either ±Infinity, NaN or ±0?\n\n    if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\n    x = new Ctor(x);\n    if (x.eq(1)) return x;\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    if (y.eq(1)) return finalise(x, pr, rm); // y exponent\n\n    e = mathfloor(y.e / LOG_BASE); // If y is a small integer use the 'exponentiation by squaring' algorithm.\n\n    if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\n      r = intPow(Ctor, x, k, pr);\n      return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\n    }\n\n    s = x.s; // if x is negative\n\n    if (s < 0) {\n      // if y is not an integer\n      if (e < y.d.length - 1) return new Ctor(NaN); // Result is positive if x is negative and the last digit of integer y is even.\n\n      if ((y.d[e] & 1) == 0) s = 1; // if x.eq(-1)\n\n      if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\n        x.s = s;\n        return x;\n      }\n    } // Estimate result exponent.\n    // x^y = 10^e,  where e = y * log10(x)\n    // log10(x) = log10(x_significand) + x_exponent\n    // log10(x_significand) = ln(x_significand) / ln(10)\n\n\n    k = mathpow(+x, yn);\n    e = k == 0 || !isFinite(k) ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1)) : new Ctor(k + '').e; // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\n    // Overflow/underflow?\n\n    if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\n    external = false;\n    Ctor.rounding = x.s = 1; // Estimate the extra guard digits needed to ensure five correct rounding digits from\n    // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\n    // new Decimal(2.32456).pow('2087987436534566.46411')\n    // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\n\n    k = Math.min(12, (e + '').length); // r = x^y = exp(y*ln(x))\n\n    r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr); // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\n\n    if (r.d) {\n      // Truncate to the required precision plus five rounding digits.\n      r = finalise(r, pr + 5, 1); // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\n      // the result.\n\n      if (checkRoundingDigits(r.d, pr, rm)) {\n        e = pr + 10; // Truncate to the increased precision plus five rounding digits.\n\n        r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1); // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\n\n        if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\n          r = finalise(r, pr + 1, 0);\n        }\n      }\n    }\n\n    r.s = s;\n    external = true;\n    Ctor.rounding = rm;\n    return finalise(r, pr, rm);\n  };\n  /*\r\n   * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\n\n\n  P.toPrecision = function (sd, rm) {\n    var str,\n        x = this,\n        Ctor = x.constructor;\n\n    if (sd === void 0) {\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\n    } else {\n      checkInt32(sd, 1, MAX_DIGITS);\n      if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);\n      x = finalise(new Ctor(x), sd, rm);\n      str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\n    }\n\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\n  };\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n   * omitted.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toSD() digits out of range: {sd}'\r\n   * 'toSD() digits not an integer: {sd}'\r\n   * 'toSD() rounding mode not an integer: {rm}'\r\n   * 'toSD() rounding mode out of range: {rm}'\r\n   *\r\n   */\n\n\n  P.toSignificantDigits = P.toSD = function (sd, rm) {\n    var x = this,\n        Ctor = x.constructor;\n\n    if (sd === void 0) {\n      sd = Ctor.precision;\n      rm = Ctor.rounding;\n    } else {\n      checkInt32(sd, 1, MAX_DIGITS);\n      if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);\n    }\n\n    return finalise(new Ctor(x), sd, rm);\n  };\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   *\r\n   * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n   *\r\n   */\n\n\n  P.toString = function () {\n    var x = this,\n        Ctor = x.constructor,\n        str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\n  };\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n   *\r\n   */\n\n\n  P.truncated = P.trunc = function () {\n    return finalise(new this.constructor(this), this.e + 1, 1);\n  };\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   * Unlike `toString`, negative zero will include the minus sign.\r\n   *\r\n   */\n\n\n  P.valueOf = P.toJSON = function () {\n    var x = this,\n        Ctor = x.constructor,\n        str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\n    return x.isNeg() ? '-' + str : str;\n  }; // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\n\n  /*\r\n   *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n   *                           finiteToString, naturalExponential, naturalLogarithm\r\n   *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n   *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n   *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n   *  convertBase              toStringBinary, parseOther\r\n   *  cos                      P.cos\r\n   *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n   *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n   *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n   *                           taylorSeries, atan2, parseOther\r\n   *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n   *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n   *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n   *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n   *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n   *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n   *                           naturalLogarithm, ceil, floor, round, trunc\r\n   *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n   *                           toStringBinary\r\n   *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n   *  getLn10                  P.logarithm, naturalLogarithm\r\n   *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n   *  getPrecision             P.precision, P.toFraction\r\n   *  getZeroString            digitsToString, finiteToString\r\n   *  intPow                   P.toPower, parseOther\r\n   *  isOdd                    toLessThanHalfPi\r\n   *  maxOrMin                 max, min\r\n   *  naturalExponential       P.naturalExponential, P.toPower\r\n   *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n   *                           P.toPower, naturalExponential\r\n   *  nonFiniteToString        finiteToString, toStringBinary\r\n   *  parseDecimal             Decimal\r\n   *  parseOther               Decimal\r\n   *  sin                      P.sin\r\n   *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n   *  toLessThanHalfPi         P.cos, P.sin\r\n   *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n   *  truncate                 intPow\r\n   *\r\n   *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n   *                           naturalLogarithm, config, parseOther, random, Decimal\r\n   */\n\n\n  function digitsToString(d) {\n    var i,\n        k,\n        ws,\n        indexOfLastWord = d.length - 1,\n        str = '',\n        w = d[0];\n\n    if (indexOfLastWord > 0) {\n      str += w;\n\n      for (i = 1; i < indexOfLastWord; i++) {\n        ws = d[i] + '';\n        k = LOG_BASE - ws.length;\n        if (k) str += getZeroString(k);\n        str += ws;\n      }\n\n      w = d[i];\n      ws = w + '';\n      k = LOG_BASE - ws.length;\n      if (k) str += getZeroString(k);\n    } else if (w === 0) {\n      return '0';\n    } // Remove trailing zeros of last w.\n\n\n    for (; w % 10 === 0;) {\n      w /= 10;\n    }\n\n    return str + w;\n  }\n\n  function checkInt32(i, min, max) {\n    if (i !== ~~i || i < min || i > max) {\n      throw Error(invalidArgument + i);\n    }\n  }\n  /*\r\n   * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n   * `repeating == null` if caller is `log` or `pow`,\r\n   * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n   */\n\n\n  function checkRoundingDigits(d, i, rm, repeating) {\n    var di, k, r, rd; // Get the length of the first word of the array d.\n\n    for (k = d[0]; k >= 10; k /= 10) {\n      --i;\n    } // Is the rounding digit in the first word of d?\n\n\n    if (--i < 0) {\n      i += LOG_BASE;\n      di = 0;\n    } else {\n      di = Math.ceil((i + 1) / LOG_BASE);\n      i %= LOG_BASE;\n    } // i is the index (0 - 6) of the rounding digit.\n    // E.g. if within the word 3487563 the first rounding digit is 5,\n    // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\n\n\n    k = mathpow(10, LOG_BASE - i);\n    rd = d[di] % k | 0;\n\n    if (repeating == null) {\n      if (i < 3) {\n        if (i == 0) rd = rd / 100 | 0;else if (i == 1) rd = rd / 10 | 0;\n        r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\n      } else {\n        r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 || (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\n      }\n    } else {\n      if (i < 4) {\n        if (i == 0) rd = rd / 1000 | 0;else if (i == 1) rd = rd / 100 | 0;else if (i == 2) rd = rd / 10 | 0;\n        r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\n      } else {\n        r = ((repeating || rm < 4) && rd + 1 == k || !repeating && rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\n      }\n    }\n\n    return r;\n  } // Convert string of `baseIn` to an array of numbers of `baseOut`.\n  // Eg. convertBase('255', 10, 16) returns [15, 15].\n  // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\n\n\n  function convertBase(str, baseIn, baseOut) {\n    var j,\n        arr = [0],\n        arrL,\n        i = 0,\n        strL = str.length;\n\n    for (; i < strL;) {\n      for (arrL = arr.length; arrL--;) {\n        arr[arrL] *= baseIn;\n      }\n\n      arr[0] += NUMERALS.indexOf(str.charAt(i++));\n\n      for (j = 0; j < arr.length; j++) {\n        if (arr[j] > baseOut - 1) {\n          if (arr[j + 1] === void 0) arr[j + 1] = 0;\n          arr[j + 1] += arr[j] / baseOut | 0;\n          arr[j] %= baseOut;\n        }\n      }\n    }\n\n    return arr.reverse();\n  }\n  /*\r\n   * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */\n\n\n  function cosine(Ctor, x) {\n    var k, len, y;\n    if (x.isZero()) return x; // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\n    // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\n    // Estimate the optimum number of times to use the argument reduction.\n\n    len = x.d.length;\n\n    if (len < 32) {\n      k = Math.ceil(len / 3);\n      y = (1 / tinyPow(4, k)).toString();\n    } else {\n      k = 16;\n      y = '2.3283064365386962890625e-10';\n    }\n\n    Ctor.precision += k;\n    x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1)); // Reverse argument reduction\n\n    for (var i = k; i--;) {\n      var cos2x = x.times(x);\n      x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\n    }\n\n    Ctor.precision -= k;\n    return x;\n  }\n  /*\r\n   * Perform division in the specified base.\r\n   */\n\n\n  var divide = function () {\n    // Assumes non-zero x and k, and hence non-zero result.\n    function multiplyInteger(x, k, base) {\n      var temp,\n          carry = 0,\n          i = x.length;\n\n      for (x = x.slice(); i--;) {\n        temp = x[i] * k + carry;\n        x[i] = temp % base | 0;\n        carry = temp / base | 0;\n      }\n\n      if (carry) x.unshift(carry);\n      return x;\n    }\n\n    function compare(a, b, aL, bL) {\n      var i, r;\n\n      if (aL != bL) {\n        r = aL > bL ? 1 : -1;\n      } else {\n        for (i = r = 0; i < aL; i++) {\n          if (a[i] != b[i]) {\n            r = a[i] > b[i] ? 1 : -1;\n            break;\n          }\n        }\n      }\n\n      return r;\n    }\n\n    function subtract(a, b, aL, base) {\n      var i = 0; // Subtract b from a.\n\n      for (; aL--;) {\n        a[aL] -= i;\n        i = a[aL] < b[aL] ? 1 : 0;\n        a[aL] = i * base + a[aL] - b[aL];\n      } // Remove leading zeros.\n\n\n      for (; !a[0] && a.length > 1;) {\n        a.shift();\n      }\n    }\n\n    return function (x, y, pr, rm, dp, base) {\n      var cmp,\n          e,\n          i,\n          k,\n          logBase,\n          more,\n          prod,\n          prodL,\n          q,\n          qd,\n          rem,\n          remL,\n          rem0,\n          sd,\n          t,\n          xi,\n          xL,\n          yd0,\n          yL,\n          yz,\n          Ctor = x.constructor,\n          sign = x.s == y.s ? 1 : -1,\n          xd = x.d,\n          yd = y.d; // Either NaN, Infinity or 0?\n\n      if (!xd || !xd[0] || !yd || !yd[0]) {\n        return new Ctor( // Return NaN if either NaN, or both Infinity or 0.\n        !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN : // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\n        xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\n      }\n\n      if (base) {\n        logBase = 1;\n        e = x.e - y.e;\n      } else {\n        base = BASE;\n        logBase = LOG_BASE;\n        e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\n      }\n\n      yL = yd.length;\n      xL = xd.length;\n      q = new Ctor(sign);\n      qd = q.d = []; // Result exponent may be one less than e.\n      // The digit array of a Decimal from toStringBinary may have trailing zeros.\n\n      for (i = 0; yd[i] == (xd[i] || 0); i++) {\n        ;\n      }\n\n      if (yd[i] > (xd[i] || 0)) e--;\n\n      if (pr == null) {\n        sd = pr = Ctor.precision;\n        rm = Ctor.rounding;\n      } else if (dp) {\n        sd = pr + (x.e - y.e) + 1;\n      } else {\n        sd = pr;\n      }\n\n      if (sd < 0) {\n        qd.push(1);\n        more = true;\n      } else {\n        // Convert precision in number of base 10 digits to base 1e7 digits.\n        sd = sd / logBase + 2 | 0;\n        i = 0; // divisor < 1e7\n\n        if (yL == 1) {\n          k = 0;\n          yd = yd[0];\n          sd++; // k is the carry.\n\n          for (; (i < xL || k) && sd--; i++) {\n            t = k * base + (xd[i] || 0);\n            qd[i] = t / yd | 0;\n            k = t % yd | 0;\n          }\n\n          more = k || i < xL; // divisor >= 1e7\n        } else {\n          // Normalise xd and yd so highest order digit of yd is >= base/2\n          k = base / (yd[0] + 1) | 0;\n\n          if (k > 1) {\n            yd = multiplyInteger(yd, k, base);\n            xd = multiplyInteger(xd, k, base);\n            yL = yd.length;\n            xL = xd.length;\n          }\n\n          xi = yL;\n          rem = xd.slice(0, yL);\n          remL = rem.length; // Add zeros to make remainder as long as divisor.\n\n          for (; remL < yL;) {\n            rem[remL++] = 0;\n          }\n\n          yz = yd.slice();\n          yz.unshift(0);\n          yd0 = yd[0];\n          if (yd[1] >= base / 2) ++yd0;\n\n          do {\n            k = 0; // Compare divisor and remainder.\n\n            cmp = compare(yd, rem, yL, remL); // If divisor < remainder.\n\n            if (cmp < 0) {\n              // Calculate trial digit, k.\n              rem0 = rem[0];\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0); // k will be how many times the divisor goes into the current remainder.\n\n              k = rem0 / yd0 | 0; //  Algorithm:\n              //  1. product = divisor * trial digit (k)\n              //  2. if product > remainder: product -= divisor, k--\n              //  3. remainder -= product\n              //  4. if product was < remainder at 2:\n              //    5. compare new remainder and divisor\n              //    6. If remainder > divisor: remainder -= divisor, k++\n\n              if (k > 1) {\n                if (k >= base) k = base - 1; // product = divisor * trial digit.\n\n                prod = multiplyInteger(yd, k, base);\n                prodL = prod.length;\n                remL = rem.length; // Compare product and remainder.\n\n                cmp = compare(prod, rem, prodL, remL); // product > remainder.\n\n                if (cmp == 1) {\n                  k--; // Subtract divisor from product.\n\n                  subtract(prod, yL < prodL ? yz : yd, prodL, base);\n                }\n              } else {\n                // cmp is -1.\n                // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\n                // to avoid it. If k is 1 there is a need to compare yd and rem again below.\n                if (k == 0) cmp = k = 1;\n                prod = yd.slice();\n              }\n\n              prodL = prod.length;\n              if (prodL < remL) prod.unshift(0); // Subtract product from remainder.\n\n              subtract(rem, prod, remL, base); // If product was < previous remainder.\n\n              if (cmp == -1) {\n                remL = rem.length; // Compare divisor and new remainder.\n\n                cmp = compare(yd, rem, yL, remL); // If divisor < new remainder, subtract divisor from remainder.\n\n                if (cmp < 1) {\n                  k++; // Subtract divisor from remainder.\n\n                  subtract(rem, yL < remL ? yz : yd, remL, base);\n                }\n              }\n\n              remL = rem.length;\n            } else if (cmp === 0) {\n              k++;\n              rem = [0];\n            } // if cmp === 1, k will be 0\n            // Add the next digit, k, to the result array.\n\n\n            qd[i++] = k; // Update the remainder.\n\n            if (cmp && rem[0]) {\n              rem[remL++] = xd[xi] || 0;\n            } else {\n              rem = [xd[xi]];\n              remL = 1;\n            }\n          } while ((xi++ < xL || rem[0] !== void 0) && sd--);\n\n          more = rem[0] !== void 0;\n        } // Leading zero?\n\n\n        if (!qd[0]) qd.shift();\n      } // logBase is 1 when divide is being used for base conversion.\n\n\n      if (logBase == 1) {\n        q.e = e;\n        inexact = more;\n      } else {\n        // To calculate q.e, first get the number of digits of qd[0].\n        for (i = 1, k = qd[0]; k >= 10; k /= 10) {\n          i++;\n        }\n\n        q.e = i + e * logBase - 1;\n        finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\n      }\n\n      return q;\n    };\n  }();\n  /*\r\n   * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n   * Check for over/under-flow.\r\n   */\n\n\n  function finalise(x, sd, rm, isTruncated) {\n    var digits,\n        i,\n        j,\n        k,\n        rd,\n        roundUp,\n        w,\n        xd,\n        xdi,\n        Ctor = x.constructor; // Don't round if sd is null or undefined.\n\n    out: if (sd != null) {\n      xd = x.d; // Infinity/NaN.\n\n      if (!xd) return x; // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\n      // w: the word of xd containing rd, a base 1e7 number.\n      // xdi: the index of w within xd.\n      // digits: the number of digits of w.\n      // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\n      // they had leading zeros)\n      // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\n      // Get the length of the first word of the digits array xd.\n\n      for (digits = 1, k = xd[0]; k >= 10; k /= 10) {\n        digits++;\n      }\n\n      i = sd - digits; // Is the rounding digit in the first word of xd?\n\n      if (i < 0) {\n        i += LOG_BASE;\n        j = sd;\n        w = xd[xdi = 0]; // Get the rounding digit at index j of w.\n\n        rd = w / mathpow(10, digits - j - 1) % 10 | 0;\n      } else {\n        xdi = Math.ceil((i + 1) / LOG_BASE);\n        k = xd.length;\n\n        if (xdi >= k) {\n          if (isTruncated) {\n            // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\n            for (; k++ <= xdi;) {\n              xd.push(0);\n            }\n\n            w = rd = 0;\n            digits = 1;\n            i %= LOG_BASE;\n            j = i - LOG_BASE + 1;\n          } else {\n            break out;\n          }\n        } else {\n          w = k = xd[xdi]; // Get the number of digits of w.\n\n          for (digits = 1; k >= 10; k /= 10) {\n            digits++;\n          } // Get the index of rd within w.\n\n\n          i %= LOG_BASE; // Get the index of rd within w, adjusted for leading zeros.\n          // The number of leading zeros of w is given by LOG_BASE - digits.\n\n          j = i - LOG_BASE + digits; // Get the rounding digit at index j of w.\n\n          rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\n        }\n      } // Are there any non-zero digits after the rounding digit?\n\n\n      isTruncated = isTruncated || sd < 0 || xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1)); // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\n      // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\n      // will give 714.\n\n      roundUp = rm < 4 ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.\n      (i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));\n\n      if (sd < 1 || !xd[0]) {\n        xd.length = 0;\n\n        if (roundUp) {\n          // Convert sd to decimal places.\n          sd -= x.e + 1; // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n\n          xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\n          x.e = -sd || 0;\n        } else {\n          // Zero.\n          xd[0] = x.e = 0;\n        }\n\n        return x;\n      } // Remove excess digits.\n\n\n      if (i == 0) {\n        xd.length = xdi;\n        k = 1;\n        xdi--;\n      } else {\n        xd.length = xdi + 1;\n        k = mathpow(10, LOG_BASE - i); // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n        // j > 0 means i > number of leading zeros of w.\n\n        xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\n      }\n\n      if (roundUp) {\n        for (;;) {\n          // Is the digit to be rounded up in the first word of xd?\n          if (xdi == 0) {\n            // i will be the length of xd[0] before k is added.\n            for (i = 1, j = xd[0]; j >= 10; j /= 10) {\n              i++;\n            }\n\n            j = xd[0] += k;\n\n            for (k = 1; j >= 10; j /= 10) {\n              k++;\n            } // if i != k the length has increased.\n\n\n            if (i != k) {\n              x.e++;\n              if (xd[0] == BASE) xd[0] = 1;\n            }\n\n            break;\n          } else {\n            xd[xdi] += k;\n            if (xd[xdi] != BASE) break;\n            xd[xdi--] = 0;\n            k = 1;\n          }\n        }\n      } // Remove trailing zeros.\n\n\n      for (i = xd.length; xd[--i] === 0;) {\n        xd.pop();\n      }\n    }\n\n    if (external) {\n      // Overflow?\n      if (x.e > Ctor.maxE) {\n        // Infinity.\n        x.d = null;\n        x.e = NaN; // Underflow?\n      } else if (x.e < Ctor.minE) {\n        // Zero.\n        x.e = 0;\n        x.d = [0]; // Ctor.underflow = true;\n      } // else Ctor.underflow = false;\n\n    }\n\n    return x;\n  }\n\n  function finiteToString(x, isExp, sd) {\n    if (!x.isFinite()) return nonFiniteToString(x);\n    var k,\n        e = x.e,\n        str = digitsToString(x.d),\n        len = str.length;\n\n    if (isExp) {\n      if (sd && (k = sd - len) > 0) {\n        str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\n      } else if (len > 1) {\n        str = str.charAt(0) + '.' + str.slice(1);\n      }\n\n      str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\n    } else if (e < 0) {\n      str = '0.' + getZeroString(-e - 1) + str;\n      if (sd && (k = sd - len) > 0) str += getZeroString(k);\n    } else if (e >= len) {\n      str += getZeroString(e + 1 - len);\n      if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\n    } else {\n      if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\n\n      if (sd && (k = sd - len) > 0) {\n        if (e + 1 === len) str += '.';\n        str += getZeroString(k);\n      }\n    }\n\n    return str;\n  } // Calculate the base 10 exponent from the base 1e7 exponent.\n\n\n  function getBase10Exponent(digits, e) {\n    var w = digits[0]; // Add the number of digits of the first word of the digits array.\n\n    for (e *= LOG_BASE; w >= 10; w /= 10) {\n      e++;\n    }\n\n    return e;\n  }\n\n  function getLn10(Ctor, sd, pr) {\n    if (sd > LN10_PRECISION) {\n      // Reset global state in case the exception is caught.\n      external = true;\n      if (pr) Ctor.precision = pr;\n      throw Error(precisionLimitExceeded);\n    }\n\n    return finalise(new Ctor(LN10), sd, 1, true);\n  }\n\n  function getPi(Ctor, sd, rm) {\n    if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\n    return finalise(new Ctor(PI), sd, rm, true);\n  }\n\n  function getPrecision(digits) {\n    var w = digits.length - 1,\n        len = w * LOG_BASE + 1;\n    w = digits[w]; // If non-zero...\n\n    if (w) {\n      // Subtract the number of trailing zeros of the last word.\n      for (; w % 10 == 0; w /= 10) {\n        len--;\n      } // Add the number of digits of the first word.\n\n\n      for (w = digits[0]; w >= 10; w /= 10) {\n        len++;\n      }\n    }\n\n    return len;\n  }\n\n  function getZeroString(k) {\n    var zs = '';\n\n    for (; k--;) {\n      zs += '0';\n    }\n\n    return zs;\n  }\n  /*\r\n   * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n   * integer of type number.\r\n   *\r\n   * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n   *\r\n   */\n\n\n  function intPow(Ctor, x, n, pr) {\n    var isTruncated,\n        r = new Ctor(1),\n        // Max n of 9007199254740991 takes 53 loop iterations.\n    // Maximum digits array length; leaves [28, 34] guard digits.\n    k = Math.ceil(pr / LOG_BASE + 4);\n    external = false;\n\n    for (;;) {\n      if (n % 2) {\n        r = r.times(x);\n        if (truncate(r.d, k)) isTruncated = true;\n      }\n\n      n = mathfloor(n / 2);\n\n      if (n === 0) {\n        // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\n        n = r.d.length - 1;\n        if (isTruncated && r.d[n] === 0) ++r.d[n];\n        break;\n      }\n\n      x = x.times(x);\n      truncate(x.d, k);\n    }\n\n    external = true;\n    return r;\n  }\n\n  function isOdd(n) {\n    return n.d[n.d.length - 1] & 1;\n  }\n  /*\r\n   * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\r\n   */\n\n\n  function maxOrMin(Ctor, args, ltgt) {\n    var y,\n        x = new Ctor(args[0]),\n        i = 0;\n\n    for (; ++i < args.length;) {\n      y = new Ctor(args[i]);\n\n      if (!y.s) {\n        x = y;\n        break;\n      } else if (x[ltgt](y)) {\n        x = y;\n      }\n    }\n\n    return x;\n  }\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   * Taylor/Maclaurin series.\r\n   *\r\n   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n   *\r\n   * Argument reduction:\r\n   *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n   *   exp(x) = exp(x / 2^k)^(2^k)\r\n   *\r\n   * Previously, the argument was initially reduced by\r\n   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n   * found to be slower than just dividing repeatedly by 32 as above.\r\n   *\r\n   * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n   * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n   *\r\n   *  exp(Infinity)  = Infinity\r\n   *  exp(-Infinity) = 0\r\n   *  exp(NaN)       = NaN\r\n   *  exp(±0)        = 1\r\n   *\r\n   *  exp(x) is non-terminating for any finite, non-zero x.\r\n   *\r\n   *  The result will always be correctly rounded.\r\n   *\r\n   */\n\n\n  function naturalExponential(x, sd) {\n    var denominator,\n        guard,\n        j,\n        pow,\n        sum,\n        t,\n        wpr,\n        rep = 0,\n        i = 0,\n        k = 0,\n        Ctor = x.constructor,\n        rm = Ctor.rounding,\n        pr = Ctor.precision; // 0/NaN/Infinity?\n\n    if (!x.d || !x.d[0] || x.e > 17) {\n      return new Ctor(x.d ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0 : x.s ? x.s < 0 ? 0 : x : 0 / 0);\n    }\n\n    if (sd == null) {\n      external = false;\n      wpr = pr;\n    } else {\n      wpr = sd;\n    }\n\n    t = new Ctor(0.03125); // while abs(x) >= 0.1\n\n    while (x.e > -2) {\n      // x = x / 2^5\n      x = x.times(t);\n      k += 5;\n    } // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\n    // necessary to ensure the first 4 rounding digits are correct.\n\n\n    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\n    wpr += guard;\n    denominator = pow = sum = new Ctor(1);\n    Ctor.precision = wpr;\n\n    for (;;) {\n      pow = finalise(pow.times(x), wpr, 1);\n      denominator = denominator.times(++i);\n      t = sum.plus(divide(pow, denominator, wpr, 1));\n\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\n        j = k;\n\n        while (j--) {\n          sum = finalise(sum.times(sum), wpr, 1);\n        } // Check to see if the first 4 rounding digits are [49]999.\n        // If so, repeat the summation with a higher precision, otherwise\n        // e.g. with precision: 18, rounding: 1\n        // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\n        // `wpr - guard` is the index of first rounding digit.\n\n\n        if (sd == null) {\n          if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\n            Ctor.precision = wpr += 10;\n            denominator = pow = t = new Ctor(1);\n            i = 0;\n            rep++;\n          } else {\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\n          }\n        } else {\n          Ctor.precision = pr;\n          return sum;\n        }\n      }\n\n      sum = t;\n    }\n  }\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   *  ln(-n)        = NaN\r\n   *  ln(0)         = -Infinity\r\n   *  ln(-0)        = -Infinity\r\n   *  ln(1)         = 0\r\n   *  ln(Infinity)  = Infinity\r\n   *  ln(-Infinity) = NaN\r\n   *  ln(NaN)       = NaN\r\n   *\r\n   *  ln(n) (n != 1) is non-terminating.\r\n   *\r\n   */\n\n\n  function naturalLogarithm(y, sd) {\n    var c,\n        c0,\n        denominator,\n        e,\n        numerator,\n        rep,\n        sum,\n        t,\n        wpr,\n        x1,\n        x2,\n        n = 1,\n        guard = 10,\n        x = y,\n        xd = x.d,\n        Ctor = x.constructor,\n        rm = Ctor.rounding,\n        pr = Ctor.precision; // Is x negative or Infinity, NaN, 0 or 1?\n\n    if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\n      return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\n    }\n\n    if (sd == null) {\n      external = false;\n      wpr = pr;\n    } else {\n      wpr = sd;\n    }\n\n    Ctor.precision = wpr += guard;\n    c = digitsToString(xd);\n    c0 = c.charAt(0);\n\n    if (Math.abs(e = x.e) < 1.5e15) {\n      // Argument reduction.\n      // The series converges faster the closer the argument is to 1, so using\n      // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\n      // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\n      // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\n      // later be divided by this number, then separate out the power of 10 using\n      // ln(a*10^b) = ln(a) + b*ln(10).\n      // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\n      //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\n      // max n is 6 (gives 0.7 - 1.3)\n      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\n        x = x.times(y);\n        c = digitsToString(x.d);\n        c0 = c.charAt(0);\n        n++;\n      }\n\n      e = x.e;\n\n      if (c0 > 1) {\n        x = new Ctor('0.' + c);\n        e++;\n      } else {\n        x = new Ctor(c0 + '.' + c.slice(1));\n      }\n    } else {\n      // The argument reduction method above may result in overflow if the argument y is a massive\n      // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\n      // function using ln(x*10^e) = ln(x) + e*ln(10).\n      t = getLn10(Ctor, wpr + 2, pr).times(e + '');\n      x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\n      Ctor.precision = pr;\n      return sd == null ? finalise(x, pr, rm, external = true) : x;\n    } // x1 is x reduced to a value near 1.\n\n\n    x1 = x; // Taylor series.\n    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\n    // where x = (y - 1)/(y + 1)    (|x| < 1)\n\n    sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\n    x2 = finalise(x.times(x), wpr, 1);\n    denominator = 3;\n\n    for (;;) {\n      numerator = finalise(numerator.times(x2), wpr, 1);\n      t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\n\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\n        sum = sum.times(2); // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\n        // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\n\n        if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\n        sum = divide(sum, new Ctor(n), wpr, 1); // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\n        // been repeated previously) and the first 4 rounding digits 9999?\n        // If so, restart the summation with a higher precision, otherwise\n        // e.g. with precision: 12, rounding: 1\n        // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\n        // `wpr - guard` is the index of first rounding digit.\n\n        if (sd == null) {\n          if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\n            Ctor.precision = wpr += guard;\n            t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\n            x2 = finalise(x.times(x), wpr, 1);\n            denominator = rep = 1;\n          } else {\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\n          }\n        } else {\n          Ctor.precision = pr;\n          return sum;\n        }\n      }\n\n      sum = t;\n      denominator += 2;\n    }\n  } // ±Infinity, NaN.\n\n\n  function nonFiniteToString(x) {\n    // Unsigned.\n    return String(x.s * x.s / 0);\n  }\n  /*\r\n   * Parse the value of a new Decimal `x` from string `str`.\r\n   */\n\n\n  function parseDecimal(x, str) {\n    var e, i, len; // Decimal point?\n\n    if ((e = str.indexOf('.')) > -1) str = str.replace('.', ''); // Exponential form?\n\n    if ((i = str.search(/e/i)) > 0) {\n      // Determine exponent.\n      if (e < 0) e = i;\n      e += +str.slice(i + 1);\n      str = str.substring(0, i);\n    } else if (e < 0) {\n      // Integer.\n      e = str.length;\n    } // Determine leading zeros.\n\n\n    for (i = 0; str.charCodeAt(i) === 48; i++) {\n      ;\n    } // Determine trailing zeros.\n\n\n    for (len = str.length; str.charCodeAt(len - 1) === 48; --len) {\n      ;\n    }\n\n    str = str.slice(i, len);\n\n    if (str) {\n      len -= i;\n      x.e = e = e - i - 1;\n      x.d = []; // Transform base\n      // e is the base 10 exponent.\n      // i is where to slice str to get the first word of the digits array.\n\n      i = (e + 1) % LOG_BASE;\n      if (e < 0) i += LOG_BASE;\n\n      if (i < len) {\n        if (i) x.d.push(+str.slice(0, i));\n\n        for (len -= LOG_BASE; i < len;) {\n          x.d.push(+str.slice(i, i += LOG_BASE));\n        }\n\n        str = str.slice(i);\n        i = LOG_BASE - str.length;\n      } else {\n        i -= len;\n      }\n\n      for (; i--;) {\n        str += '0';\n      }\n\n      x.d.push(+str);\n\n      if (external) {\n        // Overflow?\n        if (x.e > x.constructor.maxE) {\n          // Infinity.\n          x.d = null;\n          x.e = NaN; // Underflow?\n        } else if (x.e < x.constructor.minE) {\n          // Zero.\n          x.e = 0;\n          x.d = [0]; // x.constructor.underflow = true;\n        } // else x.constructor.underflow = false;\n\n      }\n    } else {\n      // Zero.\n      x.e = 0;\n      x.d = [0];\n    }\n\n    return x;\n  }\n  /*\r\n   * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n   */\n\n\n  function parseOther(x, str) {\n    var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\n\n    if (str.indexOf('_') > -1) {\n      str = str.replace(/(\\d)_(?=\\d)/g, '$1');\n      if (isDecimal.test(str)) return parseDecimal(x, str);\n    } else if (str === 'Infinity' || str === 'NaN') {\n      if (!+str) x.s = NaN;\n      x.e = NaN;\n      x.d = null;\n      return x;\n    }\n\n    if (isHex.test(str)) {\n      base = 16;\n      str = str.toLowerCase();\n    } else if (isBinary.test(str)) {\n      base = 2;\n    } else if (isOctal.test(str)) {\n      base = 8;\n    } else {\n      throw Error(invalidArgument + str);\n    } // Is there a binary exponent part?\n\n\n    i = str.search(/p/i);\n\n    if (i > 0) {\n      p = +str.slice(i + 1);\n      str = str.substring(2, i);\n    } else {\n      str = str.slice(2);\n    } // Convert `str` as an integer then divide the result by `base` raised to a power such that the\n    // fraction part will be restored.\n\n\n    i = str.indexOf('.');\n    isFloat = i >= 0;\n    Ctor = x.constructor;\n\n    if (isFloat) {\n      str = str.replace('.', '');\n      len = str.length;\n      i = len - i; // log[10](16) = 1.2041... , log[10](88) = 1.9444....\n\n      divisor = intPow(Ctor, new Ctor(base), i, i * 2);\n    }\n\n    xd = convertBase(str, base, BASE);\n    xe = xd.length - 1; // Remove trailing zeros.\n\n    for (i = xe; xd[i] === 0; --i) {\n      xd.pop();\n    }\n\n    if (i < 0) return new Ctor(x.s * 0);\n    x.e = getBase10Exponent(xd, xe);\n    x.d = xd;\n    external = false; // At what precision to perform the division to ensure exact conversion?\n    // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\n    // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\n    // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\n    // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\n    // Therefore using 4 * the number of digits of str will always be enough.\n\n    if (isFloat) x = divide(x, divisor, len * 4); // Multiply by the binary exponent part if present.\n\n    if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));\n    external = true;\n    return x;\n  }\n  /*\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */\n\n\n  function sine(Ctor, x) {\n    var k,\n        len = x.d.length;\n\n    if (len < 3) {\n      return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);\n    } // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\n    // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\n    // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\n    // Estimate the optimum number of times to use the argument reduction.\n\n\n    k = 1.4 * Math.sqrt(len);\n    k = k > 16 ? 16 : k | 0;\n    x = x.times(1 / tinyPow(5, k));\n    x = taylorSeries(Ctor, 2, x, x); // Reverse argument reduction\n\n    var sin2_x,\n        d5 = new Ctor(5),\n        d16 = new Ctor(16),\n        d20 = new Ctor(20);\n\n    for (; k--;) {\n      sin2_x = x.times(x);\n      x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\n    }\n\n    return x;\n  } // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\n\n\n  function taylorSeries(Ctor, n, x, y, isHyperbolic) {\n    var j,\n        t,\n        u,\n        x2,\n        i = 1,\n        pr = Ctor.precision,\n        k = Math.ceil(pr / LOG_BASE);\n    external = false;\n    x2 = x.times(x);\n    u = new Ctor(y);\n\n    for (;;) {\n      t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\n      u = isHyperbolic ? y.plus(t) : y.minus(t);\n      y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\n      t = u.plus(y);\n\n      if (t.d[k] !== void 0) {\n        for (j = k; t.d[j] === u.d[j] && j--;) {\n          ;\n        }\n\n        if (j == -1) break;\n      }\n\n      j = u;\n      u = y;\n      y = t;\n      t = j;\n      i++;\n    }\n\n    external = true;\n    t.d.length = k + 1;\n    return t;\n  } // Exponent e must be positive and non-zero.\n\n\n  function tinyPow(b, e) {\n    var n = b;\n\n    while (--e) {\n      n *= b;\n    }\n\n    return n;\n  } // Return the absolute value of `x` reduced to less than or equal to half pi.\n\n\n  function toLessThanHalfPi(Ctor, x) {\n    var t,\n        isNeg = x.s < 0,\n        pi = getPi(Ctor, Ctor.precision, 1),\n        halfPi = pi.times(0.5);\n    x = x.abs();\n\n    if (x.lte(halfPi)) {\n      quadrant = isNeg ? 4 : 1;\n      return x;\n    }\n\n    t = x.divToInt(pi);\n\n    if (t.isZero()) {\n      quadrant = isNeg ? 3 : 2;\n    } else {\n      x = x.minus(t.times(pi)); // 0 <= x < pi\n\n      if (x.lte(halfPi)) {\n        quadrant = isOdd(t) ? isNeg ? 2 : 3 : isNeg ? 4 : 1;\n        return x;\n      }\n\n      quadrant = isOdd(t) ? isNeg ? 1 : 4 : isNeg ? 3 : 2;\n    }\n\n    return x.minus(pi).abs();\n  }\n  /*\r\n   * Return the value of Decimal `x` as a string in base `baseOut`.\r\n   *\r\n   * If the optional `sd` argument is present include a binary exponent suffix.\r\n   */\n\n\n  function toStringBinary(x, baseOut, sd, rm) {\n    var base,\n        e,\n        i,\n        k,\n        len,\n        roundUp,\n        str,\n        xd,\n        y,\n        Ctor = x.constructor,\n        isExp = sd !== void 0;\n\n    if (isExp) {\n      checkInt32(sd, 1, MAX_DIGITS);\n      if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);\n    } else {\n      sd = Ctor.precision;\n      rm = Ctor.rounding;\n    }\n\n    if (!x.isFinite()) {\n      str = nonFiniteToString(x);\n    } else {\n      str = finiteToString(x);\n      i = str.indexOf('.'); // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\n      // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\n      // minBinaryExponent = floor(decimalExponent * log[2](10))\n      // log[2](10) = 3.321928094887362347870319429489390175864\n\n      if (isExp) {\n        base = 2;\n\n        if (baseOut == 16) {\n          sd = sd * 4 - 3;\n        } else if (baseOut == 8) {\n          sd = sd * 3 - 2;\n        }\n      } else {\n        base = baseOut;\n      } // Convert the number as an integer then divide the result by its base raised to a power such\n      // that the fraction part will be restored.\n      // Non-integer.\n\n\n      if (i >= 0) {\n        str = str.replace('.', '');\n        y = new Ctor(1);\n        y.e = str.length - i;\n        y.d = convertBase(finiteToString(y), 10, base);\n        y.e = y.d.length;\n      }\n\n      xd = convertBase(str, 10, base);\n      e = len = xd.length; // Remove trailing zeros.\n\n      for (; xd[--len] == 0;) {\n        xd.pop();\n      }\n\n      if (!xd[0]) {\n        str = isExp ? '0p+0' : '0';\n      } else {\n        if (i < 0) {\n          e--;\n        } else {\n          x = new Ctor(x);\n          x.d = xd;\n          x.e = e;\n          x = divide(x, y, sd, rm, 0, base);\n          xd = x.d;\n          e = x.e;\n          roundUp = inexact;\n        } // The rounding digit, i.e. the digit after the digit that may be rounded up.\n\n\n        i = xd[sd];\n        k = base / 2;\n        roundUp = roundUp || xd[sd + 1] !== void 0;\n        roundUp = rm < 4 ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2)) : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 || rm === (x.s < 0 ? 8 : 7));\n        xd.length = sd;\n\n        if (roundUp) {\n          // Rounding up may mean the previous digit has to be rounded up and so on.\n          for (; ++xd[--sd] > base - 1;) {\n            xd[sd] = 0;\n\n            if (!sd) {\n              ++e;\n              xd.unshift(1);\n            }\n          }\n        } // Determine trailing zeros.\n\n\n        for (len = xd.length; !xd[len - 1]; --len) {\n          ;\n        } // E.g. [4, 11, 15] becomes 4bf.\n\n\n        for (i = 0, str = ''; i < len; i++) {\n          str += NUMERALS.charAt(xd[i]);\n        } // Add binary exponent suffix?\n\n\n        if (isExp) {\n          if (len > 1) {\n            if (baseOut == 16 || baseOut == 8) {\n              i = baseOut == 16 ? 4 : 3;\n\n              for (--len; len % i; len++) {\n                str += '0';\n              }\n\n              xd = convertBase(str, base, baseOut);\n\n              for (len = xd.length; !xd[len - 1]; --len) {\n                ;\n              } // xd[0] will always be be 1\n\n\n              for (i = 1, str = '1.'; i < len; i++) {\n                str += NUMERALS.charAt(xd[i]);\n              }\n            } else {\n              str = str.charAt(0) + '.' + str.slice(1);\n            }\n          }\n\n          str = str + (e < 0 ? 'p' : 'p+') + e;\n        } else if (e < 0) {\n          for (; ++e;) {\n            str = '0' + str;\n          }\n\n          str = '0.' + str;\n        } else {\n          if (++e > len) for (e -= len; e--;) {\n            str += '0';\n          } else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\n        }\n      }\n\n      str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\n    }\n\n    return x.s < 0 ? '-' + str : str;\n  } // Does not strip trailing zeros.\n\n\n  function truncate(arr, len) {\n    if (arr.length > len) {\n      arr.length = len;\n      return true;\n    }\n  } // Decimal methods\n\n  /*\r\n   *  abs\r\n   *  acos\r\n   *  acosh\r\n   *  add\r\n   *  asin\r\n   *  asinh\r\n   *  atan\r\n   *  atanh\r\n   *  atan2\r\n   *  cbrt\r\n   *  ceil\r\n   *  clamp\r\n   *  clone\r\n   *  config\r\n   *  cos\r\n   *  cosh\r\n   *  div\r\n   *  exp\r\n   *  floor\r\n   *  hypot\r\n   *  ln\r\n   *  log\r\n   *  log2\r\n   *  log10\r\n   *  max\r\n   *  min\r\n   *  mod\r\n   *  mul\r\n   *  pow\r\n   *  random\r\n   *  round\r\n   *  set\r\n   *  sign\r\n   *  sin\r\n   *  sinh\r\n   *  sqrt\r\n   *  sub\r\n   *  sum\r\n   *  tan\r\n   *  tanh\r\n   *  trunc\r\n   */\n\n  /*\r\n   * Return a new Decimal whose value is the absolute value of `x`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function abs(x) {\n    return new this(x).abs();\n  }\n  /*\r\n   * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function acos(x) {\n    return new this(x).acos();\n  }\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\n\n\n  function acosh(x) {\n    return new this(x).acosh();\n  }\n  /*\r\n   * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function add(x, y) {\n    return new this(x).plus(y);\n  }\n  /*\r\n   * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function asin(x) {\n    return new this(x).asin();\n  }\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\n\n\n  function asinh(x) {\n    return new this(x).asinh();\n  }\n  /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function atan(x) {\n    return new this(x).atan();\n  }\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\n\n\n  function atanh(x) {\n    return new this(x).atanh();\n  }\n  /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n   * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi, pi]\r\n   *\r\n   * y {number|string|Decimal} The y-coordinate.\r\n   * x {number|string|Decimal} The x-coordinate.\r\n   *\r\n   * atan2(±0, -0)               = ±pi\r\n   * atan2(±0, +0)               = ±0\r\n   * atan2(±0, -x)               = ±pi for x > 0\r\n   * atan2(±0, x)                = ±0 for x > 0\r\n   * atan2(-y, ±0)               = -pi/2 for y > 0\r\n   * atan2(y, ±0)                = pi/2 for y > 0\r\n   * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n   * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n   * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n   * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n   * atan2(±Infinity, +Infinity) = ±pi/4\r\n   * atan2(NaN, x) = NaN\r\n   * atan2(y, NaN) = NaN\r\n   *\r\n   */\n\n\n  function atan2(y, x) {\n    y = new this(y);\n    x = new this(x);\n    var r,\n        pr = this.precision,\n        rm = this.rounding,\n        wpr = pr + 4; // Either NaN\n\n    if (!y.s || !x.s) {\n      r = new this(NaN); // Both ±Infinity\n    } else if (!y.d && !x.d) {\n      r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\n      r.s = y.s; // x is ±Infinity or y is ±0\n    } else if (!x.d || y.isZero()) {\n      r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\n      r.s = y.s; // y is ±Infinity or x is ±0\n    } else if (!y.d || x.isZero()) {\n      r = getPi(this, wpr, 1).times(0.5);\n      r.s = y.s; // Both non-zero and finite\n    } else if (x.s < 0) {\n      this.precision = wpr;\n      this.rounding = 1;\n      r = this.atan(divide(y, x, wpr, 1));\n      x = getPi(this, wpr, 1);\n      this.precision = pr;\n      this.rounding = rm;\n      r = y.s < 0 ? r.minus(x) : r.plus(x);\n    } else {\n      r = this.atan(divide(y, x, wpr, 1));\n    }\n\n    return r;\n  }\n  /*\r\n   * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function cbrt(x) {\n    return new this(x).cbrt();\n  }\n  /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function ceil(x) {\n    return finalise(x = new this(x), x.e + 1, 2);\n  }\n  /*\r\n   * Return a new Decimal whose value is `x` clamped to the range delineated by `min` and `max`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * min {number|string|Decimal}\r\n   * max {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function clamp(x, min, max) {\n    return new this(x).clamp(min, max);\n  }\n  /*\r\n   * Configure global settings for a Decimal constructor.\r\n   *\r\n   * `obj` is an object with one or more of the following properties,\r\n   *\r\n   *   precision  {number}\r\n   *   rounding   {number}\r\n   *   toExpNeg   {number}\r\n   *   toExpPos   {number}\r\n   *   maxE       {number}\r\n   *   minE       {number}\r\n   *   modulo     {number}\r\n   *   crypto     {boolean|number}\r\n   *   defaults   {true}\r\n   *\r\n   * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n   *\r\n   */\n\n\n  function config(obj) {\n    if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\n    var i,\n        p,\n        v,\n        useDefaults = obj.defaults === true,\n        ps = ['precision', 1, MAX_DIGITS, 'rounding', 0, 8, 'toExpNeg', -EXP_LIMIT, 0, 'toExpPos', 0, EXP_LIMIT, 'maxE', 0, EXP_LIMIT, 'minE', -EXP_LIMIT, 0, 'modulo', 0, 9];\n\n    for (i = 0; i < ps.length; i += 3) {\n      if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\n\n      if ((v = obj[p]) !== void 0) {\n        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;else throw Error(invalidArgument + p + ': ' + v);\n      }\n    }\n\n    if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];\n\n    if ((v = obj[p]) !== void 0) {\n      if (v === true || v === false || v === 0 || v === 1) {\n        if (v) {\n          if (typeof crypto != 'undefined' && crypto && (crypto.getRandomValues || crypto.randomBytes)) {\n            this[p] = true;\n          } else {\n            throw Error(cryptoUnavailable);\n          }\n        } else {\n          this[p] = false;\n        }\n      } else {\n        throw Error(invalidArgument + p + ': ' + v);\n      }\n    }\n\n    return this;\n  }\n  /*\r\n   * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\n\n\n  function cos(x) {\n    return new this(x).cos();\n  }\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\n\n\n  function cosh(x) {\n    return new this(x).cosh();\n  }\n  /*\r\n   * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n   * constructor.\r\n   *\r\n   */\n\n\n  function clone(obj) {\n    var i, p, ps;\n    /*\r\n     * The Decimal constructor and exported function.\r\n     * Return a new Decimal instance.\r\n     *\r\n     * v {number|string|Decimal} A numeric value.\r\n     *\r\n     */\n\n    function Decimal(v) {\n      var e,\n          i,\n          t,\n          x = this; // Decimal called without new.\n\n      if (!(x instanceof Decimal)) return new Decimal(v); // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\n      // which points to Object.\n\n      x.constructor = Decimal; // Duplicate.\n\n      if (isDecimalInstance(v)) {\n        x.s = v.s;\n\n        if (external) {\n          if (!v.d || v.e > Decimal.maxE) {\n            // Infinity.\n            x.e = NaN;\n            x.d = null;\n          } else if (v.e < Decimal.minE) {\n            // Zero.\n            x.e = 0;\n            x.d = [0];\n          } else {\n            x.e = v.e;\n            x.d = v.d.slice();\n          }\n        } else {\n          x.e = v.e;\n          x.d = v.d ? v.d.slice() : v.d;\n        }\n\n        return;\n      }\n\n      t = typeof v;\n\n      if (t === 'number') {\n        if (v === 0) {\n          x.s = 1 / v < 0 ? -1 : 1;\n          x.e = 0;\n          x.d = [0];\n          return;\n        }\n\n        if (v < 0) {\n          v = -v;\n          x.s = -1;\n        } else {\n          x.s = 1;\n        } // Fast path for small integers.\n\n\n        if (v === ~~v && v < 1e7) {\n          for (e = 0, i = v; i >= 10; i /= 10) {\n            e++;\n          }\n\n          if (external) {\n            if (e > Decimal.maxE) {\n              x.e = NaN;\n              x.d = null;\n            } else if (e < Decimal.minE) {\n              x.e = 0;\n              x.d = [0];\n            } else {\n              x.e = e;\n              x.d = [v];\n            }\n          } else {\n            x.e = e;\n            x.d = [v];\n          }\n\n          return; // Infinity, NaN.\n        } else if (v * 0 !== 0) {\n          if (!v) x.s = NaN;\n          x.e = NaN;\n          x.d = null;\n          return;\n        }\n\n        return parseDecimal(x, v.toString());\n      } else if (t !== 'string') {\n        throw Error(invalidArgument + v);\n      } // Minus sign?\n\n\n      if ((i = v.charCodeAt(0)) === 45) {\n        v = v.slice(1);\n        x.s = -1;\n      } else {\n        // Plus sign?\n        if (i === 43) v = v.slice(1);\n        x.s = 1;\n      }\n\n      return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\n    }\n\n    Decimal.prototype = P;\n    Decimal.ROUND_UP = 0;\n    Decimal.ROUND_DOWN = 1;\n    Decimal.ROUND_CEIL = 2;\n    Decimal.ROUND_FLOOR = 3;\n    Decimal.ROUND_HALF_UP = 4;\n    Decimal.ROUND_HALF_DOWN = 5;\n    Decimal.ROUND_HALF_EVEN = 6;\n    Decimal.ROUND_HALF_CEIL = 7;\n    Decimal.ROUND_HALF_FLOOR = 8;\n    Decimal.EUCLID = 9;\n    Decimal.config = Decimal.set = config;\n    Decimal.clone = clone;\n    Decimal.isDecimal = isDecimalInstance;\n    Decimal.abs = abs;\n    Decimal.acos = acos;\n    Decimal.acosh = acosh; // ES6\n\n    Decimal.add = add;\n    Decimal.asin = asin;\n    Decimal.asinh = asinh; // ES6\n\n    Decimal.atan = atan;\n    Decimal.atanh = atanh; // ES6\n\n    Decimal.atan2 = atan2;\n    Decimal.cbrt = cbrt; // ES6\n\n    Decimal.ceil = ceil;\n    Decimal.clamp = clamp;\n    Decimal.cos = cos;\n    Decimal.cosh = cosh; // ES6\n\n    Decimal.div = div;\n    Decimal.exp = exp;\n    Decimal.floor = floor;\n    Decimal.hypot = hypot; // ES6\n\n    Decimal.ln = ln;\n    Decimal.log = log;\n    Decimal.log10 = log10; // ES6\n\n    Decimal.log2 = log2; // ES6\n\n    Decimal.max = max;\n    Decimal.min = min;\n    Decimal.mod = mod;\n    Decimal.mul = mul;\n    Decimal.pow = pow;\n    Decimal.random = random;\n    Decimal.round = round;\n    Decimal.sign = sign; // ES6\n\n    Decimal.sin = sin;\n    Decimal.sinh = sinh; // ES6\n\n    Decimal.sqrt = sqrt;\n    Decimal.sub = sub;\n    Decimal.sum = sum;\n    Decimal.tan = tan;\n    Decimal.tanh = tanh; // ES6\n\n    Decimal.trunc = trunc; // ES6\n\n    if (obj === void 0) obj = {};\n\n    if (obj) {\n      if (obj.defaults !== true) {\n        ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\n\n        for (i = 0; i < ps.length;) {\n          if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\n        }\n      }\n    }\n\n    Decimal.config(obj);\n    return Decimal;\n  }\n  /*\r\n   * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function div(x, y) {\n    return new this(x).div(y);\n  }\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} The power to which to raise the base of the natural log.\r\n   *\r\n   */\n\n\n  function exp(x) {\n    return new this(x).exp();\n  }\n  /*\r\n   * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function floor(x) {\n    return finalise(x = new this(x), x.e + 1, 3);\n  }\n  /*\r\n   * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function hypot() {\n    var i,\n        n,\n        t = new this(0);\n    external = false;\n\n    for (i = 0; i < arguments.length;) {\n      n = new this(arguments[i++]);\n\n      if (!n.d) {\n        if (n.s) {\n          external = true;\n          return new this(1 / 0);\n        }\n\n        t = n;\n      } else if (t.d) {\n        t = t.plus(n.times(n));\n      }\n    }\n\n    external = true;\n    return t.sqrt();\n  }\n  /*\r\n   * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\r\n   * otherwise return false.\r\n   *\r\n   */\n\n\n  function isDecimalInstance(obj) {\n    return obj instanceof Decimal || obj && obj.toStringTag === tag || false;\n  }\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function ln(x) {\n    return new this(x).ln();\n  }\n  /*\r\n   * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n   * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * log[y](x)\r\n   *\r\n   * x {number|string|Decimal} The argument of the logarithm.\r\n   * y {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\n\n\n  function log(x, y) {\n    return new this(x).log(y);\n  }\n  /*\r\n   * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function log2(x) {\n    return new this(x).log(2);\n  }\n  /*\r\n   * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function log10(x) {\n    return new this(x).log(10);\n  }\n  /*\r\n   * Return a new Decimal whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function max() {\n    return maxOrMin(this, arguments, 'lt');\n  }\n  /*\r\n   * Return a new Decimal whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function min() {\n    return maxOrMin(this, arguments, 'gt');\n  }\n  /*\r\n   * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function mod(x, y) {\n    return new this(x).mod(y);\n  }\n  /*\r\n   * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function mul(x, y) {\n    return new this(x).mul(y);\n  }\n  /*\r\n   * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} The base.\r\n   * y {number|string|Decimal} The exponent.\r\n   *\r\n   */\n\n\n  function pow(x, y) {\n    return new this(x).pow(y);\n  }\n  /*\r\n   * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n   * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n   * are produced).\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n   *\r\n   */\n\n\n  function random(sd) {\n    var d,\n        e,\n        k,\n        n,\n        i = 0,\n        r = new this(1),\n        rd = [];\n    if (sd === void 0) sd = this.precision;else checkInt32(sd, 1, MAX_DIGITS);\n    k = Math.ceil(sd / LOG_BASE);\n\n    if (!this.crypto) {\n      for (; i < k;) {\n        rd[i++] = Math.random() * 1e7 | 0;\n      } // Browsers supporting crypto.getRandomValues.\n\n    } else if (crypto.getRandomValues) {\n      d = crypto.getRandomValues(new Uint32Array(k));\n\n      for (; i < k;) {\n        n = d[i]; // 0 <= n < 4294967296\n        // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\n\n        if (n >= 4.29e9) {\n          d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\n        } else {\n          // 0 <= n <= 4289999999\n          // 0 <= (n % 1e7) <= 9999999\n          rd[i++] = n % 1e7;\n        }\n      } // Node.js supporting crypto.randomBytes.\n\n    } else if (crypto.randomBytes) {\n      // buffer\n      d = crypto.randomBytes(k *= 4);\n\n      for (; i < k;) {\n        // 0 <= n < 2147483648\n        n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24); // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\n\n        if (n >= 2.14e9) {\n          crypto.randomBytes(4).copy(d, i);\n        } else {\n          // 0 <= n <= 2139999999\n          // 0 <= (n % 1e7) <= 9999999\n          rd.push(n % 1e7);\n          i += 4;\n        }\n      }\n\n      i = k / 4;\n    } else {\n      throw Error(cryptoUnavailable);\n    }\n\n    k = rd[--i];\n    sd %= LOG_BASE; // Convert trailing digits to zeros according to sd.\n\n    if (k && sd) {\n      n = mathpow(10, LOG_BASE - sd);\n      rd[i] = (k / n | 0) * n;\n    } // Remove trailing words which are zero.\n\n\n    for (; rd[i] === 0; i--) {\n      rd.pop();\n    } // Zero?\n\n\n    if (i < 0) {\n      e = 0;\n      rd = [0];\n    } else {\n      e = -1; // Remove leading words which are zero and adjust exponent accordingly.\n\n      for (; rd[0] === 0; e -= LOG_BASE) {\n        rd.shift();\n      } // Count the digits of the first word of rd to determine leading zeros.\n\n\n      for (k = 1, n = rd[0]; n >= 10; n /= 10) {\n        k++;\n      } // Adjust the exponent for leading zeros of the first word of rd.\n\n\n      if (k < LOG_BASE) e -= LOG_BASE - k;\n    }\n\n    r.e = e;\n    r.d = rd;\n    return r;\n  }\n  /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n   *\r\n   * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function round(x) {\n    return finalise(x = new this(x), x.e + 1, this.rounding);\n  }\n  /*\r\n   * Return\r\n   *   1    if x > 0,\r\n   *  -1    if x < 0,\r\n   *   0    if x is 0,\r\n   *  -0    if x is -0,\r\n   *   NaN  otherwise\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function sign(x) {\n    x = new this(x);\n    return x.d ? x.d[0] ? x.s : 0 * x.s : x.s || NaN;\n  }\n  /*\r\n   * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\n\n\n  function sin(x) {\n    return new this(x).sin();\n  }\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\n\n\n  function sinh(x) {\n    return new this(x).sinh();\n  }\n  /*\r\n   * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function sqrt(x) {\n    return new this(x).sqrt();\n  }\n  /*\r\n   * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function sub(x, y) {\n    return new this(x).sub(y);\n  }\n  /*\r\n   * Return a new Decimal whose value is the sum of the arguments, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * Only the result is rounded, not the intermediate calculations.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function sum() {\n    var i = 0,\n        args = arguments,\n        x = new this(args[i]);\n    external = false;\n\n    for (; x.s && ++i < args.length;) {\n      x = x.plus(args[i]);\n    }\n\n    external = true;\n    return finalise(x, this.precision, this.rounding);\n  }\n  /*\r\n   * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\n\n\n  function tan(x) {\n    return new this(x).tan();\n  }\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\n\n\n  function tanh(x) {\n    return new this(x).tanh();\n  }\n  /*\r\n   * Return a new Decimal whose value is `x` truncated to an integer.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function trunc(x) {\n    return finalise(x = new this(x), x.e + 1, 1);\n  } // Create and configure initial Decimal constructor.\n\n\n  Decimal = clone(DEFAULTS);\n  Decimal.prototype.constructor = Decimal;\n  Decimal['default'] = Decimal.Decimal = Decimal; // Create the internal constants from their string values.\n\n  LN10 = new Decimal(LN10);\n  PI = new Decimal(PI); // Export.\n  // AMD.\n\n  if (typeof define == 'function' && define.amd) {\n    define(function () {\n      return Decimal;\n    }); // Node and other environments that support module.exports.\n  } else if (typeof module != 'undefined' && module.exports) {\n    if (typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol') {\n      P[Symbol['for']('nodejs.util.inspect.custom')] = P.toString;\n      P[Symbol.toStringTag] = 'Decimal';\n    }\n\n    module.exports = Decimal; // Browser.\n  } else {\n    if (!globalScope) {\n      globalScope = typeof self != 'undefined' && self && self.self == self ? self : window;\n    }\n\n    noConflict = globalScope.Decimal;\n\n    Decimal.noConflict = function () {\n      globalScope.Decimal = noConflict;\n      return Decimal;\n    };\n\n    globalScope.Decimal = Decimal;\n  }\n})(this);","map":{"version":3,"names":["globalScope","EXP_LIMIT","MAX_DIGITS","NUMERALS","LN10","PI","DEFAULTS","precision","rounding","modulo","toExpNeg","toExpPos","minE","maxE","crypto","Decimal","inexact","noConflict","quadrant","external","decimalError","invalidArgument","precisionLimitExceeded","cryptoUnavailable","tag","mathfloor","Math","floor","mathpow","pow","isBinary","isHex","isOctal","isDecimal","BASE","LOG_BASE","MAX_SAFE_INTEGER","LN10_PRECISION","length","PI_PRECISION","P","toStringTag","absoluteValue","abs","x","constructor","s","finalise","ceil","e","clampedTo","clamp","min","max","k","Ctor","NaN","gt","Error","cmp","comparedTo","y","i","j","xdL","ydL","xd","d","yd","xs","ys","cosine","cos","pr","rm","sd","toLessThanHalfPi","neg","cubeRoot","cbrt","m","n","r","rep","t","t3","t3plusx","isFinite","isZero","digitsToString","toExponential","slice","indexOf","toString","times","plus","divide","eq","charAt","decimalPlaces","dp","w","dividedBy","div","dividedToIntegerBy","divToInt","equals","greaterThan","greaterThanOrEqualTo","gte","hyperbolicCosine","cosh","len","one","tinyPow","taylorSeries","cosh2_x","d8","minus","hyperbolicSine","sinh","sqrt","sinh2_x","d5","d16","d20","hyperbolicTangent","tanh","inverseCosine","acos","halfPi","isNeg","getPi","asin","inverseHyperbolicCosine","acosh","lte","ln","inverseHyperbolicSine","asinh","inverseHyperbolicTangent","atanh","wpr","xsd","inverseSine","atan","inverseTangent","px","x2","isInteger","isInt","isNaN","isNegative","isPositive","isPos","lessThan","lt","lessThanOrEqualTo","logarithm","log","base","isBase10","denominator","inf","num","arg","guard","naturalLogarithm","getLn10","checkRoundingDigits","sub","xe","xLTy","reverse","push","pop","shift","getBase10Exponent","mod","q","naturalExponential","exp","negated","add","carry","unshift","z","getPrecision","round","sine","sin","squareRoot","tangent","tan","mul","rL","toBinary","toStringBinary","toDecimalPlaces","toDP","checkInt32","str","finiteToString","toFixed","toFraction","maxD","d0","d1","d2","n0","n1","toHexadecimal","toHex","toNearest","toNumber","toOctal","toPower","yn","intPow","toPrecision","toSignificantDigits","toSD","truncated","trunc","valueOf","toJSON","ws","indexOfLastWord","getZeroString","repeating","di","rd","convertBase","baseIn","baseOut","arr","arrL","strL","cos2x","multiplyInteger","temp","compare","a","b","aL","bL","subtract","logBase","more","prod","prodL","qd","rem","remL","rem0","xi","xL","yd0","yL","yz","sign","isTruncated","digits","roundUp","xdi","out","isExp","nonFiniteToString","zs","truncate","isOdd","maxOrMin","args","ltgt","sum","c","c0","numerator","x1","String","parseDecimal","replace","search","substring","charCodeAt","parseOther","divisor","isFloat","p","test","toLowerCase","sin2_x","isHyperbolic","u","pi","atan2","config","obj","v","useDefaults","defaults","ps","getRandomValues","randomBytes","clone","isDecimalInstance","prototype","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","set","hypot","log10","log2","random","hasOwnProperty","arguments","Uint32Array","copy","define","amd","module","exports","Symbol","iterator","self","window"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/decimal.js/decimal.js"],"sourcesContent":[";(function (globalScope) {\r\n  'use strict';\r\n\r\n\r\n  /*\r\n   *  decimal.js v10.3.1\r\n   *  An arbitrary-precision Decimal type for JavaScript.\r\n   *  https://github.com/MikeMcl/decimal.js\r\n   *  Copyright (c) 2021 Michael Mclaughlin <M8ch88l@gmail.com>\r\n   *  MIT Licence\r\n   */\r\n\r\n\r\n  // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n\r\n\r\n    // The maximum exponent magnitude.\r\n    // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\r\n  var EXP_LIMIT = 9e15,                      // 0 to 9e15\r\n\r\n    // The limit on the value of `precision`, and on the value of the first argument to\r\n    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n    MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n    // Base conversion alphabet.\r\n    NUMERALS = '0123456789abcdef',\r\n\r\n    // The natural logarithm of 10 (1025 digits).\r\n    LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\r\n\r\n    // Pi (1025 digits).\r\n    PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\r\n\r\n\r\n    // The initial configuration properties of the Decimal constructor.\r\n    DEFAULTS = {\r\n\r\n      // These values must be integers within the stated ranges (inclusive).\r\n      // Most of these values can be changed at run-time using the `Decimal.config` method.\r\n\r\n      // The maximum number of significant digits of the result of a calculation or base conversion.\r\n      // E.g. `Decimal.config({ precision: 20 });`\r\n      precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n      // The rounding mode used when rounding to `precision`.\r\n      //\r\n      // ROUND_UP         0 Away from zero.\r\n      // ROUND_DOWN       1 Towards zero.\r\n      // ROUND_CEIL       2 Towards +Infinity.\r\n      // ROUND_FLOOR      3 Towards -Infinity.\r\n      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      //\r\n      // E.g.\r\n      // `Decimal.rounding = 4;`\r\n      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n      rounding: 4,                           // 0 to 8\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP         0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\r\n      // FLOOR      3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN  6 The IEEE 754 remainder function.\r\n      // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\r\n      //\r\n      // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\r\n      // division (9) are commonly used for the modulus operation. The other rounding modes can also\r\n      // be used, but they may not give useful results.\r\n      modulo: 1,                             // 0 to 9\r\n\r\n      // The exponent value at and beneath which `toString` returns exponential notation.\r\n      // JavaScript numbers: -7\r\n      toExpNeg: -7,                          // 0 to -EXP_LIMIT\r\n\r\n      // The exponent value at and above which `toString` returns exponential notation.\r\n      // JavaScript numbers: 21\r\n      toExpPos:  21,                         // 0 to EXP_LIMIT\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // JavaScript numbers: -324  (5e-324)\r\n      minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // JavaScript numbers: 308  (1.7976931348623157e+308)\r\n      maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      crypto: false                          // true/false\r\n    },\r\n\r\n\r\n  // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n\r\n\r\n    Decimal, inexact, noConflict, quadrant,\r\n    external = true,\r\n\r\n    decimalError = '[DecimalError] ',\r\n    invalidArgument = decimalError + 'Invalid argument: ',\r\n    precisionLimitExceeded = decimalError + 'Precision limit exceeded',\r\n    cryptoUnavailable = decimalError + 'crypto unavailable',\r\n    tag = '[object Decimal]',\r\n\r\n    mathfloor = Math.floor,\r\n    mathpow = Math.pow,\r\n\r\n    isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\r\n    isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\r\n    isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\r\n    isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n    BASE = 1e7,\r\n    LOG_BASE = 7,\r\n    MAX_SAFE_INTEGER = 9007199254740991,\r\n\r\n    LN10_PRECISION = LN10.length - 1,\r\n    PI_PRECISION = PI.length - 1,\r\n\r\n    // Decimal.prototype object\r\n    P = { toStringTag: tag };\r\n\r\n\r\n  // Decimal prototype methods\r\n\r\n\r\n  /*\r\n   *  absoluteValue             abs\r\n   *  ceil\r\n   *  clampedTo                 clamp\r\n   *  comparedTo                cmp\r\n   *  cosine                    cos\r\n   *  cubeRoot                  cbrt\r\n   *  decimalPlaces             dp\r\n   *  dividedBy                 div\r\n   *  dividedToIntegerBy        divToInt\r\n   *  equals                    eq\r\n   *  floor\r\n   *  greaterThan               gt\r\n   *  greaterThanOrEqualTo      gte\r\n   *  hyperbolicCosine          cosh\r\n   *  hyperbolicSine            sinh\r\n   *  hyperbolicTangent         tanh\r\n   *  inverseCosine             acos\r\n   *  inverseHyperbolicCosine   acosh\r\n   *  inverseHyperbolicSine     asinh\r\n   *  inverseHyperbolicTangent  atanh\r\n   *  inverseSine               asin\r\n   *  inverseTangent            atan\r\n   *  isFinite\r\n   *  isInteger                 isInt\r\n   *  isNaN\r\n   *  isNegative                isNeg\r\n   *  isPositive                isPos\r\n   *  isZero\r\n   *  lessThan                  lt\r\n   *  lessThanOrEqualTo         lte\r\n   *  logarithm                 log\r\n   *  [maximum]                 [max]\r\n   *  [minimum]                 [min]\r\n   *  minus                     sub\r\n   *  modulo                    mod\r\n   *  naturalExponential        exp\r\n   *  naturalLogarithm          ln\r\n   *  negated                   neg\r\n   *  plus                      add\r\n   *  precision                 sd\r\n   *  round\r\n   *  sine                      sin\r\n   *  squareRoot                sqrt\r\n   *  tangent                   tan\r\n   *  times                     mul\r\n   *  toBinary\r\n   *  toDecimalPlaces           toDP\r\n   *  toExponential\r\n   *  toFixed\r\n   *  toFraction\r\n   *  toHexadecimal             toHex\r\n   *  toNearest\r\n   *  toNumber\r\n   *  toOctal\r\n   *  toPower                   pow\r\n   *  toPrecision\r\n   *  toSignificantDigits       toSD\r\n   *  toString\r\n   *  truncated                 trunc\r\n   *  valueOf                   toJSON\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the absolute value of this Decimal.\r\n   *\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new this.constructor(this);\r\n    if (x.s < 0) x.s = 1;\r\n    return finalise(x);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of positive Infinity.\r\n   *\r\n   */\r\n  P.ceil = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal clamped to the range\r\n   * delineated by `min` and `max`.\r\n   *\r\n   * min {number|string|Decimal}\r\n   * max {number|string|Decimal}\r\n   *\r\n   */\r\n  P.clampedTo = P.clamp = function (min, max) {\r\n    var k,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n    min = new Ctor(min);\r\n    max = new Ctor(max);\r\n    if (!min.s || !max.s) return new Ctor(NaN);\r\n    if (min.gt(max)) throw Error(invalidArgument + max);\r\n    k = x.cmp(min);\r\n    return k < 0 ? min : x.cmp(max) > 0 ? max : new Ctor(x);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1    if the value of this Decimal is greater than the value of `y`,\r\n   *  -1    if the value of this Decimal is less than the value of `y`,\r\n   *   0    if they have the same value,\r\n   *   NaN  if the value of either Decimal is NaN.\r\n   *\r\n   */\r\n  P.comparedTo = P.cmp = function (y) {\r\n    var i, j, xdL, ydL,\r\n      x = this,\r\n      xd = x.d,\r\n      yd = (y = new x.constructor(y)).d,\r\n      xs = x.s,\r\n      ys = y.s;\r\n\r\n    // Either NaN or ±Infinity?\r\n    if (!xd || !yd) {\r\n      return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\r\n    }\r\n\r\n    // Either zero?\r\n    if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\r\n\r\n    // Signs differ?\r\n    if (xs !== ys) return xs;\r\n\r\n    // Compare exponents.\r\n    if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\r\n\r\n    xdL = xd.length;\r\n    ydL = yd.length;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n      if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\r\n    }\r\n\r\n    // Compare lengths.\r\n    return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * cos(0)         = 1\r\n   * cos(-0)        = 1\r\n   * cos(Infinity)  = NaN\r\n   * cos(-Infinity) = NaN\r\n   * cos(NaN)       = NaN\r\n   *\r\n   */\r\n  P.cosine = P.cos = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.d) return new Ctor(NaN);\r\n\r\n    // cos(0) = cos(-0) = 1\r\n    if (!x.d[0]) return new Ctor(1);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n    Ctor.rounding = 1;\r\n\r\n    x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   *\r\n   * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   *  cbrt(0)  =  0\r\n   *  cbrt(-0) = -0\r\n   *  cbrt(1)  =  1\r\n   *  cbrt(-1) = -1\r\n   *  cbrt(N)  =  N\r\n   *  cbrt(-I) = -I\r\n   *  cbrt(I)  =  I\r\n   *\r\n   * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n   *\r\n   */\r\n  P.cubeRoot = P.cbrt = function () {\r\n    var e, m, n, r, rep, s, sd, t, t3, t3plusx,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n    external = false;\r\n\r\n    // Initial estimate.\r\n    s = x.s * mathpow(x.s * x, 1 / 3);\r\n\r\n     // Math.cbrt underflow/overflow?\r\n     // Pass x to Math.pow as integer, then adjust the exponent of the result.\r\n    if (!s || Math.abs(s) == 1 / 0) {\r\n      n = digitsToString(x.d);\r\n      e = x.e;\r\n\r\n      // Adjust n exponent so it is a multiple of 3 away from x exponent.\r\n      if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');\r\n      s = mathpow(n, 1 / 3);\r\n\r\n      // Rarely, e may be one less than the result exponent value.\r\n      e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new Ctor(n);\r\n      r.s = x.s;\r\n    } else {\r\n      r = new Ctor(s.toString());\r\n    }\r\n\r\n    sd = (e = Ctor.precision) + 3;\r\n\r\n    // Halley's method.\r\n    // TODO? Compare Newton's method.\r\n    for (;;) {\r\n      t = r;\r\n      t3 = t.times(t).times(t);\r\n      t3plusx = t3.plus(x);\r\n      r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\r\n\r\n      // TODO? Replace with for-loop and checkRoundingDigits.\r\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n        n = n.slice(sd - 3, sd + 1);\r\n\r\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\r\n        // , i.e. approaching a rounding boundary, continue the iteration.\r\n        if (n == '9999' || !rep && n == '4999') {\r\n\r\n          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n          // nines may infinitely repeat.\r\n          if (!rep) {\r\n            finalise(t, e + 1, 0);\r\n\r\n            if (t.times(t).times(t).eq(x)) {\r\n              r = t;\r\n              break;\r\n            }\r\n          }\r\n\r\n          sd += 4;\r\n          rep = 1;\r\n        } else {\r\n\r\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n          // If not, then there are further digits and m will be truthy.\r\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n            // Truncate to the first rounding digit.\r\n            finalise(r, e + 1, 1);\r\n            m = !r.times(r).times(r).eq(x);\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, e, Ctor.rounding, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of decimal places of the value of this Decimal.\r\n   *\r\n   */\r\n  P.decimalPlaces = P.dp = function () {\r\n    var w,\r\n      d = this.d,\r\n      n = NaN;\r\n\r\n    if (d) {\r\n      w = d.length - 1;\r\n      n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last word.\r\n      w = d[w];\r\n      if (w) for (; w % 10 == 0; w /= 10) n--;\r\n      if (n < 0) n = 0;\r\n    }\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.dividedBy = P.div = function (y) {\r\n    return divide(this, new this.constructor(y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n   * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.dividedToIntegerBy = P.divToInt = function (y) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n    return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.equals = P.eq = function (y) {\r\n    return this.cmp(y) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of negative Infinity.\r\n   *\r\n   */\r\n  P.floor = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 3);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n   * false.\r\n   *\r\n   */\r\n  P.greaterThan = P.gt = function (y) {\r\n    return this.cmp(y) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n   * otherwise return false.\r\n   *\r\n   */\r\n  P.greaterThanOrEqualTo = P.gte = function (y) {\r\n    var k = this.cmp(y);\r\n    return k == 1 || k === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [1, Infinity]\r\n   *\r\n   * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n   *\r\n   * cosh(0)         = 1\r\n   * cosh(-0)        = 1\r\n   * cosh(Infinity)  = Infinity\r\n   * cosh(-Infinity) = Infinity\r\n   * cosh(NaN)       = NaN\r\n   *\r\n   *  x        time taken (ms)   result\r\n   * 1000      9                 9.8503555700852349694e+433\r\n   * 10000     25                4.4034091128314607936e+4342\r\n   * 100000    171               1.4033316802130615897e+43429\r\n   * 1000000   3817              1.5166076984010437725e+434294\r\n   * 10000000  abandoned after 2 minute wait\r\n   *\r\n   * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n   *\r\n   */\r\n  P.hyperbolicCosine = P.cosh = function () {\r\n    var k, n, pr, rm, len,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      one = new Ctor(1);\r\n\r\n    if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\r\n    if (x.isZero()) return one;\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    len = x.d.length;\r\n\r\n    // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\r\n    // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    // TODO? Estimation reused from cosine() and may not be optimal here.\r\n    if (len < 32) {\r\n      k = Math.ceil(len / 3);\r\n      n = (1 / tinyPow(4, k)).toString();\r\n    } else {\r\n      k = 16;\r\n      n = '2.3283064365386962890625e-10';\r\n    }\r\n\r\n    x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\r\n\r\n    // Reverse argument reduction\r\n    var cosh2_x,\r\n      i = k,\r\n      d8 = new Ctor(8);\r\n    for (; i--;) {\r\n      cosh2_x = x.times(x);\r\n      x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\r\n    }\r\n\r\n    return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n   *\r\n   * sinh(0)         = 0\r\n   * sinh(-0)        = -0\r\n   * sinh(Infinity)  = Infinity\r\n   * sinh(-Infinity) = -Infinity\r\n   * sinh(NaN)       = NaN\r\n   *\r\n   * x        time taken (ms)\r\n   * 10       2 ms\r\n   * 100      5 ms\r\n   * 1000     14 ms\r\n   * 10000    82 ms\r\n   * 100000   886 ms            1.4033316802130615897e+43429\r\n   * 200000   2613 ms\r\n   * 300000   5407 ms\r\n   * 400000   8824 ms\r\n   * 500000   13026 ms          8.7080643612718084129e+217146\r\n   * 1000000  48543 ms\r\n   *\r\n   * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n   *\r\n   */\r\n  P.hyperbolicSine = P.sinh = function () {\r\n    var k, pr, rm, len,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    len = x.d.length;\r\n\r\n    if (len < 3) {\r\n      x = taylorSeries(Ctor, 2, x, x, true);\r\n    } else {\r\n\r\n      // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\r\n      // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\r\n      // 3 multiplications and 1 addition\r\n\r\n      // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\r\n      // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\r\n      // 4 multiplications and 2 additions\r\n\r\n      // Estimate the optimum number of times to use the argument reduction.\r\n      k = 1.4 * Math.sqrt(len);\r\n      k = k > 16 ? 16 : k | 0;\r\n\r\n      x = x.times(1 / tinyPow(5, k));\r\n      x = taylorSeries(Ctor, 2, x, x, true);\r\n\r\n      // Reverse argument reduction\r\n      var sinh2_x,\r\n        d5 = new Ctor(5),\r\n        d16 = new Ctor(16),\r\n        d20 = new Ctor(20);\r\n      for (; k--;) {\r\n        sinh2_x = x.times(x);\r\n        x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\r\n      }\r\n    }\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * tanh(x) = sinh(x) / cosh(x)\r\n   *\r\n   * tanh(0)         = 0\r\n   * tanh(-0)        = -0\r\n   * tanh(Infinity)  = 1\r\n   * tanh(-Infinity) = -1\r\n   * tanh(NaN)       = NaN\r\n   *\r\n   */\r\n  P.hyperbolicTangent = P.tanh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(x.s);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 7;\r\n    Ctor.rounding = 1;\r\n\r\n    return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n   * this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [0, pi]\r\n   *\r\n   * acos(x) = pi/2 - asin(x)\r\n   *\r\n   * acos(0)       = pi/2\r\n   * acos(-0)      = pi/2\r\n   * acos(1)       = 0\r\n   * acos(-1)      = pi\r\n   * acos(1/2)     = pi/3\r\n   * acos(-1/2)    = 2*pi/3\r\n   * acos(|x| > 1) = NaN\r\n   * acos(NaN)     = NaN\r\n   *\r\n   */\r\n  P.inverseCosine = P.acos = function () {\r\n    var halfPi,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      k = x.abs().cmp(1),\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding;\r\n\r\n    if (k !== -1) {\r\n      return k === 0\r\n        // |x| is 1\r\n        ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\r\n        // |x| > 1 or x is NaN\r\n        : new Ctor(NaN);\r\n    }\r\n\r\n    if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n    // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\r\n\r\n    Ctor.precision = pr + 6;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.asin();\r\n    halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return halfPi.minus(x);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [1, Infinity]\r\n   * Range: [0, Infinity]\r\n   *\r\n   * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n   *\r\n   * acosh(x < 1)     = NaN\r\n   * acosh(NaN)       = NaN\r\n   * acosh(Infinity)  = Infinity\r\n   * acosh(-Infinity) = NaN\r\n   * acosh(0)         = NaN\r\n   * acosh(-0)        = NaN\r\n   * acosh(1)         = 0\r\n   * acosh(-1)        = NaN\r\n   *\r\n   */\r\n  P.inverseHyperbolicCosine = P.acosh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\r\n    if (!x.isFinite()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    external = false;\r\n\r\n    x = x.times(x).minus(1).sqrt().plus(x);\r\n\r\n    external = true;\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.ln();\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n   *\r\n   * asinh(NaN)       = NaN\r\n   * asinh(Infinity)  = Infinity\r\n   * asinh(-Infinity) = -Infinity\r\n   * asinh(0)         = 0\r\n   * asinh(-0)        = -0\r\n   *\r\n   */\r\n  P.inverseHyperbolicSine = P.asinh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\r\n    Ctor.rounding = 1;\r\n    external = false;\r\n\r\n    x = x.times(x).plus(1).sqrt().plus(x);\r\n\r\n    external = true;\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.ln();\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n   *\r\n   * atanh(|x| > 1)   = NaN\r\n   * atanh(NaN)       = NaN\r\n   * atanh(Infinity)  = NaN\r\n   * atanh(-Infinity) = NaN\r\n   * atanh(0)         = 0\r\n   * atanh(-0)        = -0\r\n   * atanh(1)         = Infinity\r\n   * atanh(-1)        = -Infinity\r\n   *\r\n   */\r\n  P.inverseHyperbolicTangent = P.atanh = function () {\r\n    var pr, rm, wpr, xsd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    xsd = x.sd();\r\n\r\n    if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\r\n\r\n    Ctor.precision = wpr = xsd - x.e;\r\n\r\n    x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\r\n\r\n    Ctor.precision = pr + 4;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.ln();\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.times(0.5);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n   *\r\n   * asin(0)       = 0\r\n   * asin(-0)      = -0\r\n   * asin(1/2)     = pi/6\r\n   * asin(-1/2)    = -pi/6\r\n   * asin(1)       = pi/2\r\n   * asin(-1)      = -pi/2\r\n   * asin(|x| > 1) = NaN\r\n   * asin(NaN)     = NaN\r\n   *\r\n   * TODO? Compare performance of Taylor series.\r\n   *\r\n   */\r\n  P.inverseSine = P.asin = function () {\r\n    var halfPi, k,\r\n      pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    k = x.abs().cmp(1);\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    if (k !== -1) {\r\n\r\n      // |x| is 1\r\n      if (k === 0) {\r\n        halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n        halfPi.s = x.s;\r\n        return halfPi;\r\n      }\r\n\r\n      // |x| > 1 or x is NaN\r\n      return new Ctor(NaN);\r\n    }\r\n\r\n    // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\r\n\r\n    Ctor.precision = pr + 6;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.times(2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n   *\r\n   * atan(0)         = 0\r\n   * atan(-0)        = -0\r\n   * atan(1)         = pi/4\r\n   * atan(-1)        = -pi/4\r\n   * atan(Infinity)  = pi/2\r\n   * atan(-Infinity) = -pi/2\r\n   * atan(NaN)       = NaN\r\n   *\r\n   */\r\n  P.inverseTangent = P.atan = function () {\r\n    var i, j, k, n, px, t, r, wpr, x2,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding;\r\n\r\n    if (!x.isFinite()) {\r\n      if (!x.s) return new Ctor(NaN);\r\n      if (pr + 4 <= PI_PRECISION) {\r\n        r = getPi(Ctor, pr + 4, rm).times(0.5);\r\n        r.s = x.s;\r\n        return r;\r\n      }\r\n    } else if (x.isZero()) {\r\n      return new Ctor(x);\r\n    } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\r\n      r = getPi(Ctor, pr + 4, rm).times(0.25);\r\n      r.s = x.s;\r\n      return r;\r\n    }\r\n\r\n    Ctor.precision = wpr = pr + 10;\r\n    Ctor.rounding = 1;\r\n\r\n    // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\r\n\r\n    // Argument reduction\r\n    // Ensure |x| < 0.42\r\n    // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\r\n\r\n    k = Math.min(28, wpr / LOG_BASE + 2 | 0);\r\n\r\n    for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\r\n\r\n    external = false;\r\n\r\n    j = Math.ceil(wpr / LOG_BASE);\r\n    n = 1;\r\n    x2 = x.times(x);\r\n    r = new Ctor(x);\r\n    px = x;\r\n\r\n    // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n    for (; i !== -1;) {\r\n      px = px.times(x2);\r\n      t = r.minus(px.div(n += 2));\r\n\r\n      px = px.times(x2);\r\n      r = t.plus(px.div(n += 2));\r\n\r\n      if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\r\n    }\r\n\r\n    if (k) r = r.times(2 << (k - 1));\r\n\r\n    external = true;\r\n\r\n    return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n   *\r\n   */\r\n  P.isFinite = function () {\r\n    return !!this.d;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is an integer, otherwise return false.\r\n   *\r\n   */\r\n  P.isInteger = P.isInt = function () {\r\n    return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is NaN, otherwise return false.\r\n   *\r\n   */\r\n  P.isNaN = function () {\r\n    return !this.s;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is negative, otherwise return false.\r\n   *\r\n   */\r\n  P.isNegative = P.isNeg = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is positive, otherwise return false.\r\n   *\r\n   */\r\n  P.isPositive = P.isPos = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n   *\r\n   */\r\n  P.isZero = function () {\r\n    return !!this.d && this.d[0] === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThan = P.lt = function (y) {\r\n    return this.cmp(y) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThanOrEqualTo = P.lte = function (y) {\r\n    return this.cmp(y) < 1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * If no base is specified, return log[10](arg).\r\n   *\r\n   * log[base](arg) = ln(arg) / ln(base)\r\n   *\r\n   * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n   * otherwise:\r\n   *\r\n   * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n   * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n   * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n   *\r\n   * log[-b](a)       = NaN\r\n   * log[0](a)        = NaN\r\n   * log[1](a)        = NaN\r\n   * log[NaN](a)      = NaN\r\n   * log[Infinity](a) = NaN\r\n   * log[b](0)        = -Infinity\r\n   * log[b](-0)       = -Infinity\r\n   * log[b](-a)       = NaN\r\n   * log[b](1)        = 0\r\n   * log[b](Infinity) = Infinity\r\n   * log[b](NaN)      = NaN\r\n   *\r\n   * [base] {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\r\n  P.logarithm = P.log = function (base) {\r\n    var isBase10, d, denominator, k, inf, num, sd, r,\r\n      arg = this,\r\n      Ctor = arg.constructor,\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding,\r\n      guard = 5;\r\n\r\n    // Default base is 10.\r\n    if (base == null) {\r\n      base = new Ctor(10);\r\n      isBase10 = true;\r\n    } else {\r\n      base = new Ctor(base);\r\n      d = base.d;\r\n\r\n      // Return NaN if base is negative, or non-finite, or is 0 or 1.\r\n      if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\r\n\r\n      isBase10 = base.eq(10);\r\n    }\r\n\r\n    d = arg.d;\r\n\r\n    // Is arg negative, non-finite, 0 or 1?\r\n    if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\r\n      return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\r\n    }\r\n\r\n    // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\r\n    // integer power of 10.\r\n    if (isBase10) {\r\n      if (d.length > 1) {\r\n        inf = true;\r\n      } else {\r\n        for (k = d[0]; k % 10 === 0;) k /= 10;\r\n        inf = k !== 1;\r\n      }\r\n    }\r\n\r\n    external = false;\r\n    sd = pr + guard;\r\n    num = naturalLogarithm(arg, sd);\r\n    denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n\r\n    // The result will have 5 rounding digits.\r\n    r = divide(num, denominator, sd, 1);\r\n\r\n    // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\r\n    // calculate 10 further digits.\r\n    //\r\n    // If the result is known to have an infinite decimal expansion, repeat this until it is clear\r\n    // that the result is above or below the boundary. Otherwise, if after calculating the 10\r\n    // further digits, the last 14 are nines, round up and assume the result is exact.\r\n    // Also assume the result is exact if the last 14 are zero.\r\n    //\r\n    // Example of a result that will be incorrectly rounded:\r\n    // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\r\n    // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\r\n    // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\r\n    // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\r\n    // place is still 2.6.\r\n    if (checkRoundingDigits(r.d, k = pr, rm)) {\r\n\r\n      do {\r\n        sd += 10;\r\n        num = naturalLogarithm(arg, sd);\r\n        denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n        r = divide(num, denominator, sd, 1);\r\n\r\n        if (!inf) {\r\n\r\n          // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\r\n          if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\r\n            r = finalise(r, pr + 1, 0);\r\n          }\r\n\r\n          break;\r\n        }\r\n      } while (checkRoundingDigits(r.d, k += 10, rm));\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, pr, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n  P.max = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, 'lt');\r\n  };\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n  P.min = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, 'gt');\r\n  };\r\n   */\r\n\r\n\r\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.minus = P.sub = function (y) {\r\n    var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // If either is not finite...\r\n    if (!x.d || !y.d) {\r\n\r\n      // Return NaN if either is NaN.\r\n      if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n      // Return y negated if x is finite and y is ±Infinity.\r\n      else if (x.d) y.s = -y.s;\r\n\r\n      // Return x if y is finite and x is ±Infinity.\r\n      // Return x if both are ±Infinity with different signs.\r\n      // Return NaN if both are ±Infinity with the same sign.\r\n      else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\r\n\r\n      return y;\r\n    }\r\n\r\n    // If signs differ...\r\n    if (x.s != y.s) {\r\n      y.s = -y.s;\r\n      return x.plus(y);\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    // If either is zero...\r\n    if (!xd[0] || !yd[0]) {\r\n\r\n      // Return y negated if x is zero and y is non-zero.\r\n      if (yd[0]) y.s = -y.s;\r\n\r\n      // Return x if y is zero and x is non-zero.\r\n      else if (xd[0]) y = new Ctor(x);\r\n\r\n      // Return zero if both are zero.\r\n      // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\r\n      else return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n      return external ? finalise(y, pr, rm) : y;\r\n    }\r\n\r\n    // x and y are finite, non-zero numbers with the same sign.\r\n\r\n    // Calculate base 1e7 exponents.\r\n    e = mathfloor(y.e / LOG_BASE);\r\n    xe = mathfloor(x.e / LOG_BASE);\r\n\r\n    xd = xd.slice();\r\n    k = xe - e;\r\n\r\n    // If base 1e7 exponents differ...\r\n    if (k) {\r\n      xLTy = k < 0;\r\n\r\n      if (xLTy) {\r\n        d = xd;\r\n        k = -k;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = xe;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Numbers with massively different exponents would result in a very high number of\r\n      // zeros needing to be prepended, but this can be avoided while still ensuring correct\r\n      // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n      if (k > i) {\r\n        k = i;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      d.reverse();\r\n      for (i = k; i--;) d.push(0);\r\n      d.reverse();\r\n\r\n    // Base 1e7 exponents equal.\r\n    } else {\r\n\r\n      // Check digits to determine which is the bigger number.\r\n\r\n      i = xd.length;\r\n      len = yd.length;\r\n      xLTy = i < len;\r\n      if (xLTy) len = i;\r\n\r\n      for (i = 0; i < len; i++) {\r\n        if (xd[i] != yd[i]) {\r\n          xLTy = xd[i] < yd[i];\r\n          break;\r\n        }\r\n      }\r\n\r\n      k = 0;\r\n    }\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      xd = yd;\r\n      yd = d;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    len = xd.length;\r\n\r\n    // Append zeros to `xd` if shorter.\r\n    // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\r\n    for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n    // Subtract yd from xd.\r\n    for (i = yd.length; i > k;) {\r\n\r\n      if (xd[--i] < yd[i]) {\r\n        for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n        --xd[j];\r\n        xd[i] += BASE;\r\n      }\r\n\r\n      xd[i] -= yd[i];\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; xd[--len] === 0;) xd.pop();\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n    // Zero?\r\n    if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n    y.d = xd;\r\n    y.e = getBase10Exponent(xd, e);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * The result depends on the modulo mode.\r\n   *\r\n   */\r\n  P.modulo = P.mod = function (y) {\r\n    var q,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\r\n    if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\r\n\r\n    // Return x if y is ±Infinity or x is ±0.\r\n    if (!y.d || x.d && !x.d[0]) {\r\n      return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\r\n    }\r\n\r\n    // Prevent rounding of intermediate calculations.\r\n    external = false;\r\n\r\n    if (Ctor.modulo == 9) {\r\n\r\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n      // result = x - q * y    where  0 <= result < abs(y)\r\n      q = divide(x, y.abs(), 0, 3, 1);\r\n      q.s *= y.s;\r\n    } else {\r\n      q = divide(x, y, 0, Ctor.modulo, 1);\r\n    }\r\n\r\n    q = q.times(y);\r\n\r\n    external = true;\r\n\r\n    return x.minus(q);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n   * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.naturalExponential = P.exp = function () {\r\n    return naturalExponential(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.naturalLogarithm = P.ln = function () {\r\n    return naturalLogarithm(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n   * -1.\r\n   *\r\n   */\r\n  P.negated = P.neg = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = -x.s;\r\n    return finalise(x);\r\n  };\r\n\r\n\r\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.plus = P.add = function (y) {\r\n    var carry, d, e, i, k, len, pr, rm, xd, yd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // If either is not finite...\r\n    if (!x.d || !y.d) {\r\n\r\n      // Return NaN if either is NaN.\r\n      if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n      // Return x if y is finite and x is ±Infinity.\r\n      // Return x if both are ±Infinity with the same sign.\r\n      // Return NaN if both are ±Infinity with different signs.\r\n      // Return y if x is finite and y is ±Infinity.\r\n      else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\r\n\r\n      return y;\r\n    }\r\n\r\n     // If signs differ...\r\n    if (x.s != y.s) {\r\n      y.s = -y.s;\r\n      return x.minus(y);\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    // If either is zero...\r\n    if (!xd[0] || !yd[0]) {\r\n\r\n      // Return x if y is zero.\r\n      // Return y if y is non-zero.\r\n      if (!yd[0]) y = new Ctor(x);\r\n\r\n      return external ? finalise(y, pr, rm) : y;\r\n    }\r\n\r\n    // x and y are finite, non-zero numbers with the same sign.\r\n\r\n    // Calculate base 1e7 exponents.\r\n    k = mathfloor(x.e / LOG_BASE);\r\n    e = mathfloor(y.e / LOG_BASE);\r\n\r\n    xd = xd.slice();\r\n    i = k - e;\r\n\r\n    // If base 1e7 exponents differ...\r\n    if (i) {\r\n\r\n      if (i < 0) {\r\n        d = xd;\r\n        i = -i;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = k;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n      k = Math.ceil(pr / LOG_BASE);\r\n      len = k > len ? k + 1 : len + 1;\r\n\r\n      if (i > len) {\r\n        i = len;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n      d.reverse();\r\n      for (; i--;) d.push(0);\r\n      d.reverse();\r\n    }\r\n\r\n    len = xd.length;\r\n    i = yd.length;\r\n\r\n    // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n    if (len - i < 0) {\r\n      i = len;\r\n      d = yd;\r\n      yd = xd;\r\n      xd = d;\r\n    }\r\n\r\n    // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n    for (carry = 0; i;) {\r\n      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n      xd[i] %= BASE;\r\n    }\r\n\r\n    if (carry) {\r\n      xd.unshift(carry);\r\n      ++e;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n    y.d = xd;\r\n    y.e = getBase10Exponent(xd, e);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of significant digits of the value of this Decimal.\r\n   *\r\n   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n   *\r\n   */\r\n  P.precision = P.sd = function (z) {\r\n    var k,\r\n      x = this;\r\n\r\n    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n    if (x.d) {\r\n      k = getPrecision(x.d);\r\n      if (z && x.e + 1 > k) k = x.e + 1;\r\n    } else {\r\n      k = NaN;\r\n    }\r\n\r\n    return k;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n   * rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.round = function () {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   *\r\n   * sin(0)         = 0\r\n   * sin(-0)        = -0\r\n   * sin(Infinity)  = NaN\r\n   * sin(-Infinity) = NaN\r\n   * sin(NaN)       = NaN\r\n   *\r\n   */\r\n  P.sine = P.sin = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n    Ctor.rounding = 1;\r\n\r\n    x = sine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N)  =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I)  =  I\r\n   *  sqrt(0)  =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var m, n, sd, r, rep, t,\r\n      x = this,\r\n      d = x.d,\r\n      e = x.e,\r\n      s = x.s,\r\n      Ctor = x.constructor;\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if (s !== 1 || !d || !d[0]) {\r\n      return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\r\n    }\r\n\r\n    external = false;\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+x);\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = digitsToString(d);\r\n\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(n);\r\n      e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new Ctor(n);\r\n    } else {\r\n      r = new Ctor(s.toString());\r\n    }\r\n\r\n    sd = (e = Ctor.precision) + 3;\r\n\r\n    // Newton-Raphson iteration.\r\n    for (;;) {\r\n      t = r;\r\n      r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\r\n\r\n      // TODO? Replace with for-loop and checkRoundingDigits.\r\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n        n = n.slice(sd - 3, sd + 1);\r\n\r\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n        // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n        if (n == '9999' || !rep && n == '4999') {\r\n\r\n          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n          // nines may infinitely repeat.\r\n          if (!rep) {\r\n            finalise(t, e + 1, 0);\r\n\r\n            if (t.times(t).eq(x)) {\r\n              r = t;\r\n              break;\r\n            }\r\n          }\r\n\r\n          sd += 4;\r\n          rep = 1;\r\n        } else {\r\n\r\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n          // If not, then there are further digits and m will be truthy.\r\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n            // Truncate to the first rounding digit.\r\n            finalise(r, e + 1, 1);\r\n            m = !r.times(r).eq(x);\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, e, Ctor.rounding, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * tan(0)         = 0\r\n   * tan(-0)        = -0\r\n   * tan(Infinity)  = NaN\r\n   * tan(-Infinity) = NaN\r\n   * tan(NaN)       = NaN\r\n   *\r\n   */\r\n  P.tangent = P.tan = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 10;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.sin();\r\n    x.s = 1;\r\n    x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.times = P.mul = function (y) {\r\n    var carry, e, i, k, r, rL, t, xdL, ydL,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      xd = x.d,\r\n      yd = (y = new Ctor(y)).d;\r\n\r\n    y.s *= x.s;\r\n\r\n     // If either is NaN, ±Infinity or ±0...\r\n    if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n      return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\r\n\r\n        // Return NaN if either is NaN.\r\n        // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\r\n        ? NaN\r\n\r\n        // Return ±Infinity if either is ±Infinity.\r\n        // Return ±0 if either is ±0.\r\n        : !xd || !yd ? y.s / 0 : y.s * 0);\r\n    }\r\n\r\n    e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\r\n    xdL = xd.length;\r\n    ydL = yd.length;\r\n\r\n    // Ensure xd points to the longer array.\r\n    if (xdL < ydL) {\r\n      r = xd;\r\n      xd = yd;\r\n      yd = r;\r\n      rL = xdL;\r\n      xdL = ydL;\r\n      ydL = rL;\r\n    }\r\n\r\n    // Initialise the result array with zeros.\r\n    r = [];\r\n    rL = xdL + ydL;\r\n    for (i = rL; i--;) r.push(0);\r\n\r\n    // Multiply!\r\n    for (i = ydL; --i >= 0;) {\r\n      carry = 0;\r\n      for (k = xdL + i; k > i;) {\r\n        t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n        r[k--] = t % BASE | 0;\r\n        carry = t / BASE | 0;\r\n      }\r\n\r\n      r[k] = (r[k] + carry) % BASE | 0;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; !r[--rL];) r.pop();\r\n\r\n    if (carry) ++e;\r\n    else r.shift();\r\n\r\n    y.d = r;\r\n    y.e = getBase10Exponent(r, e);\r\n\r\n    return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toBinary = function (sd, rm) {\r\n    return toStringBinary(this, 2, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n   *\r\n   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toDecimalPlaces = P.toDP = function (dp, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    x = new Ctor(x);\r\n    if (dp === void 0) return x;\r\n\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    return finalise(x, dp + x.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in exponential notation rounded to\r\n   * `dp` fixed decimal places using rounding mode `rounding`.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    var str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) {\r\n      str = finiteToString(x, true);\r\n    } else {\r\n      checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = finalise(new Ctor(x), dp + 1, rm);\r\n      str = finiteToString(x, true, dp + 1);\r\n    }\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n   * omitted.\r\n   *\r\n   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   * (-0).toFixed(3) is '0.000'.\r\n   * (-0.5).toFixed(0) is '-0'.\r\n   *\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    var str, y,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) {\r\n      str = finiteToString(x);\r\n    } else {\r\n      checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      y = finalise(new Ctor(x), dp + x.e + 1, rm);\r\n      str = finiteToString(y, false, dp + y.e + 1);\r\n    }\r\n\r\n    // To determine whether to add the minus sign look at the value before it was rounded,\r\n    // i.e. look at `x` rather than `y`.\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n   * numerator and an integer denominator.\r\n   *\r\n   * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n   * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n   * value necessary to represent the number exactly.\r\n   *\r\n   * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n   *\r\n   */\r\n  P.toFraction = function (maxD) {\r\n    var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,\r\n      x = this,\r\n      xd = x.d,\r\n      Ctor = x.constructor;\r\n\r\n    if (!xd) return new Ctor(x);\r\n\r\n    n1 = d0 = new Ctor(1);\r\n    d1 = n0 = new Ctor(0);\r\n\r\n    d = new Ctor(d1);\r\n    e = d.e = getPrecision(xd) - x.e - 1;\r\n    k = e % LOG_BASE;\r\n    d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\r\n\r\n    if (maxD == null) {\r\n\r\n      // d is 10**e, the minimum max-denominator needed.\r\n      maxD = e > 0 ? d : n1;\r\n    } else {\r\n      n = new Ctor(maxD);\r\n      if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\r\n      maxD = n.gt(d) ? (e > 0 ? d : n1) : n;\r\n    }\r\n\r\n    external = false;\r\n    n = new Ctor(digitsToString(xd));\r\n    pr = Ctor.precision;\r\n    Ctor.precision = e = xd.length * LOG_BASE * 2;\r\n\r\n    for (;;)  {\r\n      q = divide(n, d, 0, 1, 1);\r\n      d2 = d0.plus(q.times(d1));\r\n      if (d2.cmp(maxD) == 1) break;\r\n      d0 = d1;\r\n      d1 = d2;\r\n      d2 = n1;\r\n      n1 = n0.plus(q.times(d2));\r\n      n0 = d2;\r\n      d2 = d;\r\n      d = n.minus(q.times(d2));\r\n      n = d2;\r\n    }\r\n\r\n    d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\r\n    n0 = n0.plus(d2.times(n1));\r\n    d0 = d0.plus(d2.times(d1));\r\n    n0.s = n1.s = x.s;\r\n\r\n    // Determine which fraction is closer to x, n0/d0 or n1/d1?\r\n    r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1\r\n        ? [n1, d1] : [n0, d0];\r\n\r\n    Ctor.precision = pr;\r\n    external = true;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toHexadecimal = P.toHex = function (sd, rm) {\r\n    return toStringBinary(this, 16, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding\r\n   * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.\r\n   *\r\n   * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n   * or `y` is NaN, in which case the return value will be also be NaN.\r\n   *\r\n   * The return value is not affected by the value of `precision`.\r\n   *\r\n   * y {number|string|Decimal} The magnitude to round to a multiple of.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toNearest() rounding mode not an integer: {rm}'\r\n   * 'toNearest() rounding mode out of range: {rm}'\r\n   *\r\n   */\r\n  P.toNearest = function (y, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    x = new Ctor(x);\r\n\r\n    if (y == null) {\r\n\r\n      // If x is not finite, return x.\r\n      if (!x.d) return x;\r\n\r\n      y = new Ctor(1);\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      y = new Ctor(y);\r\n      if (rm === void 0) {\r\n        rm = Ctor.rounding;\r\n      } else {\r\n        checkInt32(rm, 0, 8);\r\n      }\r\n\r\n      // If x is not finite, return x if y is not NaN, else NaN.\r\n      if (!x.d) return y.s ? x : y;\r\n\r\n      // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\r\n      if (!y.d) {\r\n        if (y.s) y.s = x.s;\r\n        return y;\r\n      }\r\n    }\r\n\r\n    // If y is not zero, calculate the nearest multiple of y to x.\r\n    if (y.d[0]) {\r\n      external = false;\r\n      x = divide(x, y, 0, rm, 1).times(y);\r\n      external = true;\r\n      finalise(x);\r\n\r\n    // If y is zero, return zero with the sign of x.\r\n    } else {\r\n      y.s = x.s;\r\n      x = y;\r\n    }\r\n\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this Decimal converted to a number primitive.\r\n   * Zero keeps its sign.\r\n   *\r\n   */\r\n  P.toNumber = function () {\r\n    return +this;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toOctal = function (sd, rm) {\r\n    return toStringBinary(this, 8, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n   * to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * ECMAScript compliant.\r\n   *\r\n   *   pow(x, NaN)                           = NaN\r\n   *   pow(x, ±0)                            = 1\r\n\r\n   *   pow(NaN, non-zero)                    = NaN\r\n   *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n   *   pow(abs(x) > 1, -Infinity)            = +0\r\n   *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n   *   pow(abs(x) < 1, +Infinity)            = +0\r\n   *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n   *   pow(+Infinity, y > 0)                 = +Infinity\r\n   *   pow(+Infinity, y < 0)                 = +0\r\n   *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n   *   pow(-Infinity, even integer > 0)      = +Infinity\r\n   *   pow(-Infinity, odd integer < 0)       = -0\r\n   *   pow(-Infinity, even integer < 0)      = +0\r\n   *   pow(+0, y > 0)                        = +0\r\n   *   pow(+0, y < 0)                        = +Infinity\r\n   *   pow(-0, odd integer > 0)              = -0\r\n   *   pow(-0, even integer > 0)             = +0\r\n   *   pow(-0, odd integer < 0)              = -Infinity\r\n   *   pow(-0, even integer < 0)             = +Infinity\r\n   *   pow(finite x < 0, finite non-integer) = NaN\r\n   *\r\n   * For non-integer or very large exponents pow(x, y) is calculated using\r\n   *\r\n   *   x^y = exp(y*ln(x))\r\n   *\r\n   * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n   * probability of an incorrectly rounded result\r\n   * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n   * i.e. 1 in 250,000,000,000,000\r\n   *\r\n   * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n   *\r\n   * y {number|string|Decimal} The power to which to raise this Decimal.\r\n   *\r\n   */\r\n  P.toPower = P.pow = function (y) {\r\n    var e, k, pr, r, rm, s,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      yn = +(y = new Ctor(y));\r\n\r\n    // Either ±Infinity, NaN or ±0?\r\n    if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\r\n\r\n    x = new Ctor(x);\r\n\r\n    if (x.eq(1)) return x;\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    if (y.eq(1)) return finalise(x, pr, rm);\r\n\r\n    // y exponent\r\n    e = mathfloor(y.e / LOG_BASE);\r\n\r\n    // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n    if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n      r = intPow(Ctor, x, k, pr);\r\n      return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\r\n    }\r\n\r\n    s = x.s;\r\n\r\n    // if x is negative\r\n    if (s < 0) {\r\n\r\n      // if y is not an integer\r\n      if (e < y.d.length - 1) return new Ctor(NaN);\r\n\r\n      // Result is positive if x is negative and the last digit of integer y is even.\r\n      if ((y.d[e] & 1) == 0) s = 1;\r\n\r\n      // if x.eq(-1)\r\n      if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\r\n        x.s = s;\r\n        return x;\r\n      }\r\n    }\r\n\r\n    // Estimate result exponent.\r\n    // x^y = 10^e,  where e = y * log10(x)\r\n    // log10(x) = log10(x_significand) + x_exponent\r\n    // log10(x_significand) = ln(x_significand) / ln(10)\r\n    k = mathpow(+x, yn);\r\n    e = k == 0 || !isFinite(k)\r\n      ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))\r\n      : new Ctor(k + '').e;\r\n\r\n    // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\r\n\r\n    // Overflow/underflow?\r\n    if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\r\n\r\n    external = false;\r\n    Ctor.rounding = x.s = 1;\r\n\r\n    // Estimate the extra guard digits needed to ensure five correct rounding digits from\r\n    // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\r\n    // new Decimal(2.32456).pow('2087987436534566.46411')\r\n    // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\r\n    k = Math.min(12, (e + '').length);\r\n\r\n    // r = x^y = exp(y*ln(x))\r\n    r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\r\n\r\n    // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\r\n    if (r.d) {\r\n\r\n      // Truncate to the required precision plus five rounding digits.\r\n      r = finalise(r, pr + 5, 1);\r\n\r\n      // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\r\n      // the result.\r\n      if (checkRoundingDigits(r.d, pr, rm)) {\r\n        e = pr + 10;\r\n\r\n        // Truncate to the increased precision plus five rounding digits.\r\n        r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\r\n\r\n        // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\r\n        if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\r\n          r = finalise(r, pr + 1, 0);\r\n        }\r\n      }\r\n    }\r\n\r\n    r.s = s;\r\n    external = true;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(r, pr, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    var str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = finalise(new Ctor(x), sd, rm);\r\n      str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\r\n    }\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n   * omitted.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toSD() digits out of range: {sd}'\r\n   * 'toSD() digits not an integer: {sd}'\r\n   * 'toSD() rounding mode not an integer: {rm}'\r\n   * 'toSD() rounding mode out of range: {rm}'\r\n   *\r\n   */\r\n  P.toSignificantDigits = P.toSD = function (sd, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      sd = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n    }\r\n\r\n    return finalise(new Ctor(x), sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   *\r\n   * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n   *\r\n   */\r\n  P.toString = function () {\r\n    var x = this,\r\n      Ctor = x.constructor,\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n   *\r\n   */\r\n  P.truncated = P.trunc = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   * Unlike `toString`, negative zero will include the minus sign.\r\n   *\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    var x = this,\r\n      Ctor = x.constructor,\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n    return x.isNeg() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n  /*\r\n   *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n   *                           finiteToString, naturalExponential, naturalLogarithm\r\n   *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n   *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n   *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n   *  convertBase              toStringBinary, parseOther\r\n   *  cos                      P.cos\r\n   *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n   *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n   *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n   *                           taylorSeries, atan2, parseOther\r\n   *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n   *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n   *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n   *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n   *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n   *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n   *                           naturalLogarithm, ceil, floor, round, trunc\r\n   *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n   *                           toStringBinary\r\n   *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n   *  getLn10                  P.logarithm, naturalLogarithm\r\n   *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n   *  getPrecision             P.precision, P.toFraction\r\n   *  getZeroString            digitsToString, finiteToString\r\n   *  intPow                   P.toPower, parseOther\r\n   *  isOdd                    toLessThanHalfPi\r\n   *  maxOrMin                 max, min\r\n   *  naturalExponential       P.naturalExponential, P.toPower\r\n   *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n   *                           P.toPower, naturalExponential\r\n   *  nonFiniteToString        finiteToString, toStringBinary\r\n   *  parseDecimal             Decimal\r\n   *  parseOther               Decimal\r\n   *  sin                      P.sin\r\n   *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n   *  toLessThanHalfPi         P.cos, P.sin\r\n   *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n   *  truncate                 intPow\r\n   *\r\n   *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n   *                           naturalLogarithm, config, parseOther, random, Decimal\r\n   */\r\n\r\n\r\n  function digitsToString(d) {\r\n    var i, k, ws,\r\n      indexOfLastWord = d.length - 1,\r\n      str = '',\r\n      w = d[0];\r\n\r\n    if (indexOfLastWord > 0) {\r\n      str += w;\r\n      for (i = 1; i < indexOfLastWord; i++) {\r\n        ws = d[i] + '';\r\n        k = LOG_BASE - ws.length;\r\n        if (k) str += getZeroString(k);\r\n        str += ws;\r\n      }\r\n\r\n      w = d[i];\r\n      ws = w + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n    } else if (w === 0) {\r\n      return '0';\r\n    }\r\n\r\n    // Remove trailing zeros of last w.\r\n    for (; w % 10 === 0;) w /= 10;\r\n\r\n    return str + w;\r\n  }\r\n\r\n\r\n  function checkInt32(i, min, max) {\r\n    if (i !== ~~i || i < min || i > max) {\r\n      throw Error(invalidArgument + i);\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n   * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n   * `repeating == null` if caller is `log` or `pow`,\r\n   * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n   */\r\n  function checkRoundingDigits(d, i, rm, repeating) {\r\n    var di, k, r, rd;\r\n\r\n    // Get the length of the first word of the array d.\r\n    for (k = d[0]; k >= 10; k /= 10) --i;\r\n\r\n    // Is the rounding digit in the first word of d?\r\n    if (--i < 0) {\r\n      i += LOG_BASE;\r\n      di = 0;\r\n    } else {\r\n      di = Math.ceil((i + 1) / LOG_BASE);\r\n      i %= LOG_BASE;\r\n    }\r\n\r\n    // i is the index (0 - 6) of the rounding digit.\r\n    // E.g. if within the word 3487563 the first rounding digit is 5,\r\n    // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\r\n    k = mathpow(10, LOG_BASE - i);\r\n    rd = d[di] % k | 0;\r\n\r\n    if (repeating == null) {\r\n      if (i < 3) {\r\n        if (i == 0) rd = rd / 100 | 0;\r\n        else if (i == 1) rd = rd / 10 | 0;\r\n        r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\r\n      } else {\r\n        r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&\r\n          (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||\r\n            (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\r\n      }\r\n    } else {\r\n      if (i < 4) {\r\n        if (i == 0) rd = rd / 1000 | 0;\r\n        else if (i == 1) rd = rd / 100 | 0;\r\n        else if (i == 2) rd = rd / 10 | 0;\r\n        r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\r\n      } else {\r\n        r = ((repeating || rm < 4) && rd + 1 == k ||\r\n        (!repeating && rm > 3) && rd + 1 == k / 2) &&\r\n          (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\r\n      }\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  // Convert string of `baseIn` to an array of numbers of `baseOut`.\r\n  // Eg. convertBase('255', 10, 16) returns [15, 15].\r\n  // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\n  function convertBase(str, baseIn, baseOut) {\r\n    var j,\r\n      arr = [0],\r\n      arrL,\r\n      i = 0,\r\n      strL = str.length;\r\n\r\n    for (; i < strL;) {\r\n      for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\r\n      arr[0] += NUMERALS.indexOf(str.charAt(i++));\r\n      for (j = 0; j < arr.length; j++) {\r\n        if (arr[j] > baseOut - 1) {\r\n          if (arr[j + 1] === void 0) arr[j + 1] = 0;\r\n          arr[j + 1] += arr[j] / baseOut | 0;\r\n          arr[j] %= baseOut;\r\n        }\r\n      }\r\n    }\r\n\r\n    return arr.reverse();\r\n  }\r\n\r\n\r\n  /*\r\n   * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */\r\n  function cosine(Ctor, x) {\r\n    var k, len, y;\r\n\r\n    if (x.isZero()) return x;\r\n\r\n    // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\r\n    // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    len = x.d.length;\r\n    if (len < 32) {\r\n      k = Math.ceil(len / 3);\r\n      y = (1 / tinyPow(4, k)).toString();\r\n    } else {\r\n      k = 16;\r\n      y = '2.3283064365386962890625e-10';\r\n    }\r\n\r\n    Ctor.precision += k;\r\n\r\n    x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\r\n\r\n    // Reverse argument reduction\r\n    for (var i = k; i--;) {\r\n      var cos2x = x.times(x);\r\n      x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\r\n    }\r\n\r\n    Ctor.precision -= k;\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Perform division in the specified base.\r\n   */\r\n  var divide = (function () {\r\n\r\n    // Assumes non-zero x and k, and hence non-zero result.\r\n    function multiplyInteger(x, k, base) {\r\n      var temp,\r\n        carry = 0,\r\n        i = x.length;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        temp = x[i] * k + carry;\r\n        x[i] = temp % base | 0;\r\n        carry = temp / base | 0;\r\n      }\r\n\r\n      if (carry) x.unshift(carry);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, r;\r\n\r\n      if (aL != bL) {\r\n        r = aL > bL ? 1 : -1;\r\n      } else {\r\n        for (i = r = 0; i < aL; i++) {\r\n          if (a[i] != b[i]) {\r\n            r = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return r;\r\n    }\r\n\r\n    function subtract(a, b, aL, base) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * base + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1;) a.shift();\r\n    }\r\n\r\n    return function (x, y, pr, rm, dp, base) {\r\n      var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,\r\n        yL, yz,\r\n        Ctor = x.constructor,\r\n        sign = x.s == y.s ? 1 : -1,\r\n        xd = x.d,\r\n        yd = y.d;\r\n\r\n      // Either NaN, Infinity or 0?\r\n      if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n        return new Ctor(// Return NaN if either NaN, or both Infinity or 0.\r\n          !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\r\n\r\n          // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\r\n          xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\r\n      }\r\n\r\n      if (base) {\r\n        logBase = 1;\r\n        e = x.e - y.e;\r\n      } else {\r\n        base = BASE;\r\n        logBase = LOG_BASE;\r\n        e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\r\n      }\r\n\r\n      yL = yd.length;\r\n      xL = xd.length;\r\n      q = new Ctor(sign);\r\n      qd = q.d = [];\r\n\r\n      // Result exponent may be one less than e.\r\n      // The digit array of a Decimal from toStringBinary may have trailing zeros.\r\n      for (i = 0; yd[i] == (xd[i] || 0); i++);\r\n\r\n      if (yd[i] > (xd[i] || 0)) e--;\r\n\r\n      if (pr == null) {\r\n        sd = pr = Ctor.precision;\r\n        rm = Ctor.rounding;\r\n      } else if (dp) {\r\n        sd = pr + (x.e - y.e) + 1;\r\n      } else {\r\n        sd = pr;\r\n      }\r\n\r\n      if (sd < 0) {\r\n        qd.push(1);\r\n        more = true;\r\n      } else {\r\n\r\n        // Convert precision in number of base 10 digits to base 1e7 digits.\r\n        sd = sd / logBase + 2 | 0;\r\n        i = 0;\r\n\r\n        // divisor < 1e7\r\n        if (yL == 1) {\r\n          k = 0;\r\n          yd = yd[0];\r\n          sd++;\r\n\r\n          // k is the carry.\r\n          for (; (i < xL || k) && sd--; i++) {\r\n            t = k * base + (xd[i] || 0);\r\n            qd[i] = t / yd | 0;\r\n            k = t % yd | 0;\r\n          }\r\n\r\n          more = k || i < xL;\r\n\r\n        // divisor >= 1e7\r\n        } else {\r\n\r\n          // Normalise xd and yd so highest order digit of yd is >= base/2\r\n          k = base / (yd[0] + 1) | 0;\r\n\r\n          if (k > 1) {\r\n            yd = multiplyInteger(yd, k, base);\r\n            xd = multiplyInteger(xd, k, base);\r\n            yL = yd.length;\r\n            xL = xd.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xd.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL;) rem[remL++] = 0;\r\n\r\n          yz = yd.slice();\r\n          yz.unshift(0);\r\n          yd0 = yd[0];\r\n\r\n          if (yd[1] >= base / 2) ++yd0;\r\n\r\n          do {\r\n            k = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yd, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, k.\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // k will be how many times the divisor goes into the current remainder.\r\n              k = rem0 / yd0 | 0;\r\n\r\n              //  Algorithm:\r\n              //  1. product = divisor * trial digit (k)\r\n              //  2. if product > remainder: product -= divisor, k--\r\n              //  3. remainder -= product\r\n              //  4. if product was < remainder at 2:\r\n              //    5. compare new remainder and divisor\r\n              //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n              if (k > 1) {\r\n                if (k >= base) k = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiplyInteger(yd, k, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                cmp = compare(prod, rem, prodL, remL);\r\n\r\n                // product > remainder.\r\n                if (cmp == 1) {\r\n                  k--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yd, prodL, base);\r\n                }\r\n              } else {\r\n\r\n                // cmp is -1.\r\n                // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n                // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n                if (k == 0) cmp = k = 1;\r\n                prod = yd.slice();\r\n              }\r\n\r\n              prodL = prod.length;\r\n              if (prodL < remL) prod.unshift(0);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n\r\n              // If product was < previous remainder.\r\n              if (cmp == -1) {\r\n                remL = rem.length;\r\n\r\n                // Compare divisor and new remainder.\r\n                cmp = compare(yd, rem, yL, remL);\r\n\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                if (cmp < 1) {\r\n                  k++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yd, remL, base);\r\n                }\r\n              }\r\n\r\n              remL = rem.length;\r\n            } else if (cmp === 0) {\r\n              k++;\r\n              rem = [0];\r\n            }    // if cmp === 1, k will be 0\r\n\r\n            // Add the next digit, k, to the result array.\r\n            qd[i++] = k;\r\n\r\n            // Update the remainder.\r\n            if (cmp && rem[0]) {\r\n              rem[remL++] = xd[xi] || 0;\r\n            } else {\r\n              rem = [xd[xi]];\r\n              remL = 1;\r\n            }\r\n\r\n          } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n\r\n          more = rem[0] !== void 0;\r\n        }\r\n\r\n        // Leading zero?\r\n        if (!qd[0]) qd.shift();\r\n      }\r\n\r\n      // logBase is 1 when divide is being used for base conversion.\r\n      if (logBase == 1) {\r\n        q.e = e;\r\n        inexact = more;\r\n      } else {\r\n\r\n        // To calculate q.e, first get the number of digits of qd[0].\r\n        for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\r\n        q.e = i + e * logBase - 1;\r\n\r\n        finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\r\n      }\r\n\r\n      return q;\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n   * Check for over/under-flow.\r\n   */\r\n   function finalise(x, sd, rm, isTruncated) {\r\n    var digits, i, j, k, rd, roundUp, w, xd, xdi,\r\n      Ctor = x.constructor;\r\n\r\n    // Don't round if sd is null or undefined.\r\n    out: if (sd != null) {\r\n      xd = x.d;\r\n\r\n      // Infinity/NaN.\r\n      if (!xd) return x;\r\n\r\n      // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      // w: the word of xd containing rd, a base 1e7 number.\r\n      // xdi: the index of w within xd.\r\n      // digits: the number of digits of w.\r\n      // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n      // they had leading zeros)\r\n      // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n      // Get the length of the first word of the digits array xd.\r\n      for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\r\n      i = sd - digits;\r\n\r\n      // Is the rounding digit in the first word of xd?\r\n      if (i < 0) {\r\n        i += LOG_BASE;\r\n        j = sd;\r\n        w = xd[xdi = 0];\r\n\r\n        // Get the rounding digit at index j of w.\r\n        rd = w / mathpow(10, digits - j - 1) % 10 | 0;\r\n      } else {\r\n        xdi = Math.ceil((i + 1) / LOG_BASE);\r\n        k = xd.length;\r\n        if (xdi >= k) {\r\n          if (isTruncated) {\r\n\r\n            // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\r\n            for (; k++ <= xdi;) xd.push(0);\r\n            w = rd = 0;\r\n            digits = 1;\r\n            i %= LOG_BASE;\r\n            j = i - LOG_BASE + 1;\r\n          } else {\r\n            break out;\r\n          }\r\n        } else {\r\n          w = k = xd[xdi];\r\n\r\n          // Get the number of digits of w.\r\n          for (digits = 1; k >= 10; k /= 10) digits++;\r\n\r\n          // Get the index of rd within w.\r\n          i %= LOG_BASE;\r\n\r\n          // Get the index of rd within w, adjusted for leading zeros.\r\n          // The number of leading zeros of w is given by LOG_BASE - digits.\r\n          j = i - LOG_BASE + digits;\r\n\r\n          // Get the rounding digit at index j of w.\r\n          rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\r\n        }\r\n      }\r\n\r\n      // Are there any non-zero digits after the rounding digit?\r\n      isTruncated = isTruncated || sd < 0 ||\r\n        xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\r\n\r\n      // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\r\n      // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\r\n      // will give 714.\r\n\r\n      roundUp = rm < 4\r\n        ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n        : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n            rm == (x.s < 0 ? 8 : 7));\r\n\r\n      if (sd < 1 || !xd[0]) {\r\n        xd.length = 0;\r\n        if (roundUp) {\r\n\r\n          // Convert sd to decimal places.\r\n          sd -= x.e + 1;\r\n\r\n          // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n          xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n          x.e = -sd || 0;\r\n        } else {\r\n\r\n          // Zero.\r\n          xd[0] = x.e = 0;\r\n        }\r\n\r\n        return x;\r\n      }\r\n\r\n      // Remove excess digits.\r\n      if (i == 0) {\r\n        xd.length = xdi;\r\n        k = 1;\r\n        xdi--;\r\n      } else {\r\n        xd.length = xdi + 1;\r\n        k = mathpow(10, LOG_BASE - i);\r\n\r\n        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n        // j > 0 means i > number of leading zeros of w.\r\n        xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\r\n      }\r\n\r\n      if (roundUp) {\r\n        for (;;) {\r\n\r\n          // Is the digit to be rounded up in the first word of xd?\r\n          if (xdi == 0) {\r\n\r\n            // i will be the length of xd[0] before k is added.\r\n            for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\r\n            j = xd[0] += k;\r\n            for (k = 1; j >= 10; j /= 10) k++;\r\n\r\n            // if i != k the length has increased.\r\n            if (i != k) {\r\n              x.e++;\r\n              if (xd[0] == BASE) xd[0] = 1;\r\n            }\r\n\r\n            break;\r\n          } else {\r\n            xd[xdi] += k;\r\n            if (xd[xdi] != BASE) break;\r\n            xd[xdi--] = 0;\r\n            k = 1;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Remove trailing zeros.\r\n      for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n    }\r\n\r\n    if (external) {\r\n\r\n      // Overflow?\r\n      if (x.e > Ctor.maxE) {\r\n\r\n        // Infinity.\r\n        x.d = null;\r\n        x.e = NaN;\r\n\r\n      // Underflow?\r\n      } else if (x.e < Ctor.minE) {\r\n\r\n        // Zero.\r\n        x.e = 0;\r\n        x.d = [0];\r\n        // Ctor.underflow = true;\r\n      } // else Ctor.underflow = false;\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function finiteToString(x, isExp, sd) {\r\n    if (!x.isFinite()) return nonFiniteToString(x);\r\n    var k,\r\n      e = x.e,\r\n      str = digitsToString(x.d),\r\n      len = str.length;\r\n\r\n    if (isExp) {\r\n      if (sd && (k = sd - len) > 0) {\r\n        str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n      } else if (len > 1) {\r\n        str = str.charAt(0) + '.' + str.slice(1);\r\n      }\r\n\r\n      str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\r\n    } else if (e < 0) {\r\n      str = '0.' + getZeroString(-e - 1) + str;\r\n      if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n    } else if (e >= len) {\r\n      str += getZeroString(e + 1 - len);\r\n      if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n    } else {\r\n      if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n      if (sd && (k = sd - len) > 0) {\r\n        if (e + 1 === len) str += '.';\r\n        str += getZeroString(k);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // Calculate the base 10 exponent from the base 1e7 exponent.\r\n  function getBase10Exponent(digits, e) {\r\n    var w = digits[0];\r\n\r\n    // Add the number of digits of the first word of the digits array.\r\n    for ( e *= LOG_BASE; w >= 10; w /= 10) e++;\r\n    return e;\r\n  }\r\n\r\n\r\n  function getLn10(Ctor, sd, pr) {\r\n    if (sd > LN10_PRECISION) {\r\n\r\n      // Reset global state in case the exception is caught.\r\n      external = true;\r\n      if (pr) Ctor.precision = pr;\r\n      throw Error(precisionLimitExceeded);\r\n    }\r\n    return finalise(new Ctor(LN10), sd, 1, true);\r\n  }\r\n\r\n\r\n  function getPi(Ctor, sd, rm) {\r\n    if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\r\n    return finalise(new Ctor(PI), sd, rm, true);\r\n  }\r\n\r\n\r\n  function getPrecision(digits) {\r\n    var w = digits.length - 1,\r\n      len = w * LOG_BASE + 1;\r\n\r\n    w = digits[w];\r\n\r\n    // If non-zero...\r\n    if (w) {\r\n\r\n      // Subtract the number of trailing zeros of the last word.\r\n      for (; w % 10 == 0; w /= 10) len--;\r\n\r\n      // Add the number of digits of the first word.\r\n      for (w = digits[0]; w >= 10; w /= 10) len++;\r\n    }\r\n\r\n    return len;\r\n  }\r\n\r\n\r\n  function getZeroString(k) {\r\n    var zs = '';\r\n    for (; k--;) zs += '0';\r\n    return zs;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n   * integer of type number.\r\n   *\r\n   * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n   *\r\n   */\r\n  function intPow(Ctor, x, n, pr) {\r\n    var isTruncated,\r\n      r = new Ctor(1),\r\n\r\n      // Max n of 9007199254740991 takes 53 loop iterations.\r\n      // Maximum digits array length; leaves [28, 34] guard digits.\r\n      k = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n    external = false;\r\n\r\n    for (;;) {\r\n      if (n % 2) {\r\n        r = r.times(x);\r\n        if (truncate(r.d, k)) isTruncated = true;\r\n      }\r\n\r\n      n = mathfloor(n / 2);\r\n      if (n === 0) {\r\n\r\n        // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\r\n        n = r.d.length - 1;\r\n        if (isTruncated && r.d[n] === 0) ++r.d[n];\r\n        break;\r\n      }\r\n\r\n      x = x.times(x);\r\n      truncate(x.d, k);\r\n    }\r\n\r\n    external = true;\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  function isOdd(n) {\r\n    return n.d[n.d.length - 1] & 1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\r\n   */\r\n  function maxOrMin(Ctor, args, ltgt) {\r\n    var y,\r\n      x = new Ctor(args[0]),\r\n      i = 0;\r\n\r\n    for (; ++i < args.length;) {\r\n      y = new Ctor(args[i]);\r\n      if (!y.s) {\r\n        x = y;\r\n        break;\r\n      } else if (x[ltgt](y)) {\r\n        x = y;\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   * Taylor/Maclaurin series.\r\n   *\r\n   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n   *\r\n   * Argument reduction:\r\n   *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n   *   exp(x) = exp(x / 2^k)^(2^k)\r\n   *\r\n   * Previously, the argument was initially reduced by\r\n   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n   * found to be slower than just dividing repeatedly by 32 as above.\r\n   *\r\n   * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n   * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n   *\r\n   *  exp(Infinity)  = Infinity\r\n   *  exp(-Infinity) = 0\r\n   *  exp(NaN)       = NaN\r\n   *  exp(±0)        = 1\r\n   *\r\n   *  exp(x) is non-terminating for any finite, non-zero x.\r\n   *\r\n   *  The result will always be correctly rounded.\r\n   *\r\n   */\r\n  function naturalExponential(x, sd) {\r\n    var denominator, guard, j, pow, sum, t, wpr,\r\n      rep = 0,\r\n      i = 0,\r\n      k = 0,\r\n      Ctor = x.constructor,\r\n      rm = Ctor.rounding,\r\n      pr = Ctor.precision;\r\n\r\n    // 0/NaN/Infinity?\r\n    if (!x.d || !x.d[0] || x.e > 17) {\r\n\r\n      return new Ctor(x.d\r\n        ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0\r\n        : x.s ? x.s < 0 ? 0 : x : 0 / 0);\r\n    }\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    t = new Ctor(0.03125);\r\n\r\n    // while abs(x) >= 0.1\r\n    while (x.e > -2) {\r\n\r\n      // x = x / 2^5\r\n      x = x.times(t);\r\n      k += 5;\r\n    }\r\n\r\n    // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\r\n    // necessary to ensure the first 4 rounding digits are correct.\r\n    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n    wpr += guard;\r\n    denominator = pow = sum = new Ctor(1);\r\n    Ctor.precision = wpr;\r\n\r\n    for (;;) {\r\n      pow = finalise(pow.times(x), wpr, 1);\r\n      denominator = denominator.times(++i);\r\n      t = sum.plus(divide(pow, denominator, wpr, 1));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        j = k;\r\n        while (j--) sum = finalise(sum.times(sum), wpr, 1);\r\n\r\n        // Check to see if the first 4 rounding digits are [49]999.\r\n        // If so, repeat the summation with a higher precision, otherwise\r\n        // e.g. with precision: 18, rounding: 1\r\n        // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\r\n        // `wpr - guard` is the index of first rounding digit.\r\n        if (sd == null) {\r\n\r\n          if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n            Ctor.precision = wpr += 10;\r\n            denominator = pow = t = new Ctor(1);\r\n            i = 0;\r\n            rep++;\r\n          } else {\r\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n          }\r\n        } else {\r\n          Ctor.precision = pr;\r\n          return sum;\r\n        }\r\n      }\r\n\r\n      sum = t;\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   *  ln(-n)        = NaN\r\n   *  ln(0)         = -Infinity\r\n   *  ln(-0)        = -Infinity\r\n   *  ln(1)         = 0\r\n   *  ln(Infinity)  = Infinity\r\n   *  ln(-Infinity) = NaN\r\n   *  ln(NaN)       = NaN\r\n   *\r\n   *  ln(n) (n != 1) is non-terminating.\r\n   *\r\n   */\r\n  function naturalLogarithm(y, sd) {\r\n    var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,\r\n      n = 1,\r\n      guard = 10,\r\n      x = y,\r\n      xd = x.d,\r\n      Ctor = x.constructor,\r\n      rm = Ctor.rounding,\r\n      pr = Ctor.precision;\r\n\r\n    // Is x negative or Infinity, NaN, 0 or 1?\r\n    if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\r\n      return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\r\n    }\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    Ctor.precision = wpr += guard;\r\n    c = digitsToString(xd);\r\n    c0 = c.charAt(0);\r\n\r\n    if (Math.abs(e = x.e) < 1.5e15) {\r\n\r\n      // Argument reduction.\r\n      // The series converges faster the closer the argument is to 1, so using\r\n      // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n      // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n      // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n      // later be divided by this number, then separate out the power of 10 using\r\n      // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n      // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n      //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n      // max n is 6 (gives 0.7 - 1.3)\r\n      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n        x = x.times(y);\r\n        c = digitsToString(x.d);\r\n        c0 = c.charAt(0);\r\n        n++;\r\n      }\r\n\r\n      e = x.e;\r\n\r\n      if (c0 > 1) {\r\n        x = new Ctor('0.' + c);\r\n        e++;\r\n      } else {\r\n        x = new Ctor(c0 + '.' + c.slice(1));\r\n      }\r\n    } else {\r\n\r\n      // The argument reduction method above may result in overflow if the argument y is a massive\r\n      // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n      // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n      t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n      x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n      Ctor.precision = pr;\r\n\r\n      return sd == null ? finalise(x, pr, rm, external = true) : x;\r\n    }\r\n\r\n    // x1 is x reduced to a value near 1.\r\n    x1 = x;\r\n\r\n    // Taylor series.\r\n    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n    // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n    sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\r\n    x2 = finalise(x.times(x), wpr, 1);\r\n    denominator = 3;\r\n\r\n    for (;;) {\r\n      numerator = finalise(numerator.times(x2), wpr, 1);\r\n      t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        sum = sum.times(2);\r\n\r\n        // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\r\n        // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\r\n        if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n        sum = divide(sum, new Ctor(n), wpr, 1);\r\n\r\n        // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\r\n        // been repeated previously) and the first 4 rounding digits 9999?\r\n        // If so, restart the summation with a higher precision, otherwise\r\n        // e.g. with precision: 12, rounding: 1\r\n        // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\r\n        // `wpr - guard` is the index of first rounding digit.\r\n        if (sd == null) {\r\n          if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n            Ctor.precision = wpr += guard;\r\n            t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\r\n            x2 = finalise(x.times(x), wpr, 1);\r\n            denominator = rep = 1;\r\n          } else {\r\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n          }\r\n        } else {\r\n          Ctor.precision = pr;\r\n          return sum;\r\n        }\r\n      }\r\n\r\n      sum = t;\r\n      denominator += 2;\r\n    }\r\n  }\r\n\r\n\r\n  // ±Infinity, NaN.\r\n  function nonFiniteToString(x) {\r\n    // Unsigned.\r\n    return String(x.s * x.s / 0);\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the value of a new Decimal `x` from string `str`.\r\n   */\r\n  function parseDecimal(x, str) {\r\n    var e, i, len;\r\n\r\n    // Decimal point?\r\n    if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n    // Exponential form?\r\n    if ((i = str.search(/e/i)) > 0) {\r\n\r\n      // Determine exponent.\r\n      if (e < 0) e = i;\r\n      e += +str.slice(i + 1);\r\n      str = str.substring(0, i);\r\n    } else if (e < 0) {\r\n\r\n      // Integer.\r\n      e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\r\n    str = str.slice(i, len);\r\n\r\n    if (str) {\r\n      len -= i;\r\n      x.e = e = e - i - 1;\r\n      x.d = [];\r\n\r\n      // Transform base\r\n\r\n      // e is the base 10 exponent.\r\n      // i is where to slice str to get the first word of the digits array.\r\n      i = (e + 1) % LOG_BASE;\r\n      if (e < 0) i += LOG_BASE;\r\n\r\n      if (i < len) {\r\n        if (i) x.d.push(+str.slice(0, i));\r\n        for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n        str = str.slice(i);\r\n        i = LOG_BASE - str.length;\r\n      } else {\r\n        i -= len;\r\n      }\r\n\r\n      for (; i--;) str += '0';\r\n      x.d.push(+str);\r\n\r\n      if (external) {\r\n\r\n        // Overflow?\r\n        if (x.e > x.constructor.maxE) {\r\n\r\n          // Infinity.\r\n          x.d = null;\r\n          x.e = NaN;\r\n\r\n        // Underflow?\r\n        } else if (x.e < x.constructor.minE) {\r\n\r\n          // Zero.\r\n          x.e = 0;\r\n          x.d = [0];\r\n          // x.constructor.underflow = true;\r\n        } // else x.constructor.underflow = false;\r\n      }\r\n    } else {\r\n\r\n      // Zero.\r\n      x.e = 0;\r\n      x.d = [0];\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n   */\r\n  function parseOther(x, str) {\r\n    var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\r\n\r\n    if (str.indexOf('_') > -1) {\r\n      str = str.replace(/(\\d)_(?=\\d)/g, '$1');\r\n      if (isDecimal.test(str)) return parseDecimal(x, str);\r\n    } else if (str === 'Infinity' || str === 'NaN') {\r\n      if (!+str) x.s = NaN;\r\n      x.e = NaN;\r\n      x.d = null;\r\n      return x;\r\n    }\r\n\r\n    if (isHex.test(str))  {\r\n      base = 16;\r\n      str = str.toLowerCase();\r\n    } else if (isBinary.test(str))  {\r\n      base = 2;\r\n    } else if (isOctal.test(str))  {\r\n      base = 8;\r\n    } else {\r\n      throw Error(invalidArgument + str);\r\n    }\r\n\r\n    // Is there a binary exponent part?\r\n    i = str.search(/p/i);\r\n\r\n    if (i > 0) {\r\n      p = +str.slice(i + 1);\r\n      str = str.substring(2, i);\r\n    } else {\r\n      str = str.slice(2);\r\n    }\r\n\r\n    // Convert `str` as an integer then divide the result by `base` raised to a power such that the\r\n    // fraction part will be restored.\r\n    i = str.indexOf('.');\r\n    isFloat = i >= 0;\r\n    Ctor = x.constructor;\r\n\r\n    if (isFloat) {\r\n      str = str.replace('.', '');\r\n      len = str.length;\r\n      i = len - i;\r\n\r\n      // log[10](16) = 1.2041... , log[10](88) = 1.9444....\r\n      divisor = intPow(Ctor, new Ctor(base), i, i * 2);\r\n    }\r\n\r\n    xd = convertBase(str, base, BASE);\r\n    xe = xd.length - 1;\r\n\r\n    // Remove trailing zeros.\r\n    for (i = xe; xd[i] === 0; --i) xd.pop();\r\n    if (i < 0) return new Ctor(x.s * 0);\r\n    x.e = getBase10Exponent(xd, xe);\r\n    x.d = xd;\r\n    external = false;\r\n\r\n    // At what precision to perform the division to ensure exact conversion?\r\n    // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\r\n    // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\r\n    // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\r\n    // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\r\n    // Therefore using 4 * the number of digits of str will always be enough.\r\n    if (isFloat) x = divide(x, divisor, len * 4);\r\n\r\n    // Multiply by the binary exponent part if present.\r\n    if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));\r\n    external = true;\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */\r\n  function sine(Ctor, x) {\r\n    var k,\r\n      len = x.d.length;\r\n\r\n    if (len < 3) {\r\n      return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);\r\n    }\r\n\r\n    // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\r\n    // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\r\n    // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    k = 1.4 * Math.sqrt(len);\r\n    k = k > 16 ? 16 : k | 0;\r\n\r\n    x = x.times(1 / tinyPow(5, k));\r\n    x = taylorSeries(Ctor, 2, x, x);\r\n\r\n    // Reverse argument reduction\r\n    var sin2_x,\r\n      d5 = new Ctor(5),\r\n      d16 = new Ctor(16),\r\n      d20 = new Ctor(20);\r\n    for (; k--;) {\r\n      sin2_x = x.times(x);\r\n      x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\r\n  function taylorSeries(Ctor, n, x, y, isHyperbolic) {\r\n    var j, t, u, x2,\r\n      i = 1,\r\n      pr = Ctor.precision,\r\n      k = Math.ceil(pr / LOG_BASE);\r\n\r\n    external = false;\r\n    x2 = x.times(x);\r\n    u = new Ctor(y);\r\n\r\n    for (;;) {\r\n      t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\r\n      u = isHyperbolic ? y.plus(t) : y.minus(t);\r\n      y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\r\n      t = u.plus(y);\r\n\r\n      if (t.d[k] !== void 0) {\r\n        for (j = k; t.d[j] === u.d[j] && j--;);\r\n        if (j == -1) break;\r\n      }\r\n\r\n      j = u;\r\n      u = y;\r\n      y = t;\r\n      t = j;\r\n      i++;\r\n    }\r\n\r\n    external = true;\r\n    t.d.length = k + 1;\r\n\r\n    return t;\r\n  }\r\n\r\n\r\n  // Exponent e must be positive and non-zero.\r\n  function tinyPow(b, e) {\r\n    var n = b;\r\n    while (--e) n *= b;\r\n    return n;\r\n  }\r\n\r\n\r\n  // Return the absolute value of `x` reduced to less than or equal to half pi.\r\n  function toLessThanHalfPi(Ctor, x) {\r\n    var t,\r\n      isNeg = x.s < 0,\r\n      pi = getPi(Ctor, Ctor.precision, 1),\r\n      halfPi = pi.times(0.5);\r\n\r\n    x = x.abs();\r\n\r\n    if (x.lte(halfPi)) {\r\n      quadrant = isNeg ? 4 : 1;\r\n      return x;\r\n    }\r\n\r\n    t = x.divToInt(pi);\r\n\r\n    if (t.isZero()) {\r\n      quadrant = isNeg ? 3 : 2;\r\n    } else {\r\n      x = x.minus(t.times(pi));\r\n\r\n      // 0 <= x < pi\r\n      if (x.lte(halfPi)) {\r\n        quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);\r\n        return x;\r\n      }\r\n\r\n      quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);\r\n    }\r\n\r\n    return x.minus(pi).abs();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return the value of Decimal `x` as a string in base `baseOut`.\r\n   *\r\n   * If the optional `sd` argument is present include a binary exponent suffix.\r\n   */\r\n  function toStringBinary(x, baseOut, sd, rm) {\r\n    var base, e, i, k, len, roundUp, str, xd, y,\r\n      Ctor = x.constructor,\r\n      isExp = sd !== void 0;\r\n\r\n    if (isExp) {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n    } else {\r\n      sd = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    }\r\n\r\n    if (!x.isFinite()) {\r\n      str = nonFiniteToString(x);\r\n    } else {\r\n      str = finiteToString(x);\r\n      i = str.indexOf('.');\r\n\r\n      // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\r\n      // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\r\n      // minBinaryExponent = floor(decimalExponent * log[2](10))\r\n      // log[2](10) = 3.321928094887362347870319429489390175864\r\n\r\n      if (isExp) {\r\n        base = 2;\r\n        if (baseOut == 16) {\r\n          sd = sd * 4 - 3;\r\n        } else if (baseOut == 8) {\r\n          sd = sd * 3 - 2;\r\n        }\r\n      } else {\r\n        base = baseOut;\r\n      }\r\n\r\n      // Convert the number as an integer then divide the result by its base raised to a power such\r\n      // that the fraction part will be restored.\r\n\r\n      // Non-integer.\r\n      if (i >= 0) {\r\n        str = str.replace('.', '');\r\n        y = new Ctor(1);\r\n        y.e = str.length - i;\r\n        y.d = convertBase(finiteToString(y), 10, base);\r\n        y.e = y.d.length;\r\n      }\r\n\r\n      xd = convertBase(str, 10, base);\r\n      e = len = xd.length;\r\n\r\n      // Remove trailing zeros.\r\n      for (; xd[--len] == 0;) xd.pop();\r\n\r\n      if (!xd[0]) {\r\n        str = isExp ? '0p+0' : '0';\r\n      } else {\r\n        if (i < 0) {\r\n          e--;\r\n        } else {\r\n          x = new Ctor(x);\r\n          x.d = xd;\r\n          x.e = e;\r\n          x = divide(x, y, sd, rm, 0, base);\r\n          xd = x.d;\r\n          e = x.e;\r\n          roundUp = inexact;\r\n        }\r\n\r\n        // The rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        i = xd[sd];\r\n        k = base / 2;\r\n        roundUp = roundUp || xd[sd + 1] !== void 0;\r\n\r\n        roundUp = rm < 4\r\n          ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))\r\n          : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||\r\n            rm === (x.s < 0 ? 8 : 7));\r\n\r\n        xd.length = sd;\r\n\r\n        if (roundUp) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n          for (; ++xd[--sd] > base - 1;) {\r\n            xd[sd] = 0;\r\n            if (!sd) {\r\n              ++e;\r\n              xd.unshift(1);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n        // E.g. [4, 11, 15] becomes 4bf.\r\n        for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n\r\n        // Add binary exponent suffix?\r\n        if (isExp) {\r\n          if (len > 1) {\r\n            if (baseOut == 16 || baseOut == 8) {\r\n              i = baseOut == 16 ? 4 : 3;\r\n              for (--len; len % i; len++) str += '0';\r\n              xd = convertBase(str, base, baseOut);\r\n              for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n              // xd[0] will always be be 1\r\n              for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n            } else {\r\n              str = str.charAt(0) + '.' + str.slice(1);\r\n            }\r\n          }\r\n\r\n          str =  str + (e < 0 ? 'p' : 'p+') + e;\r\n        } else if (e < 0) {\r\n          for (; ++e;) str = '0' + str;\r\n          str = '0.' + str;\r\n        } else {\r\n          if (++e > len) for (e -= len; e-- ;) str += '0';\r\n          else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\r\n        }\r\n      }\r\n\r\n      str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\r\n    }\r\n\r\n    return x.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Does not strip trailing zeros.\r\n  function truncate(arr, len) {\r\n    if (arr.length > len) {\r\n      arr.length = len;\r\n      return true;\r\n    }\r\n  }\r\n\r\n\r\n  // Decimal methods\r\n\r\n\r\n  /*\r\n   *  abs\r\n   *  acos\r\n   *  acosh\r\n   *  add\r\n   *  asin\r\n   *  asinh\r\n   *  atan\r\n   *  atanh\r\n   *  atan2\r\n   *  cbrt\r\n   *  ceil\r\n   *  clamp\r\n   *  clone\r\n   *  config\r\n   *  cos\r\n   *  cosh\r\n   *  div\r\n   *  exp\r\n   *  floor\r\n   *  hypot\r\n   *  ln\r\n   *  log\r\n   *  log2\r\n   *  log10\r\n   *  max\r\n   *  min\r\n   *  mod\r\n   *  mul\r\n   *  pow\r\n   *  random\r\n   *  round\r\n   *  set\r\n   *  sign\r\n   *  sin\r\n   *  sinh\r\n   *  sqrt\r\n   *  sub\r\n   *  sum\r\n   *  tan\r\n   *  tanh\r\n   *  trunc\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the absolute value of `x`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function abs(x) {\r\n    return new this(x).abs();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function acos(x) {\r\n    return new this(x).acos();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function acosh(x) {\r\n    return new this(x).acosh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function add(x, y) {\r\n    return new this(x).plus(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function asin(x) {\r\n    return new this(x).asin();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function asinh(x) {\r\n    return new this(x).asinh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function atan(x) {\r\n    return new this(x).atan();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function atanh(x) {\r\n    return new this(x).atanh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n   * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi, pi]\r\n   *\r\n   * y {number|string|Decimal} The y-coordinate.\r\n   * x {number|string|Decimal} The x-coordinate.\r\n   *\r\n   * atan2(±0, -0)               = ±pi\r\n   * atan2(±0, +0)               = ±0\r\n   * atan2(±0, -x)               = ±pi for x > 0\r\n   * atan2(±0, x)                = ±0 for x > 0\r\n   * atan2(-y, ±0)               = -pi/2 for y > 0\r\n   * atan2(y, ±0)                = pi/2 for y > 0\r\n   * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n   * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n   * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n   * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n   * atan2(±Infinity, +Infinity) = ±pi/4\r\n   * atan2(NaN, x) = NaN\r\n   * atan2(y, NaN) = NaN\r\n   *\r\n   */\r\n  function atan2(y, x) {\r\n    y = new this(y);\r\n    x = new this(x);\r\n    var r,\r\n      pr = this.precision,\r\n      rm = this.rounding,\r\n      wpr = pr + 4;\r\n\r\n    // Either NaN\r\n    if (!y.s || !x.s) {\r\n      r = new this(NaN);\r\n\r\n    // Both ±Infinity\r\n    } else if (!y.d && !x.d) {\r\n      r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\r\n      r.s = y.s;\r\n\r\n    // x is ±Infinity or y is ±0\r\n    } else if (!x.d || y.isZero()) {\r\n      r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\r\n      r.s = y.s;\r\n\r\n    // y is ±Infinity or x is ±0\r\n    } else if (!y.d || x.isZero()) {\r\n      r = getPi(this, wpr, 1).times(0.5);\r\n      r.s = y.s;\r\n\r\n    // Both non-zero and finite\r\n    } else if (x.s < 0) {\r\n      this.precision = wpr;\r\n      this.rounding = 1;\r\n      r = this.atan(divide(y, x, wpr, 1));\r\n      x = getPi(this, wpr, 1);\r\n      this.precision = pr;\r\n      this.rounding = rm;\r\n      r = y.s < 0 ? r.minus(x) : r.plus(x);\r\n    } else {\r\n      r = this.atan(divide(y, x, wpr, 1));\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function cbrt(x) {\r\n    return new this(x).cbrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function ceil(x) {\r\n    return finalise(x = new this(x), x.e + 1, 2);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` clamped to the range delineated by `min` and `max`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * min {number|string|Decimal}\r\n   * max {number|string|Decimal}\r\n   *\r\n   */\r\n  function clamp(x, min, max) {\r\n    return new this(x).clamp(min, max);\r\n  }\r\n\r\n\r\n  /*\r\n   * Configure global settings for a Decimal constructor.\r\n   *\r\n   * `obj` is an object with one or more of the following properties,\r\n   *\r\n   *   precision  {number}\r\n   *   rounding   {number}\r\n   *   toExpNeg   {number}\r\n   *   toExpPos   {number}\r\n   *   maxE       {number}\r\n   *   minE       {number}\r\n   *   modulo     {number}\r\n   *   crypto     {boolean|number}\r\n   *   defaults   {true}\r\n   *\r\n   * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n   *\r\n   */\r\n  function config(obj) {\r\n    if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\r\n    var i, p, v,\r\n      useDefaults = obj.defaults === true,\r\n      ps = [\r\n        'precision', 1, MAX_DIGITS,\r\n        'rounding', 0, 8,\r\n        'toExpNeg', -EXP_LIMIT, 0,\r\n        'toExpPos', 0, EXP_LIMIT,\r\n        'maxE', 0, EXP_LIMIT,\r\n        'minE', -EXP_LIMIT, 0,\r\n        'modulo', 0, 9\r\n      ];\r\n\r\n    for (i = 0; i < ps.length; i += 3) {\r\n      if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\r\n      if ((v = obj[p]) !== void 0) {\r\n        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n        else throw Error(invalidArgument + p + ': ' + v);\r\n      }\r\n    }\r\n\r\n    if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];\r\n    if ((v = obj[p]) !== void 0) {\r\n      if (v === true || v === false || v === 0 || v === 1) {\r\n        if (v) {\r\n          if (typeof crypto != 'undefined' && crypto &&\r\n            (crypto.getRandomValues || crypto.randomBytes)) {\r\n            this[p] = true;\r\n          } else {\r\n            throw Error(cryptoUnavailable);\r\n          }\r\n        } else {\r\n          this[p] = false;\r\n        }\r\n      } else {\r\n        throw Error(invalidArgument + p + ': ' + v);\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function cos(x) {\r\n    return new this(x).cos();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function cosh(x) {\r\n    return new this(x).cosh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n   * constructor.\r\n   *\r\n   */\r\n  function clone(obj) {\r\n    var i, p, ps;\r\n\r\n    /*\r\n     * The Decimal constructor and exported function.\r\n     * Return a new Decimal instance.\r\n     *\r\n     * v {number|string|Decimal} A numeric value.\r\n     *\r\n     */\r\n    function Decimal(v) {\r\n      var e, i, t,\r\n        x = this;\r\n\r\n      // Decimal called without new.\r\n      if (!(x instanceof Decimal)) return new Decimal(v);\r\n\r\n      // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n      // which points to Object.\r\n      x.constructor = Decimal;\r\n\r\n      // Duplicate.\r\n      if (isDecimalInstance(v)) {\r\n        x.s = v.s;\r\n\r\n        if (external) {\r\n          if (!v.d || v.e > Decimal.maxE) {\r\n\r\n            // Infinity.\r\n            x.e = NaN;\r\n            x.d = null;\r\n          } else if (v.e < Decimal.minE) {\r\n\r\n            // Zero.\r\n            x.e = 0;\r\n            x.d = [0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.d = v.d.slice();\r\n          }\r\n        } else {\r\n          x.e = v.e;\r\n          x.d = v.d ? v.d.slice() : v.d;\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      t = typeof v;\r\n\r\n      if (t === 'number') {\r\n        if (v === 0) {\r\n          x.s = 1 / v < 0 ? -1 : 1;\r\n          x.e = 0;\r\n          x.d = [0];\r\n          return;\r\n        }\r\n\r\n        if (v < 0) {\r\n          v = -v;\r\n          x.s = -1;\r\n        } else {\r\n          x.s = 1;\r\n        }\r\n\r\n        // Fast path for small integers.\r\n        if (v === ~~v && v < 1e7) {\r\n          for (e = 0, i = v; i >= 10; i /= 10) e++;\r\n\r\n          if (external) {\r\n            if (e > Decimal.maxE) {\r\n              x.e = NaN;\r\n              x.d = null;\r\n            } else if (e < Decimal.minE) {\r\n              x.e = 0;\r\n              x.d = [0];\r\n            } else {\r\n              x.e = e;\r\n              x.d = [v];\r\n            }\r\n          } else {\r\n            x.e = e;\r\n            x.d = [v];\r\n          }\r\n\r\n          return;\r\n\r\n        // Infinity, NaN.\r\n        } else if (v * 0 !== 0) {\r\n          if (!v) x.s = NaN;\r\n          x.e = NaN;\r\n          x.d = null;\r\n          return;\r\n        }\r\n\r\n        return parseDecimal(x, v.toString());\r\n\r\n      } else if (t !== 'string') {\r\n        throw Error(invalidArgument + v);\r\n      }\r\n\r\n      // Minus sign?\r\n      if ((i = v.charCodeAt(0)) === 45) {\r\n        v = v.slice(1);\r\n        x.s = -1;\r\n      } else {\r\n        // Plus sign?\r\n        if (i === 43) v = v.slice(1);\r\n        x.s = 1;\r\n      }\r\n\r\n      return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\r\n    }\r\n\r\n    Decimal.prototype = P;\r\n\r\n    Decimal.ROUND_UP = 0;\r\n    Decimal.ROUND_DOWN = 1;\r\n    Decimal.ROUND_CEIL = 2;\r\n    Decimal.ROUND_FLOOR = 3;\r\n    Decimal.ROUND_HALF_UP = 4;\r\n    Decimal.ROUND_HALF_DOWN = 5;\r\n    Decimal.ROUND_HALF_EVEN = 6;\r\n    Decimal.ROUND_HALF_CEIL = 7;\r\n    Decimal.ROUND_HALF_FLOOR = 8;\r\n    Decimal.EUCLID = 9;\r\n\r\n    Decimal.config = Decimal.set = config;\r\n    Decimal.clone = clone;\r\n    Decimal.isDecimal = isDecimalInstance;\r\n\r\n    Decimal.abs = abs;\r\n    Decimal.acos = acos;\r\n    Decimal.acosh = acosh;        // ES6\r\n    Decimal.add = add;\r\n    Decimal.asin = asin;\r\n    Decimal.asinh = asinh;        // ES6\r\n    Decimal.atan = atan;\r\n    Decimal.atanh = atanh;        // ES6\r\n    Decimal.atan2 = atan2;\r\n    Decimal.cbrt = cbrt;          // ES6\r\n    Decimal.ceil = ceil;\r\n    Decimal.clamp = clamp;\r\n    Decimal.cos = cos;\r\n    Decimal.cosh = cosh;          // ES6\r\n    Decimal.div = div;\r\n    Decimal.exp = exp;\r\n    Decimal.floor = floor;\r\n    Decimal.hypot = hypot;        // ES6\r\n    Decimal.ln = ln;\r\n    Decimal.log = log;\r\n    Decimal.log10 = log10;        // ES6\r\n    Decimal.log2 = log2;          // ES6\r\n    Decimal.max = max;\r\n    Decimal.min = min;\r\n    Decimal.mod = mod;\r\n    Decimal.mul = mul;\r\n    Decimal.pow = pow;\r\n    Decimal.random = random;\r\n    Decimal.round = round;\r\n    Decimal.sign = sign;          // ES6\r\n    Decimal.sin = sin;\r\n    Decimal.sinh = sinh;          // ES6\r\n    Decimal.sqrt = sqrt;\r\n    Decimal.sub = sub;\r\n    Decimal.sum = sum;\r\n    Decimal.tan = tan;\r\n    Decimal.tanh = tanh;          // ES6\r\n    Decimal.trunc = trunc;        // ES6\r\n\r\n    if (obj === void 0) obj = {};\r\n    if (obj) {\r\n      if (obj.defaults !== true) {\r\n        ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\r\n        for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n      }\r\n    }\r\n\r\n    Decimal.config(obj);\r\n\r\n    return Decimal;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function div(x, y) {\r\n    return new this(x).div(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} The power to which to raise the base of the natural log.\r\n   *\r\n   */\r\n  function exp(x) {\r\n    return new this(x).exp();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function floor(x) {\r\n    return finalise(x = new this(x), x.e + 1, 3);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function hypot() {\r\n    var i, n,\r\n      t = new this(0);\r\n\r\n    external = false;\r\n\r\n    for (i = 0; i < arguments.length;) {\r\n      n = new this(arguments[i++]);\r\n      if (!n.d) {\r\n        if (n.s) {\r\n          external = true;\r\n          return new this(1 / 0);\r\n        }\r\n        t = n;\r\n      } else if (t.d) {\r\n        t = t.plus(n.times(n));\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return t.sqrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\r\n   * otherwise return false.\r\n   *\r\n   */\r\n  function isDecimalInstance(obj) {\r\n    return obj instanceof Decimal || obj && obj.toStringTag === tag || false;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function ln(x) {\r\n    return new this(x).ln();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n   * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * log[y](x)\r\n   *\r\n   * x {number|string|Decimal} The argument of the logarithm.\r\n   * y {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\r\n  function log(x, y) {\r\n    return new this(x).log(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function log2(x) {\r\n    return new this(x).log(2);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function log10(x) {\r\n    return new this(x).log(10);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function max() {\r\n    return maxOrMin(this, arguments, 'lt');\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function min() {\r\n    return maxOrMin(this, arguments, 'gt');\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function mod(x, y) {\r\n    return new this(x).mod(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function mul(x, y) {\r\n    return new this(x).mul(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} The base.\r\n   * y {number|string|Decimal} The exponent.\r\n   *\r\n   */\r\n  function pow(x, y) {\r\n    return new this(x).pow(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n   * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n   * are produced).\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n   *\r\n   */\r\n  function random(sd) {\r\n    var d, e, k, n,\r\n      i = 0,\r\n      r = new this(1),\r\n      rd = [];\r\n\r\n    if (sd === void 0) sd = this.precision;\r\n    else checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    k = Math.ceil(sd / LOG_BASE);\r\n\r\n    if (!this.crypto) {\r\n      for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\r\n\r\n    // Browsers supporting crypto.getRandomValues.\r\n    } else if (crypto.getRandomValues) {\r\n      d = crypto.getRandomValues(new Uint32Array(k));\r\n\r\n      for (; i < k;) {\r\n        n = d[i];\r\n\r\n        // 0 <= n < 4294967296\r\n        // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\r\n        if (n >= 4.29e9) {\r\n          d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\r\n        } else {\r\n\r\n          // 0 <= n <= 4289999999\r\n          // 0 <= (n % 1e7) <= 9999999\r\n          rd[i++] = n % 1e7;\r\n        }\r\n      }\r\n\r\n    // Node.js supporting crypto.randomBytes.\r\n    } else if (crypto.randomBytes) {\r\n\r\n      // buffer\r\n      d = crypto.randomBytes(k *= 4);\r\n\r\n      for (; i < k;) {\r\n\r\n        // 0 <= n < 2147483648\r\n        n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\r\n\r\n        // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\r\n        if (n >= 2.14e9) {\r\n          crypto.randomBytes(4).copy(d, i);\r\n        } else {\r\n\r\n          // 0 <= n <= 2139999999\r\n          // 0 <= (n % 1e7) <= 9999999\r\n          rd.push(n % 1e7);\r\n          i += 4;\r\n        }\r\n      }\r\n\r\n      i = k / 4;\r\n    } else {\r\n      throw Error(cryptoUnavailable);\r\n    }\r\n\r\n    k = rd[--i];\r\n    sd %= LOG_BASE;\r\n\r\n    // Convert trailing digits to zeros according to sd.\r\n    if (k && sd) {\r\n      n = mathpow(10, LOG_BASE - sd);\r\n      rd[i] = (k / n | 0) * n;\r\n    }\r\n\r\n    // Remove trailing words which are zero.\r\n    for (; rd[i] === 0; i--) rd.pop();\r\n\r\n    // Zero?\r\n    if (i < 0) {\r\n      e = 0;\r\n      rd = [0];\r\n    } else {\r\n      e = -1;\r\n\r\n      // Remove leading words which are zero and adjust exponent accordingly.\r\n      for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\r\n\r\n      // Count the digits of the first word of rd to determine leading zeros.\r\n      for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\r\n\r\n      // Adjust the exponent for leading zeros of the first word of rd.\r\n      if (k < LOG_BASE) e -= LOG_BASE - k;\r\n    }\r\n\r\n    r.e = e;\r\n    r.d = rd;\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n   *\r\n   * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function round(x) {\r\n    return finalise(x = new this(x), x.e + 1, this.rounding);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1    if x > 0,\r\n   *  -1    if x < 0,\r\n   *   0    if x is 0,\r\n   *  -0    if x is -0,\r\n   *   NaN  otherwise\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function sign(x) {\r\n    x = new this(x);\r\n    return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function sin(x) {\r\n    return new this(x).sin();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function sinh(x) {\r\n    return new this(x).sinh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function sqrt(x) {\r\n    return new this(x).sqrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function sub(x, y) {\r\n    return new this(x).sub(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sum of the arguments, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * Only the result is rounded, not the intermediate calculations.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function sum() {\r\n    var i = 0,\r\n      args = arguments,\r\n      x = new this(args[i]);\r\n\r\n    external = false;\r\n    for (; x.s && ++i < args.length;) x = x.plus(args[i]);\r\n    external = true;\r\n\r\n    return finalise(x, this.precision, this.rounding);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function tan(x) {\r\n    return new this(x).tan();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function tanh(x) {\r\n    return new this(x).tanh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` truncated to an integer.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function trunc(x) {\r\n    return finalise(x = new this(x), x.e + 1, 1);\r\n  }\r\n\r\n\r\n  // Create and configure initial Decimal constructor.\r\n  Decimal = clone(DEFAULTS);\r\n  Decimal.prototype.constructor = Decimal;\r\n  Decimal['default'] = Decimal.Decimal = Decimal;\r\n\r\n  // Create the internal constants from their string values.\r\n  LN10 = new Decimal(LN10);\r\n  PI = new Decimal(PI);\r\n\r\n\r\n  // Export.\r\n\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () {\r\n      return Decimal;\r\n    });\r\n\r\n  // Node and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    if (typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol') {\r\n      P[Symbol['for']('nodejs.util.inspect.custom')] = P.toString;\r\n      P[Symbol.toStringTag] = 'Decimal';\r\n    }\r\n\r\n    module.exports = Decimal;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalScope) {\r\n      globalScope = typeof self != 'undefined' && self && self.self == self ? self : window;\r\n    }\r\n\r\n    noConflict = globalScope.Decimal;\r\n    Decimal.noConflict = function () {\r\n      globalScope.Decimal = noConflict;\r\n      return Decimal;\r\n    };\r\n\r\n    globalScope.Decimal = Decimal;\r\n  }\r\n})(this);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}