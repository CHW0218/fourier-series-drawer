{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11.js';\nimport { createAlgorithm12 } from '../../type/matrix/utils/algorithm12.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nimport { roundNumber } from '../../plain/number/index.js';\nvar NO_INT = 'Number of decimals in function round must be an integer';\nvar name = 'round';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'BigNumber', 'DenseMatrix'];\nexport var createRound = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      equalScalar = _ref.equalScalar,\n      zeros = _ref.zeros,\n      BigNumber = _ref.BigNumber,\n      DenseMatrix = _ref.DenseMatrix;\n  var algorithm11 = createAlgorithm11({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm12 = createAlgorithm12({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var algorithm14 = createAlgorithm14({\n    typed: typed\n  });\n  /**\n   * Round a value towards the nearest integer.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.round(x)\n   *    math.round(x, n)\n   *\n   * Examples:\n   *\n   *    math.round(3.22)             // returns number 3\n   *    math.round(3.82)             // returns number 4\n   *    math.round(-4.2)             // returns number -4\n   *    math.round(-4.7)             // returns number -5\n   *    math.round(3.22, 1)          // returns number 3.2\n   *    math.round(3.88, 1)          // returns number 3.9\n   *    math.round(-4.21, 1)         // returns number -4.2\n   *    math.round(-4.71, 1)         // returns number -4.7\n   *    math.round(math.pi, 3)       // returns number 3.142\n   *    math.round(123.45678, 2)     // returns number 123.46\n   *\n   *    const c = math.complex(3.2, -2.7)\n   *    math.round(c)                // returns Complex 3 - 3i\n   *\n   *    math.round([3.2, 3.8, -4.7]) // returns Array [3, 4, -5]\n   *\n   * See also:\n   *\n   *    ceil, fix, floor\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n\n  return typed(name, {\n    number: roundNumber,\n    'number, number': roundNumber,\n    'number, BigNumber': function numberBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      return new BigNumber(x).toDecimalPlaces(n.toNumber());\n    },\n    Complex: function Complex(x) {\n      return x.round();\n    },\n    'Complex, number': function ComplexNumber(x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.round(n);\n    },\n    'Complex, BigNumber': function ComplexBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      var _n = n.toNumber();\n\n      return x.round(_n);\n    },\n    BigNumber: function BigNumber(x) {\n      return x.toDecimalPlaces(0);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.toDecimalPlaces(n.toNumber());\n    },\n    Fraction: function Fraction(x) {\n      return x.round();\n    },\n    'Fraction, number': function FractionNumber(x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.round(n);\n    },\n    'Fraction, BigNumber': function FractionBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.round(n.toNumber());\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since round(0) = 0\n      return deepMap(x, this, true);\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      return algorithm11(x, y, this, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      return algorithm14(x, y, this, false);\n    },\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, this, false).valueOf();\n    },\n    'number | Complex | BigNumber | Fraction, SparseMatrix': function numberComplexBigNumberFractionSparseMatrix(x, y) {\n      // check scalar is zero\n      if (equalScalar(x, 0)) {\n        // do not execute algorithm, result will be a zero matrix\n        return zeros(y.size(), y.storage());\n      }\n\n      return algorithm12(y, x, this, true);\n    },\n    'number | Complex | BigNumber | Fraction, DenseMatrix': function numberComplexBigNumberFractionDenseMatrix(x, y) {\n      // check scalar is zero\n      if (equalScalar(x, 0)) {\n        // do not execute algorithm, result will be a zero matrix\n        return zeros(y.size(), y.storage());\n      }\n\n      return algorithm14(y, x, this, true);\n    },\n    'number | Complex | BigNumber | Fraction, Array': function numberComplexBigNumberFractionArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, this, true).valueOf();\n    }\n  });\n});","map":{"version":3,"names":["factory","deepMap","createAlgorithm11","createAlgorithm12","createAlgorithm14","roundNumber","NO_INT","name","dependencies","createRound","_ref","typed","matrix","equalScalar","zeros","BigNumber","DenseMatrix","algorithm11","algorithm12","algorithm14","number","numberBigNumber","x","n","isInteger","TypeError","toDecimalPlaces","toNumber","Complex","round","ComplexNumber","ComplexBigNumber","_n","BigNumberBigNumber","Fraction","FractionNumber","FractionBigNumber","ArrayMatrix","SparseMatrixNumberBigNumber","y","DenseMatrixNumberBigNumber","ArrayNumberBigNumber","valueOf","numberComplexBigNumberFractionSparseMatrix","size","storage","numberComplexBigNumberFractionDenseMatrix","numberComplexBigNumberFractionArray"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/function/arithmetic/round.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11.js';\nimport { createAlgorithm12 } from '../../type/matrix/utils/algorithm12.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nimport { roundNumber } from '../../plain/number/index.js';\nvar NO_INT = 'Number of decimals in function round must be an integer';\nvar name = 'round';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'BigNumber', 'DenseMatrix'];\nexport var createRound = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    zeros,\n    BigNumber,\n    DenseMatrix\n  } = _ref;\n  var algorithm11 = createAlgorithm11({\n    typed,\n    equalScalar\n  });\n  var algorithm12 = createAlgorithm12({\n    typed,\n    DenseMatrix\n  });\n  var algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Round a value towards the nearest integer.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.round(x)\n   *    math.round(x, n)\n   *\n   * Examples:\n   *\n   *    math.round(3.22)             // returns number 3\n   *    math.round(3.82)             // returns number 4\n   *    math.round(-4.2)             // returns number -4\n   *    math.round(-4.7)             // returns number -5\n   *    math.round(3.22, 1)          // returns number 3.2\n   *    math.round(3.88, 1)          // returns number 3.9\n   *    math.round(-4.21, 1)         // returns number -4.2\n   *    math.round(-4.71, 1)         // returns number -4.7\n   *    math.round(math.pi, 3)       // returns number 3.142\n   *    math.round(123.45678, 2)     // returns number 123.46\n   *\n   *    const c = math.complex(3.2, -2.7)\n   *    math.round(c)                // returns Complex 3 - 3i\n   *\n   *    math.round([3.2, 3.8, -4.7]) // returns Array [3, 4, -5]\n   *\n   * See also:\n   *\n   *    ceil, fix, floor\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n\n  return typed(name, {\n    number: roundNumber,\n    'number, number': roundNumber,\n    'number, BigNumber': function numberBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      return new BigNumber(x).toDecimalPlaces(n.toNumber());\n    },\n    Complex: function Complex(x) {\n      return x.round();\n    },\n    'Complex, number': function ComplexNumber(x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.round(n);\n    },\n    'Complex, BigNumber': function ComplexBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      var _n = n.toNumber();\n\n      return x.round(_n);\n    },\n    BigNumber: function BigNumber(x) {\n      return x.toDecimalPlaces(0);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.toDecimalPlaces(n.toNumber());\n    },\n    Fraction: function Fraction(x) {\n      return x.round();\n    },\n    'Fraction, number': function FractionNumber(x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.round(n);\n    },\n    'Fraction, BigNumber': function FractionBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.round(n.toNumber());\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since round(0) = 0\n      return deepMap(x, this, true);\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      return algorithm11(x, y, this, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      return algorithm14(x, y, this, false);\n    },\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, this, false).valueOf();\n    },\n    'number | Complex | BigNumber | Fraction, SparseMatrix': function numberComplexBigNumberFractionSparseMatrix(x, y) {\n      // check scalar is zero\n      if (equalScalar(x, 0)) {\n        // do not execute algorithm, result will be a zero matrix\n        return zeros(y.size(), y.storage());\n      }\n\n      return algorithm12(y, x, this, true);\n    },\n    'number | Complex | BigNumber | Fraction, DenseMatrix': function numberComplexBigNumberFractionDenseMatrix(x, y) {\n      // check scalar is zero\n      if (equalScalar(x, 0)) {\n        // do not execute algorithm, result will be a zero matrix\n        return zeros(y.size(), y.storage());\n      }\n\n      return algorithm14(y, x, this, true);\n    },\n    'number | Complex | BigNumber | Fraction, Array': function numberComplexBigNumberFractionArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, this, true).valueOf();\n    }\n  });\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}