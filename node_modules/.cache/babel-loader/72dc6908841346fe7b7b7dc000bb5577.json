{"ast":null,"code":"import { factory } from '../utils/factory.js';\nimport { deepMap } from '../utils/collection.js';\nvar name = 'boolean';\nvar dependencies = ['typed'];\nexport var createBoolean = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  /**\n   * Create a boolean or convert a string or number to a boolean.\n   * In case of a number, `true` is returned for non-zero numbers, and `false` in\n   * case of zero.\n   * Strings can be `'true'` or `'false'`, or can contain a number.\n   * When value is a matrix, all elements will be converted to boolean.\n   *\n   * Syntax:\n   *\n   *    math.boolean(x)\n   *\n   * Examples:\n   *\n   *    math.boolean(0)     // returns false\n   *    math.boolean(1)     // returns true\n   *    math.boolean(-3)     // returns true\n   *    math.boolean('true')     // returns true\n   *    math.boolean('false')     // returns false\n   *    math.boolean([1, 0, 1, 1])     // returns [true, false, true, true]\n   *\n   * See also:\n   *\n   *    bignumber, complex, index, matrix, string, unit\n   *\n   * @param {string | number | boolean | Array | Matrix | null} value  A value of any type\n   * @return {boolean | Array | Matrix} The boolean value\n   */\n\n  return typed(name, {\n    '': function _() {\n      return false;\n    },\n    boolean: function boolean(x) {\n      return x;\n    },\n    number: function number(x) {\n      return !!x;\n    },\n    null: function _null(x) {\n      return false;\n    },\n    BigNumber: function BigNumber(x) {\n      return !x.isZero();\n    },\n    string: function string(x) {\n      // try case insensitive\n      var lcase = x.toLowerCase();\n\n      if (lcase === 'true') {\n        return true;\n      } else if (lcase === 'false') {\n        return false;\n      } // test whether value is a valid number\n\n\n      var num = Number(x);\n\n      if (x !== '' && !isNaN(num)) {\n        return !!num;\n      }\n\n      throw new Error('Cannot convert \"' + x + '\" to a boolean');\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  });\n});","map":{"version":3,"names":["factory","deepMap","name","dependencies","createBoolean","_ref","typed","_","boolean","x","number","null","_null","BigNumber","isZero","string","lcase","toLowerCase","num","Number","isNaN","Error","ArrayMatrix"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/type/boolean.js"],"sourcesContent":["import { factory } from '../utils/factory.js';\nimport { deepMap } from '../utils/collection.js';\nvar name = 'boolean';\nvar dependencies = ['typed'];\nexport var createBoolean = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n\n  /**\n   * Create a boolean or convert a string or number to a boolean.\n   * In case of a number, `true` is returned for non-zero numbers, and `false` in\n   * case of zero.\n   * Strings can be `'true'` or `'false'`, or can contain a number.\n   * When value is a matrix, all elements will be converted to boolean.\n   *\n   * Syntax:\n   *\n   *    math.boolean(x)\n   *\n   * Examples:\n   *\n   *    math.boolean(0)     // returns false\n   *    math.boolean(1)     // returns true\n   *    math.boolean(-3)     // returns true\n   *    math.boolean('true')     // returns true\n   *    math.boolean('false')     // returns false\n   *    math.boolean([1, 0, 1, 1])     // returns [true, false, true, true]\n   *\n   * See also:\n   *\n   *    bignumber, complex, index, matrix, string, unit\n   *\n   * @param {string | number | boolean | Array | Matrix | null} value  A value of any type\n   * @return {boolean | Array | Matrix} The boolean value\n   */\n  return typed(name, {\n    '': function _() {\n      return false;\n    },\n    boolean: function boolean(x) {\n      return x;\n    },\n    number: function number(x) {\n      return !!x;\n    },\n    null: function _null(x) {\n      return false;\n    },\n    BigNumber: function BigNumber(x) {\n      return !x.isZero();\n    },\n    string: function string(x) {\n      // try case insensitive\n      var lcase = x.toLowerCase();\n\n      if (lcase === 'true') {\n        return true;\n      } else if (lcase === 'false') {\n        return false;\n      } // test whether value is a valid number\n\n\n      var num = Number(x);\n\n      if (x !== '' && !isNaN(num)) {\n        return !!num;\n      }\n\n      throw new Error('Cannot convert \"' + x + '\" to a boolean');\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  });\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,qBAAxB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,SAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,aAAa,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EAC5E,IACEC,KADF,GAEID,IAFJ,CACEC,KADF;EAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOA,KAAK,CAACJ,IAAD,EAAO;IACjB,IAAI,SAASK,CAAT,GAAa;MACf,OAAO,KAAP;IACD,CAHgB;IAIjBC,OAAO,EAAE,SAASA,OAAT,CAAiBC,CAAjB,EAAoB;MAC3B,OAAOA,CAAP;IACD,CANgB;IAOjBC,MAAM,EAAE,SAASA,MAAT,CAAgBD,CAAhB,EAAmB;MACzB,OAAO,CAAC,CAACA,CAAT;IACD,CATgB;IAUjBE,IAAI,EAAE,SAASC,KAAT,CAAeH,CAAf,EAAkB;MACtB,OAAO,KAAP;IACD,CAZgB;IAajBI,SAAS,EAAE,SAASA,SAAT,CAAmBJ,CAAnB,EAAsB;MAC/B,OAAO,CAACA,CAAC,CAACK,MAAF,EAAR;IACD,CAfgB;IAgBjBC,MAAM,EAAE,SAASA,MAAT,CAAgBN,CAAhB,EAAmB;MACzB;MACA,IAAIO,KAAK,GAAGP,CAAC,CAACQ,WAAF,EAAZ;;MAEA,IAAID,KAAK,KAAK,MAAd,EAAsB;QACpB,OAAO,IAAP;MACD,CAFD,MAEO,IAAIA,KAAK,KAAK,OAAd,EAAuB;QAC5B,OAAO,KAAP;MACD,CARwB,CAQvB;;;MAGF,IAAIE,GAAG,GAAGC,MAAM,CAACV,CAAD,CAAhB;;MAEA,IAAIA,CAAC,KAAK,EAAN,IAAY,CAACW,KAAK,CAACF,GAAD,CAAtB,EAA6B;QAC3B,OAAO,CAAC,CAACA,GAAT;MACD;;MAED,MAAM,IAAIG,KAAJ,CAAU,qBAAqBZ,CAArB,GAAyB,gBAAnC,CAAN;IACD,CAlCgB;IAmCjB,kBAAkB,SAASa,WAAT,CAAqBb,CAArB,EAAwB;MACxC,OAAOR,OAAO,CAACQ,CAAD,EAAI,IAAJ,CAAd;IACD;EArCgB,CAAP,CAAZ;AAuCD,CAvEgD,CAA1C"},"metadata":{},"sourceType":"module"}