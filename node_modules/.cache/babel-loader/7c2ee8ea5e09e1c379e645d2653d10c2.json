{"ast":null,"code":"import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setCartesian';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];\nexport var createSetCartesian = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      size = _ref.size,\n      subset = _ref.subset,\n      compareNatural = _ref.compareNatural,\n      Index = _ref.Index,\n      DenseMatrix = _ref.DenseMatrix;\n  /**\n   * Create the cartesian product of two (multi)sets.\n   * Multi-dimension arrays will be converted to single-dimension arrays\n   * and the values will be sorted in ascending order before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setCartesian(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setCartesian([1, 2], [3, 4])        // returns [[1, 3], [1, 4], [2, 3], [2, 4]]\n   *    math.setCartesian([4, 3], [2, 1])        // returns [[3, 1], [3, 2], [4, 1], [4, 2]]\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setDifference, setPowerset\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {Array | Matrix}    The cartesian product of two (multi)sets\n   */\n\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\n      var result = [];\n\n      if (subset(size(a1), new Index(0)) !== 0 && subset(size(a2), new Index(0)) !== 0) {\n        // if any of them is empty, return empty\n        var b1 = flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural);\n        var b2 = flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural);\n        result = [];\n\n        for (var i = 0; i < b1.length; i++) {\n          for (var j = 0; j < b2.length; j++) {\n            result.push([b1[i], b2[j]]);\n          }\n        }\n      } // return an array, if both inputs were arrays\n\n\n      if (Array.isArray(a1) && Array.isArray(a2)) {\n        return result;\n      } // return a matrix otherwise\n\n\n      return new DenseMatrix(result);\n    }\n  });\n});","map":{"version":3,"names":["flatten","factory","name","dependencies","createSetCartesian","_ref","typed","size","subset","compareNatural","Index","DenseMatrix","ArrayMatrixArrayMatrix","a1","a2","result","b1","Array","isArray","toArray","sort","b2","i","length","j","push"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/function/set/setCartesian.js"],"sourcesContent":["import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setCartesian';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];\nexport var createSetCartesian = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    size,\n    subset,\n    compareNatural,\n    Index,\n    DenseMatrix\n  } = _ref;\n\n  /**\n   * Create the cartesian product of two (multi)sets.\n   * Multi-dimension arrays will be converted to single-dimension arrays\n   * and the values will be sorted in ascending order before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setCartesian(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setCartesian([1, 2], [3, 4])        // returns [[1, 3], [1, 4], [2, 3], [2, 4]]\n   *    math.setCartesian([4, 3], [2, 1])        // returns [[3, 1], [3, 2], [4, 1], [4, 2]]\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setDifference, setPowerset\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {Array | Matrix}    The cartesian product of two (multi)sets\n   */\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\n      var result = [];\n\n      if (subset(size(a1), new Index(0)) !== 0 && subset(size(a2), new Index(0)) !== 0) {\n        // if any of them is empty, return empty\n        var b1 = flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural);\n        var b2 = flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural);\n        result = [];\n\n        for (var i = 0; i < b1.length; i++) {\n          for (var j = 0; j < b2.length; j++) {\n            result.push([b1[i], b2[j]]);\n          }\n        }\n      } // return an array, if both inputs were arrays\n\n\n      if (Array.isArray(a1) && Array.isArray(a2)) {\n        return result;\n      } // return a matrix otherwise\n\n\n      return new DenseMatrix(result);\n    }\n  });\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,sBAAxB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,cAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,MAAV,EAAkB,QAAlB,EAA4B,gBAA5B,EAA8C,OAA9C,EAAuD,aAAvD,CAAnB;AACA,OAAO,IAAIC,kBAAkB,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EACjF,IACEC,KADF,GAOID,IAPJ,CACEC,KADF;EAAA,IAEEC,IAFF,GAOIF,IAPJ,CAEEE,IAFF;EAAA,IAGEC,MAHF,GAOIH,IAPJ,CAGEG,MAHF;EAAA,IAIEC,cAJF,GAOIJ,IAPJ,CAIEI,cAJF;EAAA,IAKEC,KALF,GAOIL,IAPJ,CAKEK,KALF;EAAA,IAMEC,WANF,GAOIN,IAPJ,CAMEM,WANF;EASA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOL,KAAK,CAACJ,IAAD,EAAO;IACjB,kCAAkC,SAASU,sBAAT,CAAgCC,EAAhC,EAAoCC,EAApC,EAAwC;MACxE,IAAIC,MAAM,GAAG,EAAb;;MAEA,IAAIP,MAAM,CAACD,IAAI,CAACM,EAAD,CAAL,EAAW,IAAIH,KAAJ,CAAU,CAAV,CAAX,CAAN,KAAmC,CAAnC,IAAwCF,MAAM,CAACD,IAAI,CAACO,EAAD,CAAL,EAAW,IAAIJ,KAAJ,CAAU,CAAV,CAAX,CAAN,KAAmC,CAA/E,EAAkF;QAChF;QACA,IAAIM,EAAE,GAAGhB,OAAO,CAACiB,KAAK,CAACC,OAAN,CAAcL,EAAd,IAAoBA,EAApB,GAAyBA,EAAE,CAACM,OAAH,EAA1B,CAAP,CAA+CC,IAA/C,CAAoDX,cAApD,CAAT;QACA,IAAIY,EAAE,GAAGrB,OAAO,CAACiB,KAAK,CAACC,OAAN,CAAcJ,EAAd,IAAoBA,EAApB,GAAyBA,EAAE,CAACK,OAAH,EAA1B,CAAP,CAA+CC,IAA/C,CAAoDX,cAApD,CAAT;QACAM,MAAM,GAAG,EAAT;;QAEA,KAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,EAAE,CAACO,MAAvB,EAA+BD,CAAC,EAAhC,EAAoC;UAClC,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,EAAE,CAACE,MAAvB,EAA+BC,CAAC,EAAhC,EAAoC;YAClCT,MAAM,CAACU,IAAP,CAAY,CAACT,EAAE,CAACM,CAAD,CAAH,EAAQD,EAAE,CAACG,CAAD,CAAV,CAAZ;UACD;QACF;MACF,CAduE,CActE;;;MAGF,IAAIP,KAAK,CAACC,OAAN,CAAcL,EAAd,KAAqBI,KAAK,CAACC,OAAN,CAAcJ,EAAd,CAAzB,EAA4C;QAC1C,OAAOC,MAAP;MACD,CAnBuE,CAmBtE;;;MAGF,OAAO,IAAIJ,WAAJ,CAAgBI,MAAhB,CAAP;IACD;EAxBgB,CAAP,CAAZ;AA0BD,CA1DqD,CAA/C"},"metadata":{},"sourceType":"module"}