{"ast":null,"code":"import { factory } from '../utils/factory.js';\nimport { deepMap } from '../utils/collection.js';\nvar name = 'number';\nvar dependencies = ['typed'];\n/**\n * Separates the radix, integer part, and fractional part of a non decimal number string\n * @param {string} input string to parse\n * @returns {object} the parts of the string or null if not a valid input\n */\n\nfunction getNonDecimalNumberParts(input) {\n  var nonDecimalWithRadixMatch = input.match(/(0[box])([0-9a-fA-F]*)\\.([0-9a-fA-F]*)/);\n\n  if (nonDecimalWithRadixMatch) {\n    var radix = {\n      '0b': 2,\n      '0o': 8,\n      '0x': 16\n    }[nonDecimalWithRadixMatch[1]];\n    var integerPart = nonDecimalWithRadixMatch[2];\n    var fractionalPart = nonDecimalWithRadixMatch[3];\n    return {\n      input: input,\n      radix: radix,\n      integerPart: integerPart,\n      fractionalPart: fractionalPart\n    };\n  } else {\n    return null;\n  }\n}\n/**\n * Makes a number from a radix, and integer part, and a fractional part\n * @param {parts} [x] parts of the number string (from getNonDecimalNumberParts)\n * @returns {number} the number\n */\n\n\nfunction makeNumberFromNonDecimalParts(parts) {\n  var n = parseInt(parts.integerPart, parts.radix);\n  var f = 0;\n\n  for (var i = 0; i < parts.fractionalPart.length; i++) {\n    var digitValue = parseInt(parts.fractionalPart[i], parts.radix);\n    f += digitValue / Math.pow(parts.radix, i + 1);\n  }\n\n  var result = n + f;\n\n  if (isNaN(result)) {\n    throw new SyntaxError('String \"' + parts.input + '\" is no valid number');\n  }\n\n  return result;\n}\n\nexport var createNumber = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  /**\n   * Create a number or convert a string, boolean, or unit to a number.\n   * When value is a matrix, all elements will be converted to number.\n   *\n   * Syntax:\n   *\n   *    math.number(value)\n   *    math.number(unit, valuelessUnit)\n   *\n   * Examples:\n   *\n   *    math.number(2)                         // returns number 2\n   *    math.number('7.2')                     // returns number 7.2\n   *    math.number(true)                      // returns number 1\n   *    math.number([true, false, true, true]) // returns [1, 0, 1, 1]\n   *    math.number(math.unit('52cm'), 'm')    // returns 0.52\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, string, unit\n   *\n   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted\n   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number\n   * @return {number | Array | Matrix} The created number\n   */\n\n  var number = typed('number', {\n    '': function _() {\n      return 0;\n    },\n    number: function number(x) {\n      return x;\n    },\n    string: function string(x) {\n      if (x === 'NaN') return NaN;\n      var nonDecimalNumberParts = getNonDecimalNumberParts(x);\n\n      if (nonDecimalNumberParts) {\n        return makeNumberFromNonDecimalParts(nonDecimalNumberParts);\n      }\n\n      var size = 0;\n      var wordSizeSuffixMatch = x.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);\n\n      if (wordSizeSuffixMatch) {\n        // x includes a size suffix like 0xffffi32, so we extract\n        // the suffix and remove it from x\n        size = Number(wordSizeSuffixMatch[2]);\n        x = wordSizeSuffixMatch[1];\n      }\n\n      var num = Number(x);\n\n      if (isNaN(num)) {\n        throw new SyntaxError('String \"' + x + '\" is no valid number');\n      }\n\n      if (wordSizeSuffixMatch) {\n        // x is a signed bin, oct, or hex literal\n        // num is the value of string x if x is interpreted as unsigned\n        if (num > Math.pow(2, size) - 1) {\n          // literal is too large for size suffix\n          throw new SyntaxError(\"String \\\"\".concat(x, \"\\\" is out of range\"));\n        } // check if the bit at index size - 1 is set and if so do the twos complement\n\n\n        if (num >= Math.pow(2, size - 1)) {\n          num = num - Math.pow(2, size);\n        }\n      }\n\n      return num;\n    },\n    BigNumber: function BigNumber(x) {\n      return x.toNumber();\n    },\n    Fraction: function Fraction(x) {\n      return x.valueOf();\n    },\n    Unit: function Unit(x) {\n      throw new Error('Second argument with valueless unit expected');\n    },\n    null: function _null(x) {\n      return 0;\n    },\n    'Unit, string | Unit': function UnitStringUnit(unit, valuelessUnit) {\n      return unit.toNumber(valuelessUnit);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  }); // reviver function to parse a JSON object like:\n  //\n  //     {\"mathjs\":\"number\",\"value\":\"2.3\"}\n  //\n  // into a number 2.3\n\n  number.fromJSON = function (json) {\n    return parseFloat(json.value);\n  };\n\n  return number;\n});","map":{"version":3,"names":["factory","deepMap","name","dependencies","getNonDecimalNumberParts","input","nonDecimalWithRadixMatch","match","radix","integerPart","fractionalPart","makeNumberFromNonDecimalParts","parts","n","parseInt","f","i","length","digitValue","Math","pow","result","isNaN","SyntaxError","createNumber","_ref","typed","number","_","x","string","NaN","nonDecimalNumberParts","size","wordSizeSuffixMatch","Number","num","concat","BigNumber","toNumber","Fraction","valueOf","Unit","Error","null","_null","UnitStringUnit","unit","valuelessUnit","ArrayMatrix","fromJSON","json","parseFloat","value"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/type/number.js"],"sourcesContent":["import { factory } from '../utils/factory.js';\nimport { deepMap } from '../utils/collection.js';\nvar name = 'number';\nvar dependencies = ['typed'];\n/**\n * Separates the radix, integer part, and fractional part of a non decimal number string\n * @param {string} input string to parse\n * @returns {object} the parts of the string or null if not a valid input\n */\n\nfunction getNonDecimalNumberParts(input) {\n  var nonDecimalWithRadixMatch = input.match(/(0[box])([0-9a-fA-F]*)\\.([0-9a-fA-F]*)/);\n\n  if (nonDecimalWithRadixMatch) {\n    var radix = {\n      '0b': 2,\n      '0o': 8,\n      '0x': 16\n    }[nonDecimalWithRadixMatch[1]];\n    var integerPart = nonDecimalWithRadixMatch[2];\n    var fractionalPart = nonDecimalWithRadixMatch[3];\n    return {\n      input,\n      radix,\n      integerPart,\n      fractionalPart\n    };\n  } else {\n    return null;\n  }\n}\n/**\n * Makes a number from a radix, and integer part, and a fractional part\n * @param {parts} [x] parts of the number string (from getNonDecimalNumberParts)\n * @returns {number} the number\n */\n\n\nfunction makeNumberFromNonDecimalParts(parts) {\n  var n = parseInt(parts.integerPart, parts.radix);\n  var f = 0;\n\n  for (var i = 0; i < parts.fractionalPart.length; i++) {\n    var digitValue = parseInt(parts.fractionalPart[i], parts.radix);\n    f += digitValue / Math.pow(parts.radix, i + 1);\n  }\n\n  var result = n + f;\n\n  if (isNaN(result)) {\n    throw new SyntaxError('String \"' + parts.input + '\" is no valid number');\n  }\n\n  return result;\n}\n\nexport var createNumber = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n\n  /**\n   * Create a number or convert a string, boolean, or unit to a number.\n   * When value is a matrix, all elements will be converted to number.\n   *\n   * Syntax:\n   *\n   *    math.number(value)\n   *    math.number(unit, valuelessUnit)\n   *\n   * Examples:\n   *\n   *    math.number(2)                         // returns number 2\n   *    math.number('7.2')                     // returns number 7.2\n   *    math.number(true)                      // returns number 1\n   *    math.number([true, false, true, true]) // returns [1, 0, 1, 1]\n   *    math.number(math.unit('52cm'), 'm')    // returns 0.52\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, string, unit\n   *\n   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted\n   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number\n   * @return {number | Array | Matrix} The created number\n   */\n  var number = typed('number', {\n    '': function _() {\n      return 0;\n    },\n    number: function number(x) {\n      return x;\n    },\n    string: function string(x) {\n      if (x === 'NaN') return NaN;\n      var nonDecimalNumberParts = getNonDecimalNumberParts(x);\n\n      if (nonDecimalNumberParts) {\n        return makeNumberFromNonDecimalParts(nonDecimalNumberParts);\n      }\n\n      var size = 0;\n      var wordSizeSuffixMatch = x.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);\n\n      if (wordSizeSuffixMatch) {\n        // x includes a size suffix like 0xffffi32, so we extract\n        // the suffix and remove it from x\n        size = Number(wordSizeSuffixMatch[2]);\n        x = wordSizeSuffixMatch[1];\n      }\n\n      var num = Number(x);\n\n      if (isNaN(num)) {\n        throw new SyntaxError('String \"' + x + '\" is no valid number');\n      }\n\n      if (wordSizeSuffixMatch) {\n        // x is a signed bin, oct, or hex literal\n        // num is the value of string x if x is interpreted as unsigned\n        if (num > 2 ** size - 1) {\n          // literal is too large for size suffix\n          throw new SyntaxError(\"String \\\"\".concat(x, \"\\\" is out of range\"));\n        } // check if the bit at index size - 1 is set and if so do the twos complement\n\n\n        if (num >= 2 ** (size - 1)) {\n          num = num - 2 ** size;\n        }\n      }\n\n      return num;\n    },\n    BigNumber: function BigNumber(x) {\n      return x.toNumber();\n    },\n    Fraction: function Fraction(x) {\n      return x.valueOf();\n    },\n    Unit: function Unit(x) {\n      throw new Error('Second argument with valueless unit expected');\n    },\n    null: function _null(x) {\n      return 0;\n    },\n    'Unit, string | Unit': function UnitStringUnit(unit, valuelessUnit) {\n      return unit.toNumber(valuelessUnit);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  }); // reviver function to parse a JSON object like:\n  //\n  //     {\"mathjs\":\"number\",\"value\":\"2.3\"}\n  //\n  // into a number 2.3\n\n  number.fromJSON = function (json) {\n    return parseFloat(json.value);\n  };\n\n  return number;\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}