{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { isBigNumber, isComplex, isFraction } from '../../utils/is.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { cbrtNumber } from '../../plain/number/index.js';\nvar name = 'cbrt';\nvar dependencies = ['config', 'typed', 'isNegative', 'unaryMinus', 'matrix', 'Complex', 'BigNumber', 'Fraction'];\nexport var createCbrt = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var config = _ref.config,\n      typed = _ref.typed,\n      isNegative = _ref.isNegative,\n      unaryMinus = _ref.unaryMinus,\n      matrix = _ref.matrix,\n      Complex = _ref.Complex,\n      BigNumber = _ref.BigNumber,\n      Fraction = _ref.Fraction;\n  /**\n   * Calculate the cubic root of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.cbrt(x)\n   *    math.cbrt(x, allRoots)\n   *\n   * Examples:\n   *\n   *    math.cbrt(27)                  // returns 3\n   *    math.cube(3)                   // returns 27\n   *    math.cbrt(-64)                 // returns -4\n   *    math.cbrt(math.unit('27 m^3')) // returns Unit 3 m\n   *    math.cbrt([27, 64, 125])       // returns [3, 4, 5]\n   *\n   *    const x = math.complex('8i')\n   *    math.cbrt(x)                   // returns Complex 1.7320508075689 + i\n   *    math.cbrt(x, true)             // returns Matrix [\n   *                                    //    1.7320508075689 + i\n   *                                    //   -1.7320508075689 + i\n   *                                    //   -2i\n   *                                    // ]\n   *\n   * See also:\n   *\n   *    square, sqrt, cube\n   *\n   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x\n   *            Value for which to calculate the cubic root.\n   * @param {boolean} [allRoots]  Optional, false by default. Only applicable\n   *            when `x` is a number or complex number. If true, all complex\n   *            roots are returned, if false (default) the principal root is\n   *            returned.\n   * @return {number | BigNumber | Complex | Unit | Array | Matrix}\n   *            Returns the cubic root of `x`\n   */\n\n  return typed(name, {\n    number: cbrtNumber,\n    // note: signature 'number, boolean' is also supported,\n    //       created by typed as it knows how to convert number to Complex\n    Complex: _cbrtComplex,\n    'Complex, boolean': _cbrtComplex,\n    BigNumber: function BigNumber(x) {\n      return x.cbrt();\n    },\n    Unit: _cbrtUnit,\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since cbrt(0) = 0\n      return deepMap(x, this, true);\n    }\n  });\n  /**\n   * Calculate the cubic root for a complex number\n   * @param {Complex} x\n   * @param {boolean} [allRoots]   If true, the function will return an array\n   *                               with all three roots. If false or undefined,\n   *                               the principal root is returned.\n   * @returns {Complex | Array.<Complex> | Matrix.<Complex>} Returns the cubic root(s) of x\n   * @private\n   */\n\n  function _cbrtComplex(x, allRoots) {\n    // https://www.wikiwand.com/en/Cube_root#/Complex_numbers\n    var arg3 = x.arg() / 3;\n    var abs = x.abs(); // principal root:\n\n    var principal = new Complex(cbrtNumber(abs), 0).mul(new Complex(0, arg3).exp());\n\n    if (allRoots) {\n      var all = [principal, new Complex(cbrtNumber(abs), 0).mul(new Complex(0, arg3 + Math.PI * 2 / 3).exp()), new Complex(cbrtNumber(abs), 0).mul(new Complex(0, arg3 - Math.PI * 2 / 3).exp())];\n      return config.matrix === 'Array' ? all : matrix(all);\n    } else {\n      return principal;\n    }\n  }\n  /**\n   * Calculate the cubic root for a Unit\n   * @param {Unit} x\n   * @return {Unit} Returns the cubic root of x\n   * @private\n   */\n\n\n  function _cbrtUnit(x) {\n    if (x.value && isComplex(x.value)) {\n      var result = x.clone();\n      result.value = 1.0;\n      result = result.pow(1.0 / 3); // Compute the units\n\n      result.value = _cbrtComplex(x.value); // Compute the value\n\n      return result;\n    } else {\n      var negate = isNegative(x.value);\n\n      if (negate) {\n        x.value = unaryMinus(x.value);\n      } // TODO: create a helper function for this\n\n\n      var third;\n\n      if (isBigNumber(x.value)) {\n        third = new BigNumber(1).div(3);\n      } else if (isFraction(x.value)) {\n        third = new Fraction(1, 3);\n      } else {\n        third = 1 / 3;\n      }\n\n      var _result = x.pow(third);\n\n      if (negate) {\n        _result.value = unaryMinus(_result.value);\n      }\n\n      return _result;\n    }\n  }\n});","map":{"version":3,"names":["factory","isBigNumber","isComplex","isFraction","deepMap","cbrtNumber","name","dependencies","createCbrt","_ref","config","typed","isNegative","unaryMinus","matrix","Complex","BigNumber","Fraction","number","_cbrtComplex","x","cbrt","Unit","_cbrtUnit","ArrayMatrix","allRoots","arg3","arg","abs","principal","mul","exp","all","Math","PI","value","result","clone","pow","negate","third","div","_result"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/function/arithmetic/cbrt.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { isBigNumber, isComplex, isFraction } from '../../utils/is.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { cbrtNumber } from '../../plain/number/index.js';\nvar name = 'cbrt';\nvar dependencies = ['config', 'typed', 'isNegative', 'unaryMinus', 'matrix', 'Complex', 'BigNumber', 'Fraction'];\nexport var createCbrt = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    config,\n    typed,\n    isNegative,\n    unaryMinus,\n    matrix,\n    Complex,\n    BigNumber,\n    Fraction\n  } = _ref;\n\n  /**\n   * Calculate the cubic root of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.cbrt(x)\n   *    math.cbrt(x, allRoots)\n   *\n   * Examples:\n   *\n   *    math.cbrt(27)                  // returns 3\n   *    math.cube(3)                   // returns 27\n   *    math.cbrt(-64)                 // returns -4\n   *    math.cbrt(math.unit('27 m^3')) // returns Unit 3 m\n   *    math.cbrt([27, 64, 125])       // returns [3, 4, 5]\n   *\n   *    const x = math.complex('8i')\n   *    math.cbrt(x)                   // returns Complex 1.7320508075689 + i\n   *    math.cbrt(x, true)             // returns Matrix [\n   *                                    //    1.7320508075689 + i\n   *                                    //   -1.7320508075689 + i\n   *                                    //   -2i\n   *                                    // ]\n   *\n   * See also:\n   *\n   *    square, sqrt, cube\n   *\n   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x\n   *            Value for which to calculate the cubic root.\n   * @param {boolean} [allRoots]  Optional, false by default. Only applicable\n   *            when `x` is a number or complex number. If true, all complex\n   *            roots are returned, if false (default) the principal root is\n   *            returned.\n   * @return {number | BigNumber | Complex | Unit | Array | Matrix}\n   *            Returns the cubic root of `x`\n   */\n  return typed(name, {\n    number: cbrtNumber,\n    // note: signature 'number, boolean' is also supported,\n    //       created by typed as it knows how to convert number to Complex\n    Complex: _cbrtComplex,\n    'Complex, boolean': _cbrtComplex,\n    BigNumber: function BigNumber(x) {\n      return x.cbrt();\n    },\n    Unit: _cbrtUnit,\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since cbrt(0) = 0\n      return deepMap(x, this, true);\n    }\n  });\n  /**\n   * Calculate the cubic root for a complex number\n   * @param {Complex} x\n   * @param {boolean} [allRoots]   If true, the function will return an array\n   *                               with all three roots. If false or undefined,\n   *                               the principal root is returned.\n   * @returns {Complex | Array.<Complex> | Matrix.<Complex>} Returns the cubic root(s) of x\n   * @private\n   */\n\n  function _cbrtComplex(x, allRoots) {\n    // https://www.wikiwand.com/en/Cube_root#/Complex_numbers\n    var arg3 = x.arg() / 3;\n    var abs = x.abs(); // principal root:\n\n    var principal = new Complex(cbrtNumber(abs), 0).mul(new Complex(0, arg3).exp());\n\n    if (allRoots) {\n      var all = [principal, new Complex(cbrtNumber(abs), 0).mul(new Complex(0, arg3 + Math.PI * 2 / 3).exp()), new Complex(cbrtNumber(abs), 0).mul(new Complex(0, arg3 - Math.PI * 2 / 3).exp())];\n      return config.matrix === 'Array' ? all : matrix(all);\n    } else {\n      return principal;\n    }\n  }\n  /**\n   * Calculate the cubic root for a Unit\n   * @param {Unit} x\n   * @return {Unit} Returns the cubic root of x\n   * @private\n   */\n\n\n  function _cbrtUnit(x) {\n    if (x.value && isComplex(x.value)) {\n      var result = x.clone();\n      result.value = 1.0;\n      result = result.pow(1.0 / 3); // Compute the units\n\n      result.value = _cbrtComplex(x.value); // Compute the value\n\n      return result;\n    } else {\n      var negate = isNegative(x.value);\n\n      if (negate) {\n        x.value = unaryMinus(x.value);\n      } // TODO: create a helper function for this\n\n\n      var third;\n\n      if (isBigNumber(x.value)) {\n        third = new BigNumber(1).div(3);\n      } else if (isFraction(x.value)) {\n        third = new Fraction(1, 3);\n      } else {\n        third = 1 / 3;\n      }\n\n      var _result = x.pow(third);\n\n      if (negate) {\n        _result.value = unaryMinus(_result.value);\n      }\n\n      return _result;\n    }\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}