{"ast":null,"code":"import { isCollection, isMatrix } from './is.js';\nimport { IndexError } from '../error/IndexError.js';\nimport { arraySize } from './array.js';\nimport { _switch } from './switch.js';\n/**\n * Test whether an array contains collections\n * @param {Array} array\n * @returns {boolean} Returns true when the array contains one or multiple\n *                    collections (Arrays or Matrices). Returns false otherwise.\n */\n\nexport function containsCollections(array) {\n  for (var i = 0; i < array.length; i++) {\n    if (isCollection(array[i])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Recursively loop over all elements in a given multi dimensional array\n * and invoke the callback on each of the elements.\n * @param {Array | Matrix} array\n * @param {Function} callback     The callback method is invoked with one\n *                                parameter: the current element in the array\n */\n\nexport function deepForEach(array, callback) {\n  if (isMatrix(array)) {\n    array = array.valueOf();\n  }\n\n  for (var i = 0, ii = array.length; i < ii; i++) {\n    var value = array[i];\n\n    if (Array.isArray(value)) {\n      deepForEach(value, callback);\n    } else {\n      callback(value);\n    }\n  }\n}\n/**\n * Execute the callback function element wise for each element in array and any\n * nested array\n * Returns an array with the results\n * @param {Array | Matrix} array\n * @param {Function} callback   The callback is called with two parameters:\n *                              value1 and value2, which contain the current\n *                              element of both arrays.\n * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n *\n * @return {Array | Matrix} res\n */\n\nexport function deepMap(array, callback, skipZeros) {\n  if (array && typeof array.map === 'function') {\n    // TODO: replace array.map with a for loop to improve performance\n    return array.map(function (x) {\n      return deepMap(x, callback, skipZeros);\n    });\n  } else {\n    return callback(array);\n  }\n}\n/**\n * Reduce a given matrix or array to a new matrix or\n * array with one less dimension, applying the given\n * callback in the selected dimension.\n * @param {Array | Matrix} mat\n * @param {number} dim\n * @param {Function} callback\n * @return {Array | Matrix} res\n */\n\nexport function reduce(mat, dim, callback) {\n  var size = Array.isArray(mat) ? arraySize(mat) : mat.size();\n\n  if (dim < 0 || dim >= size.length) {\n    // TODO: would be more clear when throwing a DimensionError here\n    throw new IndexError(dim, size.length);\n  }\n\n  if (isMatrix(mat)) {\n    return mat.create(_reduce(mat.valueOf(), dim, callback));\n  } else {\n    return _reduce(mat, dim, callback);\n  }\n}\n/**\n * Recursively reduce a matrix\n * @param {Array} mat\n * @param {number} dim\n * @param {Function} callback\n * @returns {Array} ret\n * @private\n */\n\nfunction _reduce(mat, dim, callback) {\n  var i, ret, val, tran;\n\n  if (dim <= 0) {\n    if (!Array.isArray(mat[0])) {\n      val = mat[0];\n\n      for (i = 1; i < mat.length; i++) {\n        val = callback(val, mat[i]);\n      }\n\n      return val;\n    } else {\n      tran = _switch(mat);\n      ret = [];\n\n      for (i = 0; i < tran.length; i++) {\n        ret[i] = _reduce(tran[i], dim - 1, callback);\n      }\n\n      return ret;\n    }\n  } else {\n    ret = [];\n\n    for (i = 0; i < mat.length; i++) {\n      ret[i] = _reduce(mat[i], dim - 1, callback);\n    }\n\n    return ret;\n  }\n} // TODO: document function scatter\n\n\nexport function scatter(a, j, w, x, u, mark, cindex, f, inverse, update, value) {\n  // a arrays\n  var avalues = a._values;\n  var aindex = a._index;\n  var aptr = a._ptr; // vars\n\n  var k, k0, k1, i; // check we need to process values (pattern matrix)\n\n  if (x) {\n    // values in j\n    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n      // row\n      i = aindex[k]; // check value exists in current j\n\n      if (w[i] !== mark) {\n        // i is new entry in j\n        w[i] = mark; // add i to pattern of C\n\n        cindex.push(i); // x(i) = A, check we need to call function this time\n\n        if (update) {\n          // copy value to workspace calling callback function\n          x[i] = inverse ? f(avalues[k], value) : f(value, avalues[k]); // function was called on current row\n\n          u[i] = mark;\n        } else {\n          // copy value to workspace\n          x[i] = avalues[k];\n        }\n      } else {\n        // i exists in C already\n        x[i] = inverse ? f(avalues[k], x[i]) : f(x[i], avalues[k]); // function was called on current row\n\n        u[i] = mark;\n      }\n    }\n  } else {\n    // values in j\n    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n      // row\n      i = aindex[k]; // check value exists in current j\n\n      if (w[i] !== mark) {\n        // i is new entry in j\n        w[i] = mark; // add i to pattern of C\n\n        cindex.push(i);\n      } else {\n        // indicate function was called on current row\n        u[i] = mark;\n      }\n    }\n  }\n}","map":{"version":3,"names":["isCollection","isMatrix","IndexError","arraySize","_switch","containsCollections","array","i","length","deepForEach","callback","valueOf","ii","value","Array","isArray","deepMap","skipZeros","map","x","reduce","mat","dim","size","create","_reduce","ret","val","tran","scatter","a","j","w","u","mark","cindex","f","inverse","update","avalues","_values","aindex","_index","aptr","_ptr","k","k0","k1","push"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/utils/collection.js"],"sourcesContent":["import { isCollection, isMatrix } from './is.js';\nimport { IndexError } from '../error/IndexError.js';\nimport { arraySize } from './array.js';\nimport { _switch } from './switch.js';\n/**\n * Test whether an array contains collections\n * @param {Array} array\n * @returns {boolean} Returns true when the array contains one or multiple\n *                    collections (Arrays or Matrices). Returns false otherwise.\n */\n\nexport function containsCollections(array) {\n  for (var i = 0; i < array.length; i++) {\n    if (isCollection(array[i])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Recursively loop over all elements in a given multi dimensional array\n * and invoke the callback on each of the elements.\n * @param {Array | Matrix} array\n * @param {Function} callback     The callback method is invoked with one\n *                                parameter: the current element in the array\n */\n\nexport function deepForEach(array, callback) {\n  if (isMatrix(array)) {\n    array = array.valueOf();\n  }\n\n  for (var i = 0, ii = array.length; i < ii; i++) {\n    var value = array[i];\n\n    if (Array.isArray(value)) {\n      deepForEach(value, callback);\n    } else {\n      callback(value);\n    }\n  }\n}\n/**\n * Execute the callback function element wise for each element in array and any\n * nested array\n * Returns an array with the results\n * @param {Array | Matrix} array\n * @param {Function} callback   The callback is called with two parameters:\n *                              value1 and value2, which contain the current\n *                              element of both arrays.\n * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n *\n * @return {Array | Matrix} res\n */\n\nexport function deepMap(array, callback, skipZeros) {\n  if (array && typeof array.map === 'function') {\n    // TODO: replace array.map with a for loop to improve performance\n    return array.map(function (x) {\n      return deepMap(x, callback, skipZeros);\n    });\n  } else {\n    return callback(array);\n  }\n}\n/**\n * Reduce a given matrix or array to a new matrix or\n * array with one less dimension, applying the given\n * callback in the selected dimension.\n * @param {Array | Matrix} mat\n * @param {number} dim\n * @param {Function} callback\n * @return {Array | Matrix} res\n */\n\nexport function reduce(mat, dim, callback) {\n  var size = Array.isArray(mat) ? arraySize(mat) : mat.size();\n\n  if (dim < 0 || dim >= size.length) {\n    // TODO: would be more clear when throwing a DimensionError here\n    throw new IndexError(dim, size.length);\n  }\n\n  if (isMatrix(mat)) {\n    return mat.create(_reduce(mat.valueOf(), dim, callback));\n  } else {\n    return _reduce(mat, dim, callback);\n  }\n}\n/**\n * Recursively reduce a matrix\n * @param {Array} mat\n * @param {number} dim\n * @param {Function} callback\n * @returns {Array} ret\n * @private\n */\n\nfunction _reduce(mat, dim, callback) {\n  var i, ret, val, tran;\n\n  if (dim <= 0) {\n    if (!Array.isArray(mat[0])) {\n      val = mat[0];\n\n      for (i = 1; i < mat.length; i++) {\n        val = callback(val, mat[i]);\n      }\n\n      return val;\n    } else {\n      tran = _switch(mat);\n      ret = [];\n\n      for (i = 0; i < tran.length; i++) {\n        ret[i] = _reduce(tran[i], dim - 1, callback);\n      }\n\n      return ret;\n    }\n  } else {\n    ret = [];\n\n    for (i = 0; i < mat.length; i++) {\n      ret[i] = _reduce(mat[i], dim - 1, callback);\n    }\n\n    return ret;\n  }\n} // TODO: document function scatter\n\n\nexport function scatter(a, j, w, x, u, mark, cindex, f, inverse, update, value) {\n  // a arrays\n  var avalues = a._values;\n  var aindex = a._index;\n  var aptr = a._ptr; // vars\n\n  var k, k0, k1, i; // check we need to process values (pattern matrix)\n\n  if (x) {\n    // values in j\n    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n      // row\n      i = aindex[k]; // check value exists in current j\n\n      if (w[i] !== mark) {\n        // i is new entry in j\n        w[i] = mark; // add i to pattern of C\n\n        cindex.push(i); // x(i) = A, check we need to call function this time\n\n        if (update) {\n          // copy value to workspace calling callback function\n          x[i] = inverse ? f(avalues[k], value) : f(value, avalues[k]); // function was called on current row\n\n          u[i] = mark;\n        } else {\n          // copy value to workspace\n          x[i] = avalues[k];\n        }\n      } else {\n        // i exists in C already\n        x[i] = inverse ? f(avalues[k], x[i]) : f(x[i], avalues[k]); // function was called on current row\n\n        u[i] = mark;\n      }\n    }\n  } else {\n    // values in j\n    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n      // row\n      i = aindex[k]; // check value exists in current j\n\n      if (w[i] !== mark) {\n        // i is new entry in j\n        w[i] = mark; // add i to pattern of C\n\n        cindex.push(i);\n      } else {\n        // indicate function was called on current row\n        u[i] = mark;\n      }\n    }\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}