{"ast":null,"code":"import { isAccessorNode, isArrayNode, isConstantNode, isFunctionNode, isIndexNode, isNode, isObjectNode, isParenthesisNode, isSymbolNode } from '../../utils/is.js';\nimport { getSafeProperty } from '../../utils/customs.js';\nimport { factory } from '../../utils/factory.js';\nimport { accessFactory } from './utils/access.js';\nvar name = 'AccessorNode';\nvar dependencies = ['subset', 'Node'];\nexport var createAccessorNode = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var subset = _ref.subset,\n      Node = _ref.Node;\n  var access = accessFactory({\n    subset: subset\n  });\n  /**\n   * @constructor AccessorNode\n   * @extends {Node}\n   * Access an object property or get a matrix subset\n   *\n   * @param {Node} object                 The object from which to retrieve\n   *                                      a property or subset.\n   * @param {IndexNode} index             IndexNode containing ranges\n   */\n\n  function AccessorNode(object, index) {\n    if (!(this instanceof AccessorNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (!isNode(object)) {\n      throw new TypeError('Node expected for parameter \"object\"');\n    }\n\n    if (!isIndexNode(index)) {\n      throw new TypeError('IndexNode expected for parameter \"index\"');\n    }\n\n    this.object = object || null;\n    this.index = index; // readonly property name\n\n    Object.defineProperty(this, 'name', {\n      get: function () {\n        if (this.index) {\n          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n        } else {\n          return this.object.name || '';\n        }\n      }.bind(this),\n      set: function set() {\n        throw new Error('Cannot assign a new name, name is read-only');\n      }\n    });\n  }\n\n  AccessorNode.prototype = new Node();\n  AccessorNode.prototype.type = 'AccessorNode';\n  AccessorNode.prototype.isAccessorNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  AccessorNode.prototype._compile = function (math, argNames) {\n    var evalObject = this.object._compile(math, argNames);\n\n    var evalIndex = this.index._compile(math, argNames);\n\n    if (this.index.isObjectProperty()) {\n      var prop = this.index.getObjectProperty();\n      return function evalAccessorNode(scope, args, context) {\n        // get a property from an object evaluated using the scope.\n        return getSafeProperty(evalObject(scope, args, context), prop);\n      };\n    } else {\n      return function evalAccessorNode(scope, args, context) {\n        var object = evalObject(scope, args, context);\n        var index = evalIndex(scope, args, object); // we pass object here instead of context\n\n        return access(object, index);\n      };\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  AccessorNode.prototype.forEach = function (callback) {\n    callback(this.object, 'object', this);\n    callback(this.index, 'index', this);\n  };\n  /**\n   * Create a new AccessorNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {AccessorNode} Returns a transformed copy of the node\n   */\n\n\n  AccessorNode.prototype.map = function (callback) {\n    return new AccessorNode(this._ifNode(callback(this.object, 'object', this)), this._ifNode(callback(this.index, 'index', this)));\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {AccessorNode}\n   */\n\n\n  AccessorNode.prototype.clone = function () {\n    return new AccessorNode(this.object, this.index);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AccessorNode.prototype._toString = function (options) {\n    var object = this.object.toString(options);\n\n    if (needParenthesis(this.object)) {\n      object = '(' + object + ')';\n    }\n\n    return object + this.index.toString(options);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AccessorNode.prototype.toHTML = function (options) {\n    var object = this.object.toHTML(options);\n\n    if (needParenthesis(this.object)) {\n      object = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + object + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    return object + this.index.toHTML(options);\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AccessorNode.prototype._toTex = function (options) {\n    var object = this.object.toTex(options);\n\n    if (needParenthesis(this.object)) {\n      object = '\\\\left(\\' + object + \\'\\\\right)';\n    }\n\n    return object + this.index.toTex(options);\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  AccessorNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'AccessorNode',\n      object: this.object,\n      index: this.index\n    };\n  };\n  /**\n   * Instantiate an AccessorNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"AccessorNode\", object: ..., index: ...}`,\n   *                       where mathjs is optional\n   * @returns {AccessorNode}\n   */\n\n\n  AccessorNode.fromJSON = function (json) {\n    return new AccessorNode(json.object, json.index);\n  };\n  /**\n   * Are parenthesis needed?\n   * @private\n   */\n\n\n  function needParenthesis(node) {\n    // TODO: maybe make a method on the nodes which tells whether they need parenthesis?\n    return !(isAccessorNode(node) || isArrayNode(node) || isConstantNode(node) || isFunctionNode(node) || isObjectNode(node) || isParenthesisNode(node) || isSymbolNode(node));\n  }\n\n  return AccessorNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["isAccessorNode","isArrayNode","isConstantNode","isFunctionNode","isIndexNode","isNode","isObjectNode","isParenthesisNode","isSymbolNode","getSafeProperty","factory","accessFactory","name","dependencies","createAccessorNode","_ref","subset","Node","access","AccessorNode","object","index","SyntaxError","TypeError","Object","defineProperty","get","isObjectProperty","getObjectProperty","bind","set","Error","prototype","type","_compile","math","argNames","evalObject","evalIndex","prop","evalAccessorNode","scope","args","context","forEach","callback","map","_ifNode","clone","_toString","options","toString","needParenthesis","toHTML","_toTex","toTex","toJSON","mathjs","fromJSON","json","node","isClass"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/expression/node/AccessorNode.js"],"sourcesContent":["import { isAccessorNode, isArrayNode, isConstantNode, isFunctionNode, isIndexNode, isNode, isObjectNode, isParenthesisNode, isSymbolNode } from '../../utils/is.js';\nimport { getSafeProperty } from '../../utils/customs.js';\nimport { factory } from '../../utils/factory.js';\nimport { accessFactory } from './utils/access.js';\nvar name = 'AccessorNode';\nvar dependencies = ['subset', 'Node'];\nexport var createAccessorNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    subset,\n    Node\n  } = _ref;\n  var access = accessFactory({\n    subset\n  });\n  /**\n   * @constructor AccessorNode\n   * @extends {Node}\n   * Access an object property or get a matrix subset\n   *\n   * @param {Node} object                 The object from which to retrieve\n   *                                      a property or subset.\n   * @param {IndexNode} index             IndexNode containing ranges\n   */\n\n  function AccessorNode(object, index) {\n    if (!(this instanceof AccessorNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (!isNode(object)) {\n      throw new TypeError('Node expected for parameter \"object\"');\n    }\n\n    if (!isIndexNode(index)) {\n      throw new TypeError('IndexNode expected for parameter \"index\"');\n    }\n\n    this.object = object || null;\n    this.index = index; // readonly property name\n\n    Object.defineProperty(this, 'name', {\n      get: function () {\n        if (this.index) {\n          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n        } else {\n          return this.object.name || '';\n        }\n      }.bind(this),\n      set: function set() {\n        throw new Error('Cannot assign a new name, name is read-only');\n      }\n    });\n  }\n\n  AccessorNode.prototype = new Node();\n  AccessorNode.prototype.type = 'AccessorNode';\n  AccessorNode.prototype.isAccessorNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  AccessorNode.prototype._compile = function (math, argNames) {\n    var evalObject = this.object._compile(math, argNames);\n\n    var evalIndex = this.index._compile(math, argNames);\n\n    if (this.index.isObjectProperty()) {\n      var prop = this.index.getObjectProperty();\n      return function evalAccessorNode(scope, args, context) {\n        // get a property from an object evaluated using the scope.\n        return getSafeProperty(evalObject(scope, args, context), prop);\n      };\n    } else {\n      return function evalAccessorNode(scope, args, context) {\n        var object = evalObject(scope, args, context);\n        var index = evalIndex(scope, args, object); // we pass object here instead of context\n\n        return access(object, index);\n      };\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  AccessorNode.prototype.forEach = function (callback) {\n    callback(this.object, 'object', this);\n    callback(this.index, 'index', this);\n  };\n  /**\n   * Create a new AccessorNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {AccessorNode} Returns a transformed copy of the node\n   */\n\n\n  AccessorNode.prototype.map = function (callback) {\n    return new AccessorNode(this._ifNode(callback(this.object, 'object', this)), this._ifNode(callback(this.index, 'index', this)));\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {AccessorNode}\n   */\n\n\n  AccessorNode.prototype.clone = function () {\n    return new AccessorNode(this.object, this.index);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AccessorNode.prototype._toString = function (options) {\n    var object = this.object.toString(options);\n\n    if (needParenthesis(this.object)) {\n      object = '(' + object + ')';\n    }\n\n    return object + this.index.toString(options);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AccessorNode.prototype.toHTML = function (options) {\n    var object = this.object.toHTML(options);\n\n    if (needParenthesis(this.object)) {\n      object = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + object + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    return object + this.index.toHTML(options);\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AccessorNode.prototype._toTex = function (options) {\n    var object = this.object.toTex(options);\n\n    if (needParenthesis(this.object)) {\n      object = '\\\\left(\\' + object + \\'\\\\right)';\n    }\n\n    return object + this.index.toTex(options);\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  AccessorNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'AccessorNode',\n      object: this.object,\n      index: this.index\n    };\n  };\n  /**\n   * Instantiate an AccessorNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"AccessorNode\", object: ..., index: ...}`,\n   *                       where mathjs is optional\n   * @returns {AccessorNode}\n   */\n\n\n  AccessorNode.fromJSON = function (json) {\n    return new AccessorNode(json.object, json.index);\n  };\n  /**\n   * Are parenthesis needed?\n   * @private\n   */\n\n\n  function needParenthesis(node) {\n    // TODO: maybe make a method on the nodes which tells whether they need parenthesis?\n    return !(isAccessorNode(node) || isArrayNode(node) || isConstantNode(node) || isFunctionNode(node) || isObjectNode(node) || isParenthesisNode(node) || isSymbolNode(node));\n  }\n\n  return AccessorNode;\n}, {\n  isClass: true,\n  isNode: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}