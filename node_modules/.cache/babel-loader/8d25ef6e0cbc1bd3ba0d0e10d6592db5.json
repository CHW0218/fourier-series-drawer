{"ast":null,"code":"import { isMatrix } from '../../utils/is.js';\nimport { arraySize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { format } from '../../utils/string.js';\nimport { clone } from '../../utils/object.js';\nvar name = 'pinv';\nvar dependencies = ['typed', 'matrix', 'inv', 'deepEqual', 'equal', 'dotDivide', 'dot', 'ctranspose', 'divideScalar', 'multiply', 'add', 'Complex'];\nexport var createPinv = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      inv = _ref.inv,\n      deepEqual = _ref.deepEqual,\n      equal = _ref.equal,\n      dotDivide = _ref.dotDivide,\n      dot = _ref.dot,\n      ctranspose = _ref.ctranspose,\n      divideScalar = _ref.divideScalar,\n      multiply = _ref.multiply,\n      add = _ref.add,\n      Complex = _ref.Complex;\n  /**\n   * Calculate the Moore–Penrose inverse of a matrix.\n   *\n   * Syntax:\n   *\n   *     math.pinv(x)\n   *\n   * Examples:\n   *\n   *     math.pinv([[1, 2], [3, 4]])          // returns [[-2, 1], [1.5, -0.5]]\n   *     math.pinv([[1, 0], [0, 1], [0, 1]])  // returns [[1, 0, 0], [0, 0.5, 0.5]]\n   *     math.pinv(4)                         // returns 0.25\n   *\n   * See also:\n   *\n   *     inv\n   *\n   * @param {number | Complex | Array | Matrix} x     Matrix to be inversed\n   * @return {number | Complex | Array | Matrix} The inverse of `x`.\n   */\n\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(x) {\n      var size = isMatrix(x) ? x.size() : arraySize(x);\n\n      switch (size.length) {\n        case 1:\n          // vector\n          if (_isZeros(x)) return ctranspose(x); // null vector\n\n          if (size[0] === 1) {\n            return inv(x); // invertible matrix\n          } else {\n            return dotDivide(ctranspose(x), dot(x, x));\n          }\n\n        case 2:\n          // two dimensional array\n          {\n            if (_isZeros(x)) return ctranspose(x); // zero matrixx\n\n            var rows = size[0];\n            var cols = size[1];\n\n            if (rows === cols) {\n              try {\n                return inv(x); // invertible matrix\n              } catch (err) {\n                if (err instanceof Error && err.message.match(/Cannot calculate inverse, determinant is zero/)) {// Expected\n                } else {\n                  throw err;\n                }\n              }\n            }\n\n            if (isMatrix(x)) {\n              return matrix(_pinv(x.valueOf(), rows, cols), x.storage());\n            } else {\n              // return an Array\n              return _pinv(x, rows, cols);\n            }\n          }\n\n        default:\n          // multi dimensional array\n          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + format(size) + ')');\n      }\n    },\n    any: function any(x) {\n      // scalar\n      if (equal(x, 0)) return clone(x); // zero\n\n      return divideScalar(1, x);\n    }\n  });\n  /**\n   * Calculate the Moore–Penrose inverse of a matrix\n   * @param {Array[]} mat     A matrix\n   * @param {number} rows     Number of rows\n   * @param {number} cols     Number of columns\n   * @return {Array[]} pinv    Pseudoinverse matrix\n   * @private\n   */\n\n  function _pinv(mat, rows, cols) {\n    var _rankFact2 = _rankFact(mat, rows, cols),\n        C = _rankFact2.C,\n        F = _rankFact2.F; // TODO: Use SVD instead (may improve precision)\n\n\n    var Cpinv = multiply(inv(multiply(ctranspose(C), C)), ctranspose(C));\n    var Fpinv = multiply(ctranspose(F), inv(multiply(F, ctranspose(F))));\n    return multiply(Fpinv, Cpinv);\n  }\n  /**\n   * Calculate the reduced row echelon form of a matrix\n   *\n   * Modified from https://rosettacode.org/wiki/Reduced_row_echelon_form\n   *\n   * @param {Array[]} mat     A matrix\n   * @param {number} rows     Number of rows\n   * @param {number} cols     Number of columns\n   * @return {Array[]}        Reduced row echelon form\n   * @private\n   */\n\n\n  function _rref(mat, rows, cols) {\n    var M = clone(mat);\n    var lead = 0;\n\n    for (var r = 0; r < rows; r++) {\n      if (cols <= lead) {\n        return M;\n      }\n\n      var i = r;\n\n      while (_isZero(M[i][lead])) {\n        i++;\n\n        if (rows === i) {\n          i = r;\n          lead++;\n\n          if (cols === lead) {\n            return M;\n          }\n        }\n      }\n\n      var _ref2 = [M[r], M[i]];\n      M[i] = _ref2[0];\n      M[r] = _ref2[1];\n      var val = M[r][lead];\n\n      for (var j = 0; j < cols; j++) {\n        M[r][j] = dotDivide(M[r][j], val);\n      }\n\n      for (var _i = 0; _i < rows; _i++) {\n        if (_i === r) continue;\n        val = M[_i][lead];\n\n        for (var _j = 0; _j < cols; _j++) {\n          M[_i][_j] = add(M[_i][_j], multiply(-1, multiply(val, M[r][_j])));\n        }\n      }\n\n      lead++;\n    }\n\n    return M;\n  }\n  /**\n   * Calculate the rank factorization of a matrix\n   *\n   * @param {Array[]} mat                  A matrix (M)\n   * @param {number} rows                  Number of rows\n   * @param {number} cols                  Number of columns\n   * @return {{C: Array, F: Array}}        rank factorization where M = C F\n   * @private\n   */\n\n\n  function _rankFact(mat, rows, cols) {\n    var rref = _rref(mat, rows, cols);\n\n    var C = mat.map(function (_, i) {\n      return _.filter(function (_, j) {\n        return j < rows && !_isZero(dot(rref[j], rref[j]));\n      });\n    });\n    var F = rref.filter(function (_, i) {\n      return !_isZero(dot(rref[i], rref[i]));\n    });\n    return {\n      C: C,\n      F: F\n    };\n  }\n\n  function _isZero(x) {\n    return equal(add(x, Complex(1, 1)), add(0, Complex(1, 1)));\n  }\n\n  function _isZeros(arr) {\n    return deepEqual(add(arr, Complex(1, 1)), add(multiply(arr, 0), Complex(1, 1)));\n  }\n});","map":{"version":3,"names":["isMatrix","arraySize","factory","format","clone","name","dependencies","createPinv","_ref","typed","matrix","inv","deepEqual","equal","dotDivide","dot","ctranspose","divideScalar","multiply","add","Complex","ArrayMatrix","x","size","length","_isZeros","rows","cols","err","Error","message","match","_pinv","valueOf","storage","RangeError","any","mat","_rankFact","C","F","Cpinv","Fpinv","_rref","M","lead","r","i","_isZero","val","j","_i","_j","rref","map","_","filter","arr"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/function/matrix/pinv.js"],"sourcesContent":["import { isMatrix } from '../../utils/is.js';\nimport { arraySize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { format } from '../../utils/string.js';\nimport { clone } from '../../utils/object.js';\nvar name = 'pinv';\nvar dependencies = ['typed', 'matrix', 'inv', 'deepEqual', 'equal', 'dotDivide', 'dot', 'ctranspose', 'divideScalar', 'multiply', 'add', 'Complex'];\nexport var createPinv = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    inv,\n    deepEqual,\n    equal,\n    dotDivide,\n    dot,\n    ctranspose,\n    divideScalar,\n    multiply,\n    add,\n    Complex\n  } = _ref;\n\n  /**\n   * Calculate the Moore–Penrose inverse of a matrix.\n   *\n   * Syntax:\n   *\n   *     math.pinv(x)\n   *\n   * Examples:\n   *\n   *     math.pinv([[1, 2], [3, 4]])          // returns [[-2, 1], [1.5, -0.5]]\n   *     math.pinv([[1, 0], [0, 1], [0, 1]])  // returns [[1, 0, 0], [0, 0.5, 0.5]]\n   *     math.pinv(4)                         // returns 0.25\n   *\n   * See also:\n   *\n   *     inv\n   *\n   * @param {number | Complex | Array | Matrix} x     Matrix to be inversed\n   * @return {number | Complex | Array | Matrix} The inverse of `x`.\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(x) {\n      var size = isMatrix(x) ? x.size() : arraySize(x);\n\n      switch (size.length) {\n        case 1:\n          // vector\n          if (_isZeros(x)) return ctranspose(x); // null vector\n\n          if (size[0] === 1) {\n            return inv(x); // invertible matrix\n          } else {\n            return dotDivide(ctranspose(x), dot(x, x));\n          }\n\n        case 2:\n          // two dimensional array\n          {\n            if (_isZeros(x)) return ctranspose(x); // zero matrixx\n\n            var rows = size[0];\n            var cols = size[1];\n\n            if (rows === cols) {\n              try {\n                return inv(x); // invertible matrix\n              } catch (err) {\n                if (err instanceof Error && err.message.match(/Cannot calculate inverse, determinant is zero/)) {// Expected\n                } else {\n                  throw err;\n                }\n              }\n            }\n\n            if (isMatrix(x)) {\n              return matrix(_pinv(x.valueOf(), rows, cols), x.storage());\n            } else {\n              // return an Array\n              return _pinv(x, rows, cols);\n            }\n          }\n\n        default:\n          // multi dimensional array\n          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + format(size) + ')');\n      }\n    },\n    any: function any(x) {\n      // scalar\n      if (equal(x, 0)) return clone(x); // zero\n\n      return divideScalar(1, x);\n    }\n  });\n  /**\n   * Calculate the Moore–Penrose inverse of a matrix\n   * @param {Array[]} mat     A matrix\n   * @param {number} rows     Number of rows\n   * @param {number} cols     Number of columns\n   * @return {Array[]} pinv    Pseudoinverse matrix\n   * @private\n   */\n\n  function _pinv(mat, rows, cols) {\n    var {\n      C,\n      F\n    } = _rankFact(mat, rows, cols); // TODO: Use SVD instead (may improve precision)\n\n\n    var Cpinv = multiply(inv(multiply(ctranspose(C), C)), ctranspose(C));\n    var Fpinv = multiply(ctranspose(F), inv(multiply(F, ctranspose(F))));\n    return multiply(Fpinv, Cpinv);\n  }\n  /**\n   * Calculate the reduced row echelon form of a matrix\n   *\n   * Modified from https://rosettacode.org/wiki/Reduced_row_echelon_form\n   *\n   * @param {Array[]} mat     A matrix\n   * @param {number} rows     Number of rows\n   * @param {number} cols     Number of columns\n   * @return {Array[]}        Reduced row echelon form\n   * @private\n   */\n\n\n  function _rref(mat, rows, cols) {\n    var M = clone(mat);\n    var lead = 0;\n\n    for (var r = 0; r < rows; r++) {\n      if (cols <= lead) {\n        return M;\n      }\n\n      var i = r;\n\n      while (_isZero(M[i][lead])) {\n        i++;\n\n        if (rows === i) {\n          i = r;\n          lead++;\n\n          if (cols === lead) {\n            return M;\n          }\n        }\n      }\n\n      [M[i], M[r]] = [M[r], M[i]];\n      var val = M[r][lead];\n\n      for (var j = 0; j < cols; j++) {\n        M[r][j] = dotDivide(M[r][j], val);\n      }\n\n      for (var _i = 0; _i < rows; _i++) {\n        if (_i === r) continue;\n        val = M[_i][lead];\n\n        for (var _j = 0; _j < cols; _j++) {\n          M[_i][_j] = add(M[_i][_j], multiply(-1, multiply(val, M[r][_j])));\n        }\n      }\n\n      lead++;\n    }\n\n    return M;\n  }\n  /**\n   * Calculate the rank factorization of a matrix\n   *\n   * @param {Array[]} mat                  A matrix (M)\n   * @param {number} rows                  Number of rows\n   * @param {number} cols                  Number of columns\n   * @return {{C: Array, F: Array}}        rank factorization where M = C F\n   * @private\n   */\n\n\n  function _rankFact(mat, rows, cols) {\n    var rref = _rref(mat, rows, cols);\n\n    var C = mat.map((_, i) => _.filter((_, j) => j < rows && !_isZero(dot(rref[j], rref[j]))));\n    var F = rref.filter((_, i) => !_isZero(dot(rref[i], rref[i])));\n    return {\n      C,\n      F\n    };\n  }\n\n  function _isZero(x) {\n    return equal(add(x, Complex(1, 1)), add(0, Complex(1, 1)));\n  }\n\n  function _isZeros(arr) {\n    return deepEqual(add(arr, Complex(1, 1)), add(multiply(arr, 0), Complex(1, 1)));\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}