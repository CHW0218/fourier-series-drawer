{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { isMatrix } from '../../utils/is.js';\nvar name = 'dot';\nvar dependencies = ['typed', 'addScalar', 'multiplyScalar', 'conj', 'size'];\nexport var createDot = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      addScalar = _ref.addScalar,\n      multiplyScalar = _ref.multiplyScalar,\n      conj = _ref.conj,\n      size = _ref.size;\n  /**\n   * Calculate the dot product of two vectors. The dot product of\n   * `A = [a1, a2, ..., an]` and `B = [b1, b2, ..., bn]` is defined as:\n   *\n   *    dot(A, B) = conj(a1) * b1 + conj(a2) * b2 + ... + conj(an) * bn\n   *\n   * Syntax:\n   *\n   *    math.dot(x, y)\n   *\n   * Examples:\n   *\n   *    math.dot([2, 4, 1], [2, 2, 3])       // returns number 15\n   *    math.multiply([2, 4, 1], [2, 2, 3])  // returns number 15\n   *\n   * See also:\n   *\n   *    multiply, cross\n   *\n   * @param  {Array | Matrix} x     First vector\n   * @param  {Array | Matrix} y     Second vector\n   * @return {number}               Returns the dot product of `x` and `y`\n   */\n\n  return typed(name, {\n    'Array | DenseMatrix, Array | DenseMatrix': _denseDot,\n    'SparseMatrix, SparseMatrix': _sparseDot\n  });\n\n  function _validateDim(x, y) {\n    var xSize = _size(x);\n\n    var ySize = _size(y);\n\n    var xLen, yLen;\n\n    if (xSize.length === 1) {\n      xLen = xSize[0];\n    } else if (xSize.length === 2 && xSize[1] === 1) {\n      xLen = xSize[0];\n    } else {\n      throw new RangeError('Expected a column vector, instead got a matrix of size (' + xSize.join(', ') + ')');\n    }\n\n    if (ySize.length === 1) {\n      yLen = ySize[0];\n    } else if (ySize.length === 2 && ySize[1] === 1) {\n      yLen = ySize[0];\n    } else {\n      throw new RangeError('Expected a column vector, instead got a matrix of size (' + ySize.join(', ') + ')');\n    }\n\n    if (xLen !== yLen) throw new RangeError('Vectors must have equal length (' + xLen + ' != ' + yLen + ')');\n    if (xLen === 0) throw new RangeError('Cannot calculate the dot product of empty vectors');\n    return xLen;\n  }\n\n  function _denseDot(a, b) {\n    var N = _validateDim(a, b);\n\n    var adata = isMatrix(a) ? a._data : a;\n    var adt = isMatrix(a) ? a._datatype : undefined;\n    var bdata = isMatrix(b) ? b._data : b;\n    var bdt = isMatrix(b) ? b._datatype : undefined; // are these 2-dimensional column vectors? (as opposed to 1-dimensional vectors)\n\n    var aIsColumn = _size(a).length === 2;\n    var bIsColumn = _size(b).length === 2;\n    var add = addScalar;\n    var mul = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      var dt = adt; // find signatures that matches (dt, dt)\n\n      add = typed.find(addScalar, [dt, dt]);\n      mul = typed.find(multiplyScalar, [dt, dt]);\n    } // both vectors 1-dimensional\n\n\n    if (!aIsColumn && !bIsColumn) {\n      var c = mul(conj(adata[0]), bdata[0]);\n\n      for (var i = 1; i < N; i++) {\n        c = add(c, mul(conj(adata[i]), bdata[i]));\n      }\n\n      return c;\n    } // a is 1-dim, b is column\n\n\n    if (!aIsColumn && bIsColumn) {\n      var _c = mul(conj(adata[0]), bdata[0][0]);\n\n      for (var _i = 1; _i < N; _i++) {\n        _c = add(_c, mul(conj(adata[_i]), bdata[_i][0]));\n      }\n\n      return _c;\n    } // a is column, b is 1-dim\n\n\n    if (aIsColumn && !bIsColumn) {\n      var _c2 = mul(conj(adata[0][0]), bdata[0]);\n\n      for (var _i2 = 1; _i2 < N; _i2++) {\n        _c2 = add(_c2, mul(conj(adata[_i2][0]), bdata[_i2]));\n      }\n\n      return _c2;\n    } // both vectors are column\n\n\n    if (aIsColumn && bIsColumn) {\n      var _c3 = mul(conj(adata[0][0]), bdata[0][0]);\n\n      for (var _i3 = 1; _i3 < N; _i3++) {\n        _c3 = add(_c3, mul(conj(adata[_i3][0]), bdata[_i3][0]));\n      }\n\n      return _c3;\n    }\n  }\n\n  function _sparseDot(x, y) {\n    _validateDim(x, y);\n\n    var xindex = x._index;\n    var xvalues = x._values;\n    var yindex = y._index;\n    var yvalues = y._values; // TODO optimize add & mul using datatype\n\n    var c = 0;\n    var add = addScalar;\n    var mul = multiplyScalar;\n    var i = 0;\n    var j = 0;\n\n    while (i < xindex.length && j < yindex.length) {\n      var I = xindex[i];\n      var J = yindex[j];\n\n      if (I < J) {\n        i++;\n        continue;\n      }\n\n      if (I > J) {\n        j++;\n        continue;\n      }\n\n      if (I === J) {\n        c = add(c, mul(xvalues[i], yvalues[j]));\n        i++;\n        j++;\n      }\n    }\n\n    return c;\n  } // TODO remove this once #1771 is fixed\n\n\n  function _size(x) {\n    return isMatrix(x) ? x.size() : size(x);\n  }\n});","map":{"version":3,"names":["factory","isMatrix","name","dependencies","createDot","_ref","typed","addScalar","multiplyScalar","conj","size","_denseDot","_sparseDot","_validateDim","x","y","xSize","_size","ySize","xLen","yLen","length","RangeError","join","a","b","N","adata","_data","adt","_datatype","undefined","bdata","bdt","aIsColumn","bIsColumn","add","mul","dt","find","c","i","_c","_i","_c2","_i2","_c3","_i3","xindex","_index","xvalues","_values","yindex","yvalues","j","I","J"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/function/matrix/dot.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { isMatrix } from '../../utils/is.js';\nvar name = 'dot';\nvar dependencies = ['typed', 'addScalar', 'multiplyScalar', 'conj', 'size'];\nexport var createDot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    addScalar,\n    multiplyScalar,\n    conj,\n    size\n  } = _ref;\n\n  /**\n   * Calculate the dot product of two vectors. The dot product of\n   * `A = [a1, a2, ..., an]` and `B = [b1, b2, ..., bn]` is defined as:\n   *\n   *    dot(A, B) = conj(a1) * b1 + conj(a2) * b2 + ... + conj(an) * bn\n   *\n   * Syntax:\n   *\n   *    math.dot(x, y)\n   *\n   * Examples:\n   *\n   *    math.dot([2, 4, 1], [2, 2, 3])       // returns number 15\n   *    math.multiply([2, 4, 1], [2, 2, 3])  // returns number 15\n   *\n   * See also:\n   *\n   *    multiply, cross\n   *\n   * @param  {Array | Matrix} x     First vector\n   * @param  {Array | Matrix} y     Second vector\n   * @return {number}               Returns the dot product of `x` and `y`\n   */\n  return typed(name, {\n    'Array | DenseMatrix, Array | DenseMatrix': _denseDot,\n    'SparseMatrix, SparseMatrix': _sparseDot\n  });\n\n  function _validateDim(x, y) {\n    var xSize = _size(x);\n\n    var ySize = _size(y);\n\n    var xLen, yLen;\n\n    if (xSize.length === 1) {\n      xLen = xSize[0];\n    } else if (xSize.length === 2 && xSize[1] === 1) {\n      xLen = xSize[0];\n    } else {\n      throw new RangeError('Expected a column vector, instead got a matrix of size (' + xSize.join(', ') + ')');\n    }\n\n    if (ySize.length === 1) {\n      yLen = ySize[0];\n    } else if (ySize.length === 2 && ySize[1] === 1) {\n      yLen = ySize[0];\n    } else {\n      throw new RangeError('Expected a column vector, instead got a matrix of size (' + ySize.join(', ') + ')');\n    }\n\n    if (xLen !== yLen) throw new RangeError('Vectors must have equal length (' + xLen + ' != ' + yLen + ')');\n    if (xLen === 0) throw new RangeError('Cannot calculate the dot product of empty vectors');\n    return xLen;\n  }\n\n  function _denseDot(a, b) {\n    var N = _validateDim(a, b);\n\n    var adata = isMatrix(a) ? a._data : a;\n    var adt = isMatrix(a) ? a._datatype : undefined;\n    var bdata = isMatrix(b) ? b._data : b;\n    var bdt = isMatrix(b) ? b._datatype : undefined; // are these 2-dimensional column vectors? (as opposed to 1-dimensional vectors)\n\n    var aIsColumn = _size(a).length === 2;\n    var bIsColumn = _size(b).length === 2;\n    var add = addScalar;\n    var mul = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      var dt = adt; // find signatures that matches (dt, dt)\n\n      add = typed.find(addScalar, [dt, dt]);\n      mul = typed.find(multiplyScalar, [dt, dt]);\n    } // both vectors 1-dimensional\n\n\n    if (!aIsColumn && !bIsColumn) {\n      var c = mul(conj(adata[0]), bdata[0]);\n\n      for (var i = 1; i < N; i++) {\n        c = add(c, mul(conj(adata[i]), bdata[i]));\n      }\n\n      return c;\n    } // a is 1-dim, b is column\n\n\n    if (!aIsColumn && bIsColumn) {\n      var _c = mul(conj(adata[0]), bdata[0][0]);\n\n      for (var _i = 1; _i < N; _i++) {\n        _c = add(_c, mul(conj(adata[_i]), bdata[_i][0]));\n      }\n\n      return _c;\n    } // a is column, b is 1-dim\n\n\n    if (aIsColumn && !bIsColumn) {\n      var _c2 = mul(conj(adata[0][0]), bdata[0]);\n\n      for (var _i2 = 1; _i2 < N; _i2++) {\n        _c2 = add(_c2, mul(conj(adata[_i2][0]), bdata[_i2]));\n      }\n\n      return _c2;\n    } // both vectors are column\n\n\n    if (aIsColumn && bIsColumn) {\n      var _c3 = mul(conj(adata[0][0]), bdata[0][0]);\n\n      for (var _i3 = 1; _i3 < N; _i3++) {\n        _c3 = add(_c3, mul(conj(adata[_i3][0]), bdata[_i3][0]));\n      }\n\n      return _c3;\n    }\n  }\n\n  function _sparseDot(x, y) {\n    _validateDim(x, y);\n\n    var xindex = x._index;\n    var xvalues = x._values;\n    var yindex = y._index;\n    var yvalues = y._values; // TODO optimize add & mul using datatype\n\n    var c = 0;\n    var add = addScalar;\n    var mul = multiplyScalar;\n    var i = 0;\n    var j = 0;\n\n    while (i < xindex.length && j < yindex.length) {\n      var I = xindex[i];\n      var J = yindex[j];\n\n      if (I < J) {\n        i++;\n        continue;\n      }\n\n      if (I > J) {\n        j++;\n        continue;\n      }\n\n      if (I === J) {\n        c = add(c, mul(xvalues[i], yvalues[j]));\n        i++;\n        j++;\n      }\n    }\n\n    return c;\n  } // TODO remove this once #1771 is fixed\n\n\n  function _size(x) {\n    return isMatrix(x) ? x.size() : size(x);\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}