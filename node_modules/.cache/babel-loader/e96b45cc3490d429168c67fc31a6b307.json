{"ast":null,"code":"import { typeOf } from '../../../utils/is.js';\n/**\n * Improve error messages for statistics functions. Errors are typically\n * thrown in an internally used function like larger, causing the error\n * not to mention the function (like max) which is actually used by the user.\n *\n * @param {Error} err\n * @param {String} fnName\n * @param {*} [value]\n * @return {Error}\n */\n\nexport function improveErrorMessage(err, fnName, value) {\n  // TODO: add information with the index (also needs transform in expression parser)\n  var details;\n\n  if (String(err).indexOf('Unexpected type') !== -1) {\n    details = arguments.length > 2 ? ' (type: ' + typeOf(value) + ', value: ' + JSON.stringify(value) + ')' : ' (type: ' + err.data.actual + ')';\n    return new TypeError('Cannot calculate ' + fnName + ', unexpected type of argument' + details);\n  }\n\n  if (String(err).indexOf('complex numbers') !== -1) {\n    details = arguments.length > 2 ? ' (type: ' + typeOf(value) + ', value: ' + JSON.stringify(value) + ')' : '';\n    return new TypeError('Cannot calculate ' + fnName + ', no ordering relation is defined for complex numbers' + details);\n  }\n\n  return err;\n}","map":{"version":3,"names":["typeOf","improveErrorMessage","err","fnName","value","details","String","indexOf","arguments","length","JSON","stringify","data","actual","TypeError"],"sources":["/Users/ayao/vscode/fourier-series-drawer/node_modules/mathjs/lib/esm/function/statistics/utils/improveErrorMessage.js"],"sourcesContent":["import { typeOf } from '../../../utils/is.js';\n/**\n * Improve error messages for statistics functions. Errors are typically\n * thrown in an internally used function like larger, causing the error\n * not to mention the function (like max) which is actually used by the user.\n *\n * @param {Error} err\n * @param {String} fnName\n * @param {*} [value]\n * @return {Error}\n */\n\nexport function improveErrorMessage(err, fnName, value) {\n  // TODO: add information with the index (also needs transform in expression parser)\n  var details;\n\n  if (String(err).indexOf('Unexpected type') !== -1) {\n    details = arguments.length > 2 ? ' (type: ' + typeOf(value) + ', value: ' + JSON.stringify(value) + ')' : ' (type: ' + err.data.actual + ')';\n    return new TypeError('Cannot calculate ' + fnName + ', unexpected type of argument' + details);\n  }\n\n  if (String(err).indexOf('complex numbers') !== -1) {\n    details = arguments.length > 2 ? ' (type: ' + typeOf(value) + ', value: ' + JSON.stringify(value) + ')' : '';\n    return new TypeError('Cannot calculate ' + fnName + ', no ordering relation is defined for complex numbers' + details);\n  }\n\n  return err;\n}"],"mappings":"AAAA,SAASA,MAAT,QAAuB,sBAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,mBAAT,CAA6BC,GAA7B,EAAkCC,MAAlC,EAA0CC,KAA1C,EAAiD;EACtD;EACA,IAAIC,OAAJ;;EAEA,IAAIC,MAAM,CAACJ,GAAD,CAAN,CAAYK,OAAZ,CAAoB,iBAApB,MAA2C,CAAC,CAAhD,EAAmD;IACjDF,OAAO,GAAGG,SAAS,CAACC,MAAV,GAAmB,CAAnB,GAAuB,aAAaT,MAAM,CAACI,KAAD,CAAnB,GAA6B,WAA7B,GAA2CM,IAAI,CAACC,SAAL,CAAeP,KAAf,CAA3C,GAAmE,GAA1F,GAAgG,aAAaF,GAAG,CAACU,IAAJ,CAASC,MAAtB,GAA+B,GAAzI;IACA,OAAO,IAAIC,SAAJ,CAAc,sBAAsBX,MAAtB,GAA+B,+BAA/B,GAAiEE,OAA/E,CAAP;EACD;;EAED,IAAIC,MAAM,CAACJ,GAAD,CAAN,CAAYK,OAAZ,CAAoB,iBAApB,MAA2C,CAAC,CAAhD,EAAmD;IACjDF,OAAO,GAAGG,SAAS,CAACC,MAAV,GAAmB,CAAnB,GAAuB,aAAaT,MAAM,CAACI,KAAD,CAAnB,GAA6B,WAA7B,GAA2CM,IAAI,CAACC,SAAL,CAAeP,KAAf,CAA3C,GAAmE,GAA1F,GAAgG,EAA1G;IACA,OAAO,IAAIU,SAAJ,CAAc,sBAAsBX,MAAtB,GAA+B,uDAA/B,GAAyFE,OAAvG,CAAP;EACD;;EAED,OAAOH,GAAP;AACD"},"metadata":{},"sourceType":"module"}